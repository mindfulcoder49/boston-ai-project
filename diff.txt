diff --git a/.gitignore b/.gitignore
index d72cbce..ea47dc1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -47,3 +47,6 @@ transferdata.sh
 .venv/
 
 *.pdf
+
+output.txt
+latest.diff
\ No newline at end of file
diff --git a/app/Console/Commands/DownloadBostonDataset.php b/app/Console/Commands/DownloadBostonDataset.php
index bf5a338..f51b17b 100644
--- a/app/Console/Commands/DownloadBostonDataset.php
+++ b/app/Console/Commands/DownloadBostonDataset.php
@@ -3,50 +3,76 @@
 namespace App\Console\Commands;
 
 use Illuminate\Console\Command;
-use Illuminate\Support\Facades\Storage;
+// Illuminate\Support\Facades\Storage; // Not strictly needed if using file_put_contents with full paths
 
 class DownloadBostonDataset extends Command
 {
     protected $signature = 'app:download-boston-dataset';
-    protected $description = 'Downloads datasets from Boston Open Data';
+    protected $description = 'Downloads datasets specifically from Boston Open Data using boston_datasets.php config';
 
     public function handle()
     {
-        // Load the configuration from the config file
-        $config = config('datasets');
+        // Load the configuration from the boston_datasets.php config file
+        $config = config('boston_datasets');
+        if (!$config || !isset($config['base_url']) || !isset($config['datasets'])) {
+            $this->error('Boston datasets configuration is missing or invalid. Please check config/boston_datasets.php');
+            return 1;
+        }
+        
         $baseUrl = $config['base_url'];
         $datasets = $config['datasets'];
 
+        if (empty($datasets)) {
+            $this->info('No Boston datasets configured in config/boston_datasets.php');
+            return 0;
+        }
+
         foreach ($datasets as $dataset) {
+            if (!isset($dataset['resource_id']) || !isset($dataset['format']) || !isset($dataset['name'])) {
+                $this->warn("Skipping invalid dataset entry: " . json_encode($dataset));
+                continue;
+            }
             $this->downloadDataset($baseUrl, $dataset['resource_id'], $dataset['format'], $dataset['name']);
         }
 
-        $this->info('Datasets download attempted.');
+        $this->info('Boston datasets download attempted.');
+        return 0;
     }
 
     protected function downloadDataset($baseUrl, $resourceId, $format, $name)
     {
         $url = "{$baseUrl}/{$resourceId}?format={$format}";
-        $filename = $this->generateFilename($name, $format);
+        // Original filename generation, without city subfolder
+        $filename = $this->generateFilename($name, $format); 
         $destination = storage_path("app/{$filename}");
 
-        $this->info("Attempting to download dataset: {$name} from {$url}...");
+        $this->info("Attempting to download Boston dataset: {$name} from {$url} to {$destination}...");
+
+        // Ensure the base 'datasets' directory exists
+        $baseDatasetDir = storage_path("app/datasets");
+        if (!is_dir($baseDatasetDir)) {
+            if (!mkdir($baseDatasetDir, 0775, true) && !is_dir($baseDatasetDir)) {
+                $this->error("Failed to create base directory: " . $baseDatasetDir);
+                return;
+            }
+        }
+        // Ensure the specific destination directory exists (in case $filename includes subdirectories, though original doesn't)
+        $directory = dirname($destination);
+        if (!is_dir($directory)) {
+            if (!mkdir($directory, 0775, true) && !is_dir($directory)) {
+                $this->error("Failed to create directory: " . $directory);
+                return;
+            }
+        }
+
 
-        // Download the dataset file
         if ($this->downloadFile($url, $destination)) {
-            $this->info("Downloaded {$filename}");
+            $this->info("Downloaded Boston dataset: {$filename}");
         } else {
-            $this->error("Failed to download dataset: {$resourceId}");
+            $this->error("Failed to download Boston dataset: {$name} (Resource ID: {$resourceId}) from {$url}");
         }
     }
 
-    /**
-     * Download the file from the URL.
-     * 
-     * @param string $url
-     * @param string $destination
-     * @return bool
-     */
     private function downloadFile(string $url, string $destination): bool
     {
         try {
@@ -54,49 +80,49 @@ private function downloadFile(string $url, string $destination): bool
             curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
             curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
             curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
-            curl_setopt($ch, CURLOPT_TIMEOUT, 30); // Set a timeout for the request
+            curl_setopt($ch, CURLOPT_TIMEOUT, 600); 
     
             $fileContents = curl_exec($ch);
     
-            // Check for curl errors
             if (curl_errno($ch)) {
-                $this->error("cURL error: " . curl_error($ch));
+                $this->error("cURL error for {$url}: " . curl_error($ch));
                 curl_close($ch);
                 return false;
             }
     
-            // Get HTTP status code
             $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
+            curl_close($ch); 
     
-            // Ensure we got a 200 OK response
             if ($httpCode !== 200) {
-                $this->error("HTTP request failed with status code: " . $httpCode);
-                curl_close($ch);
+                $this->error("HTTP request for {$url} failed with status code: {$httpCode}");
                 return false;
             }
     
-            // Check if content is valid
             if (empty($fileContents)) {
-                $this->error("Downloaded file is empty.");
-                curl_close($ch);
+                $this->error("Downloaded file from {$url} is empty.");
                 return false;
             }
     
-            // Save file contents to destination
-            file_put_contents($destination, $fileContents);
-            curl_close($ch);
+            if (file_put_contents($destination, $fileContents) === false) {
+                $this->error("Failed to write file to {$destination}. Check permissions and path.");
+                return false;
+            }
+            
             return true;
         } catch (\Exception $e) {
-            $this->error("Error downloading the file: " . $e->getMessage());
+            $this->error("Error downloading file from {$url}: " . $e->getMessage());
+            if (isset($ch) && is_resource($ch)) {
+                 curl_close($ch);
+            }
             return false;
         }
     }
     
-    
-
     protected function generateFilename($name, $format)
     {
         $timestamp = now()->format('Ymd_His');
-        return "datasets/{$name}_{$timestamp}.{$format}";
+        // Original path: datasets/name_timestamp.format
+        $safeName = strtolower(preg_replace('/[^a-zA-Z0-9_-]/', '', $name));
+        return "datasets/{$safeName}_{$timestamp}.{$format}";
     }
 }
diff --git a/app/Console/Commands/DownloadBostonDatasetViaScraper.php b/app/Console/Commands/DownloadBostonDatasetViaScraper.php
new file mode 100644
index 0000000..41be318
--- /dev/null
+++ b/app/Console/Commands/DownloadBostonDatasetViaScraper.php
@@ -0,0 +1,133 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\Http;
+use Illuminate\Support\Facades\File; // For directory operations
+
+class DownloadBostonDatasetViaScraper extends Command
+{
+    protected $signature = 'app:download-boston-dataset-via-scraper';
+    protected $description = 'Downloads datasets from Boston Open Data using an intermediary scraper service.';
+
+    public function handle()
+    {
+        $config = config('boston_datasets');
+        if (!$config || !isset($config['base_url']) || !isset($config['datasets'])) {
+            $this->error('Boston datasets configuration is missing or invalid. Please check config/boston_datasets.php');
+            return 1;
+        }
+        
+        $baseUrl = $config['base_url'];
+        $datasets = $config['datasets'];
+
+        if (empty($datasets)) {
+            $this->info('No Boston datasets configured in config/boston_datasets.php');
+            return 0;
+        }
+
+        foreach ($datasets as $dataset) {
+            if (!isset($dataset['resource_id']) || !isset($dataset['format']) || !isset($dataset['name'])) {
+                $this->warn("Skipping invalid dataset entry: " . json_encode($dataset));
+                continue;
+            }
+            $this->downloadDataset($baseUrl, $dataset['resource_id'], $dataset['format'], $dataset['name']);
+        }
+
+        $this->info('Boston datasets download via scraper attempted.');
+        return 0;
+    }
+
+    protected function downloadDataset($baseUrl, $resourceId, $format, $name)
+    {
+        $datasetUrl = "{$baseUrl}/{$resourceId}?format={$format}";
+        $filename = $this->generateFilename($name, $format); 
+        $destination = storage_path("app/{$filename}");
+
+        $this->info("Attempting to download Boston dataset via scraper: {$name} from {$datasetUrl} to {$destination}...");
+
+        $baseDatasetDir = storage_path("app/datasets");
+        if (!File::isDirectory($baseDatasetDir)) {
+            if (!File::makeDirectory($baseDatasetDir, 0775, true, true) && !File::isDirectory($baseDatasetDir)) {
+                $this->error("Failed to create base directory: " . $baseDatasetDir);
+                return;
+            }
+        }
+        
+        $directory = dirname($destination);
+        if (!File::isDirectory($directory)) {
+            if (!File::makeDirectory($directory, 0775, true, true) && !File::isDirectory($directory)) {
+                $this->error("Failed to create directory: " . $directory);
+                return;
+            }
+        }
+
+        if ($this->downloadFileUsingScraper($datasetUrl, $destination)) {
+            $this->info("Downloaded Boston dataset via scraper: {$filename}");
+        } else {
+            $this->error("Failed to download Boston dataset via scraper: {$name} (Resource ID: {$resourceId}) from {$datasetUrl}");
+        }
+    }
+
+    private function downloadFileUsingScraper(string $datasetUrl, string $destination): bool
+    {
+        $scraperConfig = config('services.scraper_service');
+        if (!$scraperConfig || empty($scraperConfig['base_url'])) {
+            $this->error('Scraper service configuration is missing or invalid (base_url).');
+            return false;
+        }
+
+        $scraperEndpoint = rtrim($scraperConfig['base_url'], '/') . '/scrape_url';
+        
+        $headers = [
+            'X-User-Id' => $scraperConfig['user_id'],
+            'X-User-Name' => $scraperConfig['user_name'],
+            'X-User-Role' => $scraperConfig['user_role'],
+        ];
+        
+        $payload = [
+            'url' => $datasetUrl,
+            'wait' => (int)$scraperConfig['wait_seconds'],
+            'url_type' => 'csv'
+        ];
+
+        try {
+            $response = Http::withHeaders($headers)
+                            ->timeout(600) // Increased timeout for potentially long scraping/download
+                            ->post($scraperEndpoint, $payload);
+
+            if (!$response->successful()) {
+                $this->error("Scraper service request for {$datasetUrl} failed. Status: {$response->status()}. Body: " . $response->body());
+                return false;
+            }
+
+            $fileContents = $response->body();
+
+            if (empty($fileContents)) {
+                $this->error("Downloaded file from scraper for {$datasetUrl} is empty.");
+                return false;
+            }
+
+            if (File::put($destination, $fileContents) === false) {
+                $this->error("Failed to write file to {$destination}. Check permissions and path.");
+                return false;
+            }
+            
+            return true;
+        } catch (\Illuminate\Http\Client\RequestException $e) {
+            $this->error("HTTP Request Exception while contacting scraper for {$datasetUrl}: " . $e->getMessage());
+            return false;
+        } catch (\Exception $e) {
+            $this->error("Error downloading file via scraper from {$datasetUrl}: " . $e->getMessage());
+            return false;
+        }
+    }
+    
+    protected function generateFilename($name, $format)
+    {
+        $timestamp = now()->format('Ymd_His');
+        $safeName = strtolower(preg_replace('/[^a-zA-Z0-9_-]/', '', $name));
+        return "datasets/{$safeName}_{$timestamp}.{$format}";
+    }
+}
diff --git a/app/Console/Commands/DownloadCambridgeLogs.php b/app/Console/Commands/DownloadCambridgeLogs.php
new file mode 100644
index 0000000..761c253
--- /dev/null
+++ b/app/Console/Commands/DownloadCambridgeLogs.php
@@ -0,0 +1,221 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Symfony\Component\DomCrawler\Crawler;
+use Carbon\Carbon;
+use DatePeriod;
+use DateInterval;
+// Illuminate\Support\Facades\Storage; // Not strictly needed for this command's file operations
+
+class DownloadCambridgeLogs extends Command
+{
+    protected $signature = 'app:download-cambridge-logs';
+    protected $description = 'Scrapes Cambridge daily police logs for the last two months and outputs CSV files for seeding.';
+
+    public function handle()
+    {
+        $this->line("<fg=cyan>Starting to download Cambridge police logs for the last two months.</>");
+
+        $endDate = Carbon::today();
+        $startDate = Carbon::today()->subMonths(2)->startOfDay();
+        
+        // Ensure the period includes the end date
+        $period = new DatePeriod(
+            $startDate,
+            new DateInterval('P1D'),
+            $endDate->copy()->addDay() // Add a day to include the endDate in the period
+        );
+
+        $overallStatus = 0;
+        $daysProcessed = 0;
+        $daysFailed = 0;
+
+        foreach ($period as $dateObject) {
+            $dateString = $dateObject->format('Y-m-d');
+            $this->line("<fg=magenta>--- Processing date: {$dateString} ---</>");
+            
+            $result = $this->processDate($dateString);
+            
+            if ($result === 0) {
+                $this->line("<fg=green>Successfully processed logs for {$dateString}.</>");
+                $daysProcessed++;
+            } elseif ($result === 1) { // Specific error code for processing failure
+                $this->error("Failed to process logs for {$dateString}.");
+                $daysFailed++;
+                $overallStatus = 1; // Mark that at least one day failed
+            } elseif ($result === 2) { // Specific code for no logs found/page not exist
+                $this->warn("No logs found or page did not exist for {$dateString}. Skipping.");
+                // Not necessarily an error, so overallStatus might not be set to 1
+            }
+            $this->line("<fg=magenta>--- Finished processing for date: {$dateString} ---</>");
+            $this->line(""); // Add a blank line for readability between dates
+        }
+
+        $this->info("Log download process completed.");
+        $this->info("Days processed successfully: {$daysProcessed}");
+        $this->info("Days failed: {$daysFailed}");
+        $this->info("Days with no logs/page not found: " . (iterator_count($period) - $daysProcessed - $daysFailed));
+
+        return $overallStatus;
+    }
+
+    private function processDate(string $date): int
+    {
+        $this->line("<fg=cyan>Processing date: {$date}</>");
+
+        [$Y, $m, $d] = explode('-', $date);
+        $mmddyyyy = sprintf('%02d%02d%s', $m, $d, $Y);
+        $url = "https://www.cambridgema.gov/Departments/cambridgepolice/News/{$Y}/{$m}/{$mmddyyyy}";
+
+        $this->info("Fetching logs from URL: {$url}");
+        $html = @file_get_contents($url);
+        if (!$html) {
+            $this->warn("Failed to fetch HTML content from {$url}. The page might not exist or there was a network issue. This day will be skipped.");
+            return 2; // Special return code for page not found/no content
+        }
+        $this->line("<fg=green>Successfully fetched HTML content.</>");
+
+        $crawler = new Crawler($html);
+        $rows = [];
+        $this->line("Starting to process log entries for {$date}...");
+
+        $crawler->filter('ul.logEntries > li')->each(function(Crawler $li, $i) use (&$rows, $date) {
+            $this->line("<fg=yellow>--- Processing Log Entry #" . ($i + 1) . " for {$date} ---</>");
+
+            $detailsNode = $li->filter('div.details');
+            if (!$detailsNode->count()) {
+                $this->warn("Log Entry #" . ($i + 1) . " for {$date}: Skipping entry, 'div.details' not found.");
+                return;
+            }
+            // Get HTML content of the div.details
+            $detailsHtml = $detailsNode->html();
+            // Replace <br> tags (and variants like <br />) with newlines
+            $detailsHtmlProcessed = preg_replace('/<br\s*\/?>/i', "\n", $detailsHtml);
+            // Strip other HTML tags (like <span>) but keep their content
+            $detailsTextContent = strip_tags($detailsHtmlProcessed);
+            
+            // $this->line("Processed 'details' text (after br to newline & strip_tags):\n{$detailsTextContent}"); // Verbose, can be commented out
+
+            $parts = array_values(array_filter(
+                array_map('trim', explode("\n", $detailsTextContent)),
+                fn($v) => $v !== ''
+            ));
+
+            if (count($parts) < 3) {
+                $this->warn("Log Entry #" . ($i + 1) . " for {$date}: Malformed 'details' section. Expected at least 3 parts, got " . count($parts) . ". Parts: " . implode(' | ', $parts) . ". Skipping entry.");
+                return;
+            }
+            [$when, $incLine, $crimeDesc] = $parts;
+            // $this->line("Parsed 'when': {$when}");
+            // $this->line("Parsed 'incLine': {$incLine}");
+            // $this->line("Parsed 'crimeDesc': {$crimeDesc}");
+
+            $fileNumParts = preg_split('/\s+/', $incLine, 2);
+            if (count($fileNumParts) < 2) {
+                $this->warn("Log Entry #" . ($i + 1) . " for {$date}: Could not parse file number from '{$incLine}'. Skipping entry.");
+                return;
+            }
+            $fileNum = $fileNumParts[1];
+            // $this->line("Extracted 'fileNum': {$fileNum}");
+
+            $narrNode = $li->filter('div.narrative');
+            if (!$narrNode->count()) {
+                $this->warn("Log Entry #" . ($i + 1) . " for {$date}: Skipping entry, 'div.narrative' not found.");
+                return;
+            }
+            
+            $strongTagNode = $narrNode->filter('strong');
+            if (!$strongTagNode->count()) {
+                $this->warn("Log Entry #" . ($i + 1) . " for {$date}: 'strong' tag not found in narrative. Using full narrative text for location if possible.");
+                $street = $narrNode->text(); // Fallback, though less ideal
+            } else {
+                $street = $strongTagNode->text();
+            }
+            $fullText = $narrNode->text(); // Includes the <strong> text and the rest
+            
+            // $this->line("Narrative 'strong' tag (street/intersection): {$street}");
+            // $this->line("Full narrative text:\n{$fullText}");
+
+            $loc = '';
+            if (strpos($street, '&') !== false) {
+                $loc = trim($street);
+                // $this->line("Location type: Intersection (from strong tag) -> '{$loc}'");
+            } elseif (preg_match('/the\s+(\d+)\s+block of\s+/i', $fullText, $matches)) {
+                $blockNumber = $matches[1];
+                $loc = $blockNumber . ' ' . trim($street);
+                // $this->line("Location type: Parsed 'block of' (block: {$blockNumber}, street: {trim($street)}) -> '{$loc}'");
+            } else {
+                // Fallback: Assume it's a street name, prepend "0" as default block number
+                $loc = '0 ' . trim($street);
+                // $this->line("Location type: Fallback (default block 0 for street) -> '{$loc}'");
+            }
+
+            $reportDate = '';
+            $whenParts = explode(' ', $when, 2);
+            if (count($whenParts) > 0) {
+                $reportDate = $whenParts[0];
+            } else {
+                $this->warn("Log Entry #" . ($i + 1) . " for {$date}: Could not parse date from 'when' field: {$when}");
+            }
+            // $this->line("Extracted 'reportDate': {$reportDate}");
+
+
+            $rowData = [
+                'date_of_report'   => $reportDate,
+                'crime_date_time'  => $when,
+                'file_number'      => $fileNum,
+                'crime'            => $crimeDesc,
+                'location'         => $loc,
+                'crime_details'    => $fullText,
+            ];
+            $rows[] = $rowData;
+            // $this->line("Row added to batch: " . json_encode($rowData));
+            $this->line("<fg=yellow>--- Finished Log Entry #" . ($i + 1) . " for {$date} ---</>");
+        });
+
+        if (empty($rows)) {
+            $this->warn("No log entries were successfully processed for {$date}. CSV file will not be created.");
+            return 0; // Not an error, but no data to write.
+        }
+
+        $dir = storage_path("app/datasets/cambridge/logs");
+        $this->line("Ensuring output directory exists: {$dir}");
+        if (!is_dir($dir)) {
+            if (mkdir($dir, 0755, true)) {
+                $this->line("<fg=green>Created directory: {$dir}</>");
+            } else {
+                $this->error("Failed to create directory: {$dir}");
+                return 1; // Error creating directory
+            }
+        } else {
+            $this->line("Output directory already exists.");
+        }
+
+        $outFileName = "cambridge_{$Y}{$m}{$d}.csv";
+        $out = "{$dir}/{$outFileName}";
+        $this->line("Preparing to write CSV to: {$out}");
+
+        $fh = fopen($out, 'w');
+        if ($fh === false) {
+            $this->error("Failed to open file for writing: {$out}");
+            return 1; // Error opening file
+        }
+
+        $headers = ['date_of_report','crime_date_time','file_number','crime','location','crime_details'];
+        $this->line("Writing CSV headers for {$date}: " . implode(',', $headers));
+        fputcsv($fh, $headers);
+
+        $this->line("Writing " . count($rows) . " data rows to CSV for {$date}...");
+        foreach ($rows as $r) {
+            fputcsv($fh, $r);
+        }
+        fclose($fh);
+
+        $numEntries = count($rows);
+        $message = "Wrote " . $out . " (" . $numEntries . " entries)";
+        $this->info("<fg=green>{$message}</>");
+        return 0; // Success for this date
+    }
+}
diff --git a/app/Console/Commands/DownloadCityDataset.php b/app/Console/Commands/DownloadCityDataset.php
new file mode 100644
index 0000000..d5a57e0
--- /dev/null
+++ b/app/Console/Commands/DownloadCityDataset.php
@@ -0,0 +1,256 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\Storage; // Not strictly needed if using file_put_contents with full paths
+
+class DownloadCityDataset extends Command
+{
+    protected $signature = 'app:download-city-dataset';
+    protected $description = 'Downloads datasets from configured cities (e.g., Boston, Cambridge)';
+
+    public function handle()
+    {
+        $config = config('datasets');
+        $datasets = $config['datasets'];
+
+        if (empty($datasets)) {
+            $this->info('No datasets configured. Please check config/datasets.php');
+            return 0;
+        }
+
+        foreach ($datasets as $dataset) {
+            $this->downloadDataset(
+                $dataset['base_url'],
+                $dataset['resource_id'],
+                $dataset['format'],
+                $dataset['name'],
+                $dataset['city'],
+                $dataset['url_pattern_type'],
+                $dataset['pagination_type'] ?? null,
+                $dataset['page_size'] ?? 1000, // Default page_size if not specified
+                $dataset['order_by_field'] ?? ':id' // Default order_by_field
+            );
+        }
+
+        $this->info('All configured dataset downloads attempted.');
+        return 0;
+    }
+
+    protected function downloadDataset($baseUrl, $resourceId, $format, $name, $city, $urlPatternType, $paginationType = null, $pageSize = 1000, $orderByField = ':id')
+    {
+        $filename = $this->generateFilename($name, $format, $city);
+        $destination = storage_path("app/{$filename}");
+
+        // Ensure the destination directory exists
+        $directory = dirname($destination);
+        if (!is_dir($directory)) {
+            if (!mkdir($directory, 0775, true) && !is_dir($directory)) {
+                $this->error("Failed to create directory: " . $directory);
+                return;
+            }
+        }
+
+        if ($paginationType === 'socrata_offset' && $urlPatternType === 'extension') {
+            $this->info("Attempting paginated Socrata download for: {$name} ({$city}) to {$destination}...");
+            if ($this->downloadSocrataDatasetWithPagination($baseUrl, $resourceId, $format, $destination, $pageSize, $orderByField, $name)) {
+                $this->info("Successfully downloaded paginated dataset: {$filename}");
+            } else {
+                $this->error("Failed to download paginated Socrata dataset: {$name} ({$city})");
+            }
+        } else {
+            // Standard non-paginated download
+            $url = '';
+            if ($urlPatternType === 'query_param') {
+                $url = "{$baseUrl}/{$resourceId}?format={$format}";
+            } elseif ($urlPatternType === 'extension') {
+                $url = "{$baseUrl}/{$resourceId}.{$format}";
+            } else {
+                $this->error("Unknown URL pattern type '{$urlPatternType}' for dataset: {$name}");
+                return;
+            }
+            $this->info("Attempting to download dataset: {$name} ({$city}) from {$url} to {$destination}...");
+            if ($this->downloadSingleFile($url, $destination)) {
+                $this->info("Successfully downloaded: {$filename}");
+            } else {
+                $this->error("Failed to download dataset: {$name} ({$city}) from {$url}");
+            }
+        }
+    }
+
+    protected function downloadSocrataDatasetWithPagination($baseUrl, $resourceId, $format, $destination, $pageSize, $orderByField, $datasetName)
+    {
+        $offset = 0;
+        $firstPage = true;
+
+        $fileHandle = @fopen($destination, 'w');
+        if ($fileHandle === false) {
+            $this->error("Could not open file for writing: {$destination}");
+            return false;
+        }
+
+        while (true) {
+            $url = "{$baseUrl}/{$resourceId}.{$format}?\$limit={$pageSize}&\$offset={$offset}&\$order={$orderByField}";
+            $this->info("Fetching page for {$datasetName}: offset {$offset}, limit {$pageSize} from {$url}");
+
+            $pageContent = $this->fetchSocrataPageContent($url);
+
+            if ($pageContent === false) { // cURL error
+                if ($firstPage) {
+                    $this->error("Failed to download initial page for {$datasetName} from {$url}.");
+                    fclose($fileHandle);
+                    if (file_exists($destination)) unlink($destination);
+                    return false;
+                }
+                $this->warn("Error fetching page for {$datasetName} at offset {$offset}. Assuming end of data or transient error.");
+                break; // Stop on error after the first page
+            }
+            
+            $trimmedContent = trim($pageContent);
+            if (empty($trimmedContent)) { // Truly empty response
+                 $this->info("Received empty content for {$datasetName} at offset {$offset}. Assuming end of data.");
+                 break;
+            }
+
+            $lines = explode("\n", $trimmedContent);
+
+            if ($firstPage) {
+                fwrite($fileHandle, $pageContent); // Write the whole content including header
+                $firstPage = false;
+                // Number of data rows is total lines minus 1 (for header)
+                // If only header, count is 0. If header + 1 data row, count is 1.
+                $numDataRows = count($lines) -1; 
+                if ($numDataRows < 0) $numDataRows = 0; // handles empty file case
+            } else {
+                // For subsequent pages, if only header is returned, or it's empty after trim
+                if (count($lines) <= 1 && !empty($trimmedContent)) { 
+                    $this->info("No new data rows for {$datasetName} at offset {$offset} (only header or empty). Assuming end of data.");
+                    break;
+                } else if (empty($trimmedContent)) { // Should have been caught by earlier empty check, but as safeguard
+                    $this->info("Received empty content for {$datasetName} at offset {$offset} on subsequent page. Assuming end of data.");
+                    break;
+                }
+                
+                array_shift($lines); // Remove header
+                if (!empty($lines)) {
+                    fwrite($fileHandle, "\n" . implode("\n", $lines));
+                }
+                $numDataRows = count($lines);
+            }
+            
+            // If the number of data rows returned is less than page size, it's the last page
+            if ($numDataRows < $pageSize) {
+                $this->info("Last page fetched for {$datasetName} (received {$numDataRows} data rows, page size {$pageSize}).");
+                break;
+            }
+
+            $offset += $pageSize;
+            // Small delay to be polite to the API
+            usleep(250000); // 0.25 seconds
+        }
+
+        fclose($fileHandle);
+        return true;
+    }
+
+    protected function fetchSocrataPageContent(string $url): string|false
+    {
+        try {
+            $ch = curl_init($url);
+            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
+            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
+            curl_setopt($ch, CURLOPT_TIMEOUT, 120); // 2 minutes timeout for a single page
+
+            $fileContents = curl_exec($ch);
+
+            if (curl_errno($ch)) {
+                $this->error("cURL error for {$url}: " . curl_error($ch));
+                curl_close($ch);
+                return false;
+            }
+
+            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
+            curl_close($ch);
+
+            if ($httpCode !== 200) {
+                $this->error("HTTP request for {$url} failed with status code: {$httpCode}");
+                // Potentially return the content anyway if it's an error page, or handle specific codes
+                return false; 
+            }
+            
+            return $fileContents;
+
+        } catch (\Exception $e) {
+            $this->error("Exception during fetch from {$url}: " . $e->getMessage());
+            if (isset($ch) && is_resource($ch)) {
+                 curl_close($ch);
+            }
+            return false;
+        }
+    }
+    
+    /**
+     * Renamed from downloadFile to downloadSingleFile to differentiate from paginated downloads.
+     * This method handles non-paginated, single URL downloads.
+     */
+    private function downloadSingleFile(string $url, string $destination): bool
+    {
+        try {
+            // Directory creation is now handled in downloadDataset method
+            // $directory = dirname($destination);
+            // ... (directory creation logic removed as it's handled before calling this)
+
+            $ch = curl_init($url);
+            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
+            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
+            curl_setopt($ch, CURLOPT_TIMEOUT, 600); // 10 minutes timeout
+
+            $fileContents = curl_exec($ch);
+
+            if (curl_errno($ch)) {
+                $this->error("cURL error for {$url}: " . curl_error($ch));
+                curl_close($ch);
+                return false;
+            }
+
+            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
+            curl_close($ch); // Close curl handle after getting info
+
+            if ($httpCode !== 200) {
+                $this->error("HTTP request for {$url} failed with status code: {$httpCode}");
+                return false;
+            }
+
+            if (empty($fileContents)) {
+                $this->error("Downloaded file from {$url} is empty.");
+                return false;
+            }
+
+            if (file_put_contents($destination, $fileContents) === false) {
+                $this->error("Failed to write file to {$destination}. Check permissions and path.");
+                return false;
+            }
+            
+            return true;
+        } catch (\Exception $e) {
+            $this->error("Error downloading file from {$url}: " . $e->getMessage());
+            // Ensure curl handle is closed if an exception occurs before explicit close
+            if (isset($ch) && is_resource($ch)) {
+                 curl_close($ch);
+            }
+            return false;
+        }
+    }
+
+    protected function generateFilename($name, $format, $city)
+    {
+        $timestamp = now()->format('Ymd_His');
+        // Sanitize city and name for directory/filename usage if necessary, though current examples are fine.
+        $safeCity = strtolower(preg_replace('/[^a-zA-Z0-9_-]/', '', $city));
+        $safeName = strtolower(preg_replace('/[^a-zA-Z0-9_-]/', '', $name));
+        return "datasets/{$safeCity}/{$safeName}_{$timestamp}.{$format}";
+    }
+}
diff --git a/app/Console/Commands/DownloadEverettPDFMarkdown.php b/app/Console/Commands/DownloadEverettPDFMarkdown.php
new file mode 100644
index 0000000..896757b
--- /dev/null
+++ b/app/Console/Commands/DownloadEverettPDFMarkdown.php
@@ -0,0 +1,179 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\Http;
+use Illuminate\Support\Facades\Log; // Keep Log if you plan to use it, otherwise it can be removed if not used.
+use App\Services\PdfLinkExtractorService;
+use Illuminate\Support\Facades\File; // For directory and file operations
+
+class DownloadEverettPDFMarkdown extends Command
+{
+    protected $signature = 'app:download-everett-pdf-markdown';
+    protected $description = 'Downloads PDF links from Everett pages and gets Markdown via scraper service';
+
+    protected $pdfLinkExtractor;
+
+    public function __construct(PdfLinkExtractorService $pdfLinkExtractor)
+    {
+        parent::__construct();
+        $this->pdfLinkExtractor = $pdfLinkExtractor;
+    }
+
+    public function handle()
+    {
+        $config = config('everett_datasets');
+        if (!$config || !isset($config['arrest_log_page_url']) || !isset($config['daily_log_page_url'])) {
+            $this->error("Everett page URLs not configured properly in config/everett_datasets.php.");
+            return 1;
+        }
+        
+        $pages = [
+            $config['arrest_log_page_url'],
+            $config['daily_log_page_url'],
+        ];
+        $pages = array_filter($pages);
+
+        if (empty($pages)) {
+            $this->error("Everett page URLs are empty after filtering. Check config/everett_datasets.php.");
+            return 1;
+        }
+
+        $scraperConfig = config('services.scraper_service');
+        if (!$scraperConfig || empty($scraperConfig['base_url'])) {
+            $this->error("Scraper service configuration missing or base_url is not set in config/services.php.");
+            return 1;
+        }
+        $scraperEndpoint = rtrim($scraperConfig['base_url'], '/') . '/scrape_url';
+        
+        // Use a more specific path within storage, e.g., storage/app/markdown_output
+        $mdOutputDirRelative = $config['markdown_output_directory'] ?? 'markdown_output';
+        $mdOutputDir = storage_path('app/datasets/everett/' . trim($mdOutputDirRelative, '/'));
+
+        if (!File::isDirectory($mdOutputDir)) {
+            File::makeDirectory($mdOutputDir, 0775, true, true);
+        }
+
+        // Scan for existing base filenames
+        $existingBaseFilenames = [];
+        if (File::isDirectory($mdOutputDir)) {
+            $filesInDir = File::files($mdOutputDir);
+            foreach ($filesInDir as $file) {
+                $filename = $file->getFilename();
+                // Extracts base_filename from base_filename_YYYYMMDD_HHMMSS.md
+                if (preg_match('/^(.*?)_\d{8}_\d{6}\.md$/', $filename, $matches)) {
+                    $existingBaseFilenames[$matches[1]] = true; // Use as a set for quick lookups
+                }
+            }
+        }
+        if (count($existingBaseFilenames) > 0) {
+            $this->info("Found " . count($existingBaseFilenames) . " existing base filenames in {$mdOutputDir}. These will be skipped if encountered again.");
+        }
+        
+        $headers = [
+            'X-User-Id'   => $scraperConfig['user_id'] ?? '1',
+            'X-User-Name' => $scraperConfig['user_name'] ?? 'Guest',
+            'X-User-Role' => $scraperConfig['user_role'] ?? 'guest',
+            // The scraper API seems to return plain text for markdown or JSON for HTML.
+            // 'Accept' => 'application/json' might be okay if scraper wraps HTML in JSON.
+            // If scraper returns raw HTML, 'text/html, application/json' might be better.
+            // For now, let's assume the scraper handles content negotiation or the existing JSON parsing works.
+        ];
+
+        foreach ($pages as $pageUrl) {
+            $this->info("Processing page: {$pageUrl} to find PDF links.");
+            // Payload to get HTML content of the page itself
+            $pageScrapePayload = [
+                'url'  => $pageUrl,
+                'wait' => (int)($scraperConfig['wait_seconds'] ?? 5),
+                // 'output_markitdown' => false, // Explicitly false or remove for HTML
+            ];
+            
+            try {
+                $response = Http::withHeaders($headers)->timeout(120)->post($scraperEndpoint, $pageScrapePayload);
+
+                if (!$response->successful()) {
+                    $this->error("Failed to scrape page: {$pageUrl}. Status: {$response->status()}. Body: " . $response->body());
+                    Log::error("Scraper service error for page URL {$pageUrl}: " . $response->body());
+                    continue;
+                }
+
+                $htmlContent = $response->body();
+                // Attempt to decode if JSON, otherwise assume raw HTML
+                $decodedJson = json_decode($htmlContent, true);
+                if (json_last_error() === JSON_ERROR_NONE) {
+                    if (isset($decodedJson['html'])) {
+                        $htmlContent = $decodedJson['html'];
+                    } elseif (isset($decodedJson['text']) && !isset($decodedJson['html'])) {
+                        // If 'text' exists and 'html' doesn't, it might be pre-converted markdown or plain text.
+                        // For link extraction, we need HTML. If scraper returns markdown here, this is an issue.
+                        // Assuming for now that if 'output_markitdown' is false/absent, we get HTML or JSON-wrapped HTML.
+                        $htmlContent = $decodedJson['text']; 
+                    }
+                }
+                // If it wasn't JSON, $htmlContent remains as is (hopefully HTML)
+
+                if (empty($htmlContent)) {
+                    $this->warn("Received empty or non-HTML content for page: {$pageUrl}. Skipping PDF link extraction.");
+                    continue;
+                }
+
+                $pdfLinks = $this->pdfLinkExtractor->extractFromHtml($htmlContent, $pageUrl);
+                $this->info("Found " . count($pdfLinks) . " PDF links on {$pageUrl}");
+
+                foreach ($pdfLinks as $pdfLink) {
+                    $this->info("Processing PDF link for Markdown: {$pdfLink}");
+
+                    // Generate base filename for the current PDF to check if it exists
+                    $pathinfoCurrentPdf = pathinfo($pdfLink);
+                    $currentPdfBaseFilename = preg_replace('/[^a-zA-Z0-9_-]/', '_', $pathinfoCurrentPdf['filename'] ?? 'document');
+
+                    if (isset($existingBaseFilenames[$currentPdfBaseFilename])) {
+                        $this->info("Skipping PDF link as a version (based on filename pattern '{$currentPdfBaseFilename}_[timestamp].md') already exists: {$pdfLink}");
+                        continue; // Skip to the next PDF link
+                    }
+
+                    // Payload to get Markdown from the PDF link
+                    $pdfToMarkdownPayload = [
+                        'url'               => $pdfLink,
+                        'wait'              => (int)($scraperConfig['wait_seconds'] ?? 5), // Wait might not be relevant for direct PDF download
+                        'url_type'          => 'pdf',
+                        'output_markitdown' => true,
+                    ];
+                    
+                    $mdResponse = Http::withHeaders($headers)
+                                      ->timeout(600) // Increased timeout for PDF processing
+                                      ->post($scraperEndpoint, $pdfToMarkdownPayload);
+
+                    if (!$mdResponse->successful()) {
+                        $this->error("Failed to convert PDF to Markdown for: {$pdfLink}. Status: {$mdResponse->status()}. Body: " . $mdResponse->body());
+                        Log::error("Scraper service error for PDF URL {$pdfLink}: " . $mdResponse->body());
+                        continue;
+                    }
+
+                    $markdownText = $mdResponse->body(); // Expecting plain text Markdown
+                    
+                    // Sanitize filename (more robustly) - currentPdfBaseFilename is already sanitized
+                    // $pathinfo = pathinfo($pdfLink); // Already done above as $pathinfoCurrentPdf
+                    // $baseFilename = preg_replace('/[^a-zA-Z0-9_-]/', '_', $pathinfo['filename'] ?? 'document'); // Use $currentPdfBaseFilename
+                    $timestamp = now()->format('Ymd_His');
+                    $filename = "{$currentPdfBaseFilename}_{$timestamp}.md"; // Use $currentPdfBaseFilename
+                    $filepath = $mdOutputDir . DIRECTORY_SEPARATOR . $filename;
+
+                    File::put($filepath, $markdownText);
+                    $this->info("Saved Markdown to {$filepath}");
+                }
+            } catch (\Illuminate\Http\Client\RequestException $e) {
+                $this->error("HTTP Request Exception while processing {$pageUrl}: " . $e->getMessage());
+                Log::error("Scraper service request exception for URL {$pageUrl}: " . $e->getMessage());
+            } catch (\Exception $e) {
+                $this->error("An unexpected error occurred while processing {$pageUrl}: " . $e->getMessage());
+                Log::error("Unexpected error for URL {$pageUrl}: " . $e->getMessage());
+            }
+        }
+
+        $this->info("Processing complete.");
+        return 0;
+    }
+}
diff --git a/app/Console/Commands/GenerateEverettCsvCommand.php b/app/Console/Commands/GenerateEverettCsvCommand.php
new file mode 100644
index 0000000..ddd5f08
--- /dev/null
+++ b/app/Console/Commands/GenerateEverettCsvCommand.php
@@ -0,0 +1,135 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\File;
+use League\Csv\Writer; // Using league/csv for robust CSV writing
+
+class GenerateEverettCsvCommand extends Command
+{
+    protected $signature = 'app:generate-everett-csv';
+    protected $description = 'Generates a combined CSV file from Everett police data and geocoded information.';
+
+    public function handle()
+    {
+        $this->info("Starting Everett CSV generation...");
+
+        $baseStoragePath = storage_path('app/datasets/everett');
+        
+        $inputPoliceDataFilename = 'everett_police_calls_and_arrest_data.json';
+        $inputPoliceDataPath = $baseStoragePath . '/' . $inputPoliceDataFilename;
+        
+        $inputGeocodeDataFilename = 'geocoded_addresses.json';
+        $inputGeocodeDataPath = $baseStoragePath . '/' . $inputGeocodeDataFilename;
+
+        $outputCsvFilename = 'everett_police_data_combined.csv';
+        $outputCsvPath = $baseStoragePath . '/' . $outputCsvFilename;
+
+        if (!File::exists($inputPoliceDataPath)) {
+            $this->error("Police data JSON file not found: {$inputPoliceDataPath}");
+            return 1;
+        }
+
+        $policeData = json_decode(File::get($inputPoliceDataPath), true);
+        if (json_last_error() !== JSON_ERROR_NONE || empty($policeData)) {
+            $this->error("Could not load or decode police data from {$inputPoliceDataPath}.");
+            return 1;
+        }
+
+        $geocodeData = [];
+        if (File::exists($inputGeocodeDataPath)) {
+            $geocodeData = json_decode(File::get($inputGeocodeDataPath), true);
+            if (json_last_error() !== JSON_ERROR_NONE) {
+                $this->warn("Could not decode geocode data from {$inputGeocodeDataPath}. Proceeding without geocodes for some records if this file is corrupt.");
+                $geocodeData = []; // Treat as empty if corrupt
+            }
+        } else {
+            $this->warn("Geocode data file not found: {$inputGeocodeDataPath}. Proceeding without geocodes.");
+        }
+
+        $flattenedRecords = [];
+        $allFieldnames = collect(); // Use Laravel Collection for easier unique/sorting
+
+        foreach ($policeData as $record) {
+            $flatRec = $this->flattenRecord($record, $geocodeData);
+            $flattenedRecords[] = $flatRec;
+            $allFieldnames = $allFieldnames->merge(array_keys($flatRec));
+        }
+        
+        $allFieldnames = $allFieldnames->unique()->sort()->values()->all();
+
+        $preferredFieldOrder = [
+            'case_number',
+            'incident_log_file_date', 'incident_entry_date', 'incident_time',
+            'incident_type', 'incident_address', 'incident_latitude', 'incident_longitude',
+            'incident_description',
+            'arrest_name', 'arrest_address', 'arrest_age', 'arrest_date', 'arrest_charges'
+        ];
+
+        // Create the final fieldnames list
+        $finalFieldnames = collect($preferredFieldOrder)
+            ->filter(fn($field) => in_array($field, $allFieldnames)) // Keep preferred fields that exist
+            ->merge(collect($allFieldnames)->diff($preferredFieldOrder)->sort()->values()) // Add remaining fields, sorted
+            ->unique()
+            ->values()
+            ->all();
+            
+        if (empty($flattenedRecords)) {
+            $this->info("No records to write to CSV.");
+            return 0;
+        }
+
+        try {
+            $csv = Writer::createFromPath($outputCsvPath, 'w+');
+            $csv->insertOne($finalFieldnames); // Write header
+            $csv->insertAll($flattenedRecords); // Write data
+
+            $this->info("Successfully created combined CSV: {$outputCsvPath}");
+        } catch (\Exception $e) {
+            $this->error("Error writing CSV file: " . $e->getMessage());
+            return 1;
+        }
+
+        return 0;
+    }
+
+    private function flattenRecord(array $record, array $geocodeData): array
+    {
+        $flatRec = [];
+
+        $flatRec['case_number'] = $record['case_number'] ?? '';
+
+        // Incident details
+        $incidentDetails = $record['incident_details'] ?? null;
+        $flatRec['incident_log_file_date'] = $incidentDetails['log_file_date'] ?? '';
+        $flatRec['incident_entry_date'] = $incidentDetails['entry_date'] ?? '';
+        $flatRec['incident_time'] = $incidentDetails['time'] ?? '';
+        $flatRec['incident_type'] = $incidentDetails['type'] ?? '';
+        $originalIncidentAddress = $incidentDetails['address'] ?? '';
+        $flatRec['incident_address'] = $originalIncidentAddress;
+        // $flatRec['incident_description'] = $incidentDetails['description'] ?? ''; // Moved from here
+
+        $geoInfo = ($originalIncidentAddress && isset($geocodeData[$originalIncidentAddress])) ? $geocodeData[$originalIncidentAddress] : null;
+        if (is_array($geoInfo)) {
+            $flatRec['incident_latitude'] = $geoInfo['lat'] ?? '';
+            $flatRec['incident_longitude'] = $geoInfo['lng'] ?? '';
+        } else {
+            $flatRec['incident_latitude'] = '';
+            $flatRec['incident_longitude'] = '';
+        }
+        
+        $flatRec['incident_description'] = $incidentDetails['description'] ?? ''; // Moved to here
+        
+        // Arrest details
+        $arrestDetails = $record['arrest_details'] ?? null;
+        $flatRec['arrest_name'] = $arrestDetails['name'] ?? '';
+        $flatRec['arrest_address'] = $arrestDetails['address'] ?? '';
+        $flatRec['arrest_age'] = $arrestDetails['age'] ?? '';
+        $flatRec['arrest_date'] = $arrestDetails['date'] ?? '';
+        $charges = $arrestDetails['charges'] ?? [];
+        $flatRec['arrest_charges'] = is_array($charges) ? implode(" | ", $charges) : '';
+        
+        return $flatRec;
+    }
+}
diff --git a/app/Console/Commands/GenerateModelMetadataCommand.php b/app/Console/Commands/GenerateModelMetadataCommand.php
new file mode 100644
index 0000000..3b4589d
--- /dev/null
+++ b/app/Console/Commands/GenerateModelMetadataCommand.php
@@ -0,0 +1,507 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\DB;
+use Illuminate\Support\Facades\Schema;
+use Illuminate\Support\Facades\File;
+use Illuminate\Support\Str;
+use ReflectionClass;
+use Symfony\Component\Finder\Finder;
+
+class GenerateModelMetadataCommand extends Command
+{
+    protected $signature = 'generate:model-metadata
+                            {--models= : Comma-separated list of model names (e.g., ThreeOneOneCase,PropertyViolation)}
+                            {--N=50 : Max distinct values to list for select options}
+                            {--output=config/model_metadata_suggestions.php : Output file path}';
+
+    protected $description = 'Generates metadata suggestions for Mappable models.';
+
+    private $defaultExcludedFilterFields = ['id', 'created_at', 'updated_at', 'deleted_at'];
+
+    public function handle(): int
+    {
+        $nThreshold = (int)$this->option('N');
+        if ($nThreshold <= 0) {
+            $this->warn("Invalid N value provided or default N is <=0. Resetting N to 50.");
+            $nThreshold = 50; // Default value
+        }
+        $this->info("[CONFIG] N Threshold for distinct values: {$nThreshold}");
+        $outputFilePath = base_path($this->option('output'));
+        $this->info("[CONFIG] Output file path: {$outputFilePath}");
+
+        $modelClasses = $this->getModelClasses();
+
+        if (empty($modelClasses)) {
+            $this->error('No models found to process. Ensure models exist, use the Mappable trait, and are in App\\Models, or specify them with --models.');
+            return 1;
+        }
+
+        $this->info("[INFO] Processing models: " . implode(', ', array_map(fn($class) => class_basename($class), $modelClasses)));
+
+        $allMetadata = [];
+
+        foreach ($modelClasses as $modelClass) {
+            $this->line("[MODEL] Processing model: {$modelClass}");
+            try {
+                $modelInstance = new $modelClass();
+                $tableName = $modelInstance->getTable();
+                $this->line("[MODEL] Table name: {$tableName}");
+                $modelCasts = $modelInstance->getCasts();
+                $this->line("[MODEL] Model casts: " . json_encode($modelCasts));
+                $dateField = $modelClass::getDateField();
+                $this->line("[MODEL] Date field: {$dateField}");
+                $primaryKey = $modelInstance->getKeyName();
+                $this->line("[MODEL] Primary key: {$primaryKey}");
+                
+                // Add current model's primary key to excluded fields for this model only
+                $currentModelExcludedFilterFields = $this->defaultExcludedFilterFields;
+                if (!in_array($primaryKey, $currentModelExcludedFilterFields)) {
+                    $currentModelExcludedFilterFields[] = $primaryKey;
+                }
+                $this->line("[MODEL] Excluded filter fields for this model: " . json_encode($currentModelExcludedFilterFields));
+
+
+                $columns = Schema::getColumnListing($tableName);
+                $this->line("[SCHEMA] Columns found: " . json_encode($columns));
+
+                $fieldsInfo = [];
+                foreach ($columns as $column) {
+                    $this->line("  [COLUMN] Processing column: {$tableName}.{$column}");
+                    $dbType = Schema::getColumnType($tableName, $column);
+                    $this->line("    [DB_INFO] DB Type: {$dbType}");
+                    $appType = $this->determineAppType($column, $dbType, $modelCasts);
+                    $this->line("    [APP_INFO] Determined App Type: {$appType}");
+                    
+                    $distinctValues = [];
+                    $distinctCount = 0;
+
+                    if (!in_array($appType, ['text', 'json']) && !Str::contains(strtolower($dbType), ['text', 'blob', 'json'])) {
+                        $this->line("    [DISTINCT_VALUES] Column eligible for distinct value check.");
+                        try {
+                            $rawCountQueryForLog = "SELECT COUNT(DISTINCT {$column}) as count FROM \"{$tableName}\"";
+                            $this->line("      [QUERY_LOG] Distinct count query (raw): {$rawCountQueryForLog}");
+                            
+                            // Using DB facade to get a query builder instance for logging actual SQL for the specific driver
+                            $countQueryBuilder = DB::table($tableName)->selectRaw("COUNT(DISTINCT {$column}) as distinct_count_val");
+                            $this->line("      [QUERY_LOG] Distinct count query (Builder SQL): " . $countQueryBuilder->toSql());
+                            $this->line("      [QUERY_LOG] Distinct count query (Builder Bindings): " . json_encode($countQueryBuilder->getBindings()));
+
+                            $countResult = $countQueryBuilder->first();
+                            $distinctCount = $countResult ? (int)$countResult->distinct_count_val : 0;
+                            $this->line("      [RESULT_LOG] Distinct count from DB: {$distinctCount}");
+
+                            if ($distinctCount > 0 && $distinctCount <= $nThreshold) {
+                                $this->line("      [DISTINCT_VALUES] Count {$distinctCount} is > 0 and <= N ({$nThreshold}). Fetching distinct values.");
+                                $fetchQueryBuilder = DB::table($tableName)->select($column)->distinct()->orderBy($column)->limit($nThreshold);
+                                $this->line("        [QUERY_LOG] Fetch distinct values SQL: " . $fetchQueryBuilder->toSql());
+                                $this->line("        [QUERY_LOG] Fetch distinct values Bindings: " . json_encode($fetchQueryBuilder->getBindings()));
+                                
+                                $rawPluckedValues = $fetchQueryBuilder->pluck($column);
+                                $this->line("        [RESULT_LOG] Raw plucked values count: " . $rawPluckedValues->count());
+                                $this->line("        [RESULT_LOG] Raw plucked values (sample): " . json_encode($rawPluckedValues->take(5)->all()));
+
+                                $distinctValues = $rawPluckedValues->filter(fn($val) => $val !== null && (string)$val !== '')
+                                                                  ->map(fn($val) => (string)$val)
+                                                                  ->unique() // Ensure uniqueness after string conversion and filtering
+                                                                  ->values() // Re-index array
+                                                                  ->toArray();
+                                
+                                $this->line("        [RESULT_LOG] Filtered & Mapped distinct values count: " . count($distinctValues));
+                                $this->line("        [RESULT_LOG] Filtered & Mapped distinct values (sample): " . json_encode(array_slice($distinctValues, 0, 5)));
+
+                                // The limit($nThreshold) in SQL should mean count($distinctValues) is already <= $nThreshold.
+                                // This slice is a safeguard or handles cases where string conversion might change effective distinctness for PHP.
+                                if (count($distinctValues) > $nThreshold) {
+                                    $this->warn("      [DISTINCT_VALUES] Count of distinct values after filtering/mapping (" . count($distinctValues) . ") is > N ({$nThreshold}). Slicing.");
+                                    $distinctValues = array_slice($distinctValues, 0, $nThreshold);
+                                    $this->line("        [RESULT_LOG] Sliced distinct values count: " . count($distinctValues));
+                                }
+                            } else {
+                                $this->line("      [DISTINCT_VALUES] Distinct count {$distinctCount} is 0 or > N ({$nThreshold}). Not fetching values for options list.");
+                            }
+                        } catch (\Exception $e) {
+                            $this->warn("    [ERROR_LOG] Could not fetch distinct values for {$tableName}.{$column}: " . $e->getMessage());
+                            $distinctCount = $nThreshold + 1; // Assume too many if error
+                            $this->line("      [DISTINCT_VALUES] Marked distinctCount as " . ($nThreshold + 1) . " due to error.");
+                        }
+                    } else {
+                        $this->line("    [DISTINCT_VALUES] Column type '{$appType}' (DB: '{$dbType}') is excluded from distinct value check.");
+                        $distinctCount = $nThreshold + 1; // Assume too many for text/blob types
+                        $this->line("      [DISTINCT_VALUES] Marked distinctCount as " . ($nThreshold + 1) . ".");
+                    }
+
+                    $isDateField = $column === $dateField;
+                    $this->line("    [INFO] Is date field ('{$dateField}'): " . ($isDateField ? 'Yes' : 'No'));
+
+                    $fieldsInfo[$column] = [
+                        'name' => $column,
+                        'dbType' => $dbType,
+                        'appType' => $appType,
+                        'distinctValues' => $distinctValues, // Populated if count <= N
+                        'distinctCount' => $distinctCount,   // Actual count from DB, or N+1 if not fetched/error/excluded
+                        'isDateField' => $isDateField,
+                    ];
+                    $this->line("    [FIELD_INFO_SUMMARY] For column '{$column}': AppType='{$appType}', DBCount='{$distinctCount}', FetchedOptions=" . count($distinctValues));
+                }
+                
+                $this->line("[GENERATION] Generating metadata for {$modelClass}...");
+                $allMetadata[$modelClass] = [
+                    'filterableFieldsDescription' => $this->generateFilterableFieldsDescription($fieldsInfo, $nThreshold, $modelClass, $currentModelExcludedFilterFields),
+                    'contextData' => $this->generateContextData($fieldsInfo, $modelClass, $currentModelExcludedFilterFields),
+                    'searchableColumns' => $this->generateSearchableColumns($fieldsInfo, $modelClass),
+                    'gptSchemaProperties' => $this->generateGptSchemaProperties($fieldsInfo, $nThreshold, $modelClass, $currentModelExcludedFilterFields),
+                ];
+                $this->line("[GENERATION] Finished generating metadata for {$modelClass}.");
+
+            } catch (\Exception $e) {
+                $this->error("[ERROR] Error processing model {$modelClass}: " . $e->getMessage() . " at " . $e->getFile() . ":" . $e->getLine());
+            }
+        }
+
+        $this->line("[OUTPUT] Preparing output content...");
+        $outputContent = "<?php\n\nreturn " . $this->varExport($allMetadata) . ";\n";
+
+        File::ensureDirectoryExists(dirname($outputFilePath));
+        File::put($outputFilePath, $outputContent);
+
+        $this->info("[SUCCESS] Model metadata suggestions generated successfully at: {$outputFilePath}");
+        return 0;
+    }
+
+    private function getModelClasses(): array
+    {
+        $modelNamesOption = $this->option('models');
+        if ($modelNamesOption) {
+            $modelNames = explode(',', $modelNamesOption);
+            $modelClasses = [];
+            foreach ($modelNames as $modelName) {
+                $className = "App\\Models\\" . trim($modelName);
+                if (class_exists($className)) {
+                    if (method_exists($className, 'getMappableTraitUsageCheck')) { // Check for a dummy method from Mappable
+                         $modelClasses[] = $className;
+                    } else {
+                        $this->warn("Model class $className does not appear to use the Mappable trait.");
+                    }
+                } else {
+                    $this->warn("Model class $className not found.");
+                }
+            }
+            return $modelClasses;
+        }
+
+        // Discover models in App\Models namespace using Mappable trait
+        $discoveredClasses = [];
+        $path = app_path('Models');
+        if (!File::isDirectory($path)) {
+            return [];
+        }
+
+        $allFiles = (new Finder())->in($path)->files()->name('*.php');
+        foreach ($allFiles as $file) {
+            $className = 'App\\Models\\' . $file->getBasename('.php');
+            if (class_exists($className, true)) {
+                try {
+                    $reflection = new ReflectionClass($className);
+                    if (in_array('App\\Models\\Concerns\\Mappable', $reflection->getTraitNames()) && !$reflection->isAbstract() && !$reflection->isInterface() && !$reflection->isTrait()) {
+                        $discoveredClasses[] = $className;
+                    }
+                } catch (\ReflectionException $e) {
+                    $this->warn("Could not reflect class {$className}: " . $e->getMessage());
+                }
+            }
+        }
+        return $discoveredClasses;
+    }
+
+    private function determineAppType(string $column, string $dbType, array $casts): string
+    {
+        if (isset($casts[$column])) {
+            $castType = $casts[$column];
+            // Simplified mapping from Laravel cast types
+            if (in_array($castType, ['int', 'integer', 'real', 'float', 'double', 'decimal'])) return 'number';
+            if (in_array($castType, ['bool', 'boolean'])) return 'boolean';
+            if (in_array($castType, ['date', 'datetime', 'custom_datetime', 'timestamp'])) return 'datetime';
+            if (in_array($castType, ['array', 'json', 'object', 'collection'])) return 'json';
+            return 'string'; // Default for other casts
+        }
+
+        if (Str::contains($dbType, ['char', 'varchar', 'text', 'string'])) return 'string';
+        if (Str::contains($dbType, ['int', 'integer', 'serial', 'bigint', 'smallint'])) return 'number';
+        if (Str::contains($dbType, ['float', 'double', 'decimal', 'numeric', 'real'])) return 'number';
+        if (Str::contains($dbType, ['bool'])) return 'boolean';
+        if (Str::contains($dbType, ['date', 'time'])) return 'datetime'; // Includes timestamp
+        if (Str::contains($dbType, ['json'])) return 'json';
+
+        return 'string'; // Default
+    }
+    
+    private function determineUiType(array $fieldInfo, int $nThreshold): string
+    {
+        $this->line("      [UI_TYPE_DECISION] For '{$fieldInfo['name']}': AppType='{$fieldInfo['appType']}', DBDistinctCount='{$fieldInfo['distinctCount']}', NThreshold='{$nThreshold}', ActualFetchedOptions=" . count($fieldInfo['distinctValues']) . ", IsDateField=" . ($fieldInfo['isDateField'] ? 'Yes':'No'));
+
+        if ($fieldInfo['appType'] === 'boolean') {
+            $this->line("        [UI_TYPE_DECISION] Determined UI Type: boolean (AppType is boolean)");
+            return 'boolean';
+        }
+        
+        // Condition for select: DB count is known, positive, and within threshold, AND we actually have more than one distinct value to show.
+        if ($fieldInfo['distinctCount'] > 0 && $fieldInfo['distinctCount'] <= $nThreshold && count($fieldInfo['distinctValues']) > 1) {
+            $this->line("        [UI_TYPE_DECISION] Determined UI Type: select (DistinctCount {$fieldInfo['distinctCount']} <= N {$nThreshold} AND FetchedOptions " . count($fieldInfo['distinctValues']) . " > 1)");
+            return 'select';
+        }
+        
+        if ($fieldInfo['appType'] === 'number') {
+            $this->line("        [UI_TYPE_DECISION] Determined UI Type: number (AppType is number)");
+            return 'number';
+        }
+        
+        if ($fieldInfo['appType'] === 'datetime' && !$fieldInfo['isDateField']) {
+            $this->line("        [UI_TYPE_DECISION] Determined UI Type: date (AppType is datetime and not the main date field)");
+            return 'date';
+        }
+        
+        $this->line("        [UI_TYPE_DECISION] Determined UI Type: text (Default)");
+        return 'text';
+    }
+
+    private function generateFilterableFieldsDescription(array $fieldsInfo, int $nThreshold, string $modelClass, array $excludedFilterFields): array
+    {
+        $this->line("  [FILTERABLE_FIELDS] Generating for {$modelClass}");
+        $items = [
+            ['name' => 'search_term', 'label' => 'General Search', 'type' => 'text', 'placeholder' => 'Search across all fields...']
+        ];
+
+        foreach ($fieldsInfo as $column => $info) {
+            $this->line("    [FILTERABLE_FIELDS] Processing column '{$column}' for filterable fields description");
+            if (in_array($column, $excludedFilterFields) && !$info['isDateField']) {
+                $this->line("      [FILTERABLE_FIELDS] Column '{$column}' is excluded and not a date field. Skipping.");
+                continue;
+            }
+            if ($info['isDateField']) {
+                $this->line("      [FILTERABLE_FIELDS] Column '{$column}' is the main date field. Skipping (handled by start/end_date).");
+                continue;
+            }
+
+            $label = Str::title(str_replace('_', ' ', $column));
+            $uiType = $this->determineUiType($info, $nThreshold); // Logging is inside determineUiType
+            $this->line("      [FILTERABLE_FIELDS] Label: '{$label}', Determined UI Type: '{$uiType}'");
+            
+            if ($uiType === 'date') {
+                $items[] = [
+                    'name' => "{$column}_start",
+                    'label' => "{$label} Start",
+                    'type' => 'date',
+                    'placeholder' => "Start date for {$label}"
+                ];
+                $items[] = [
+                    'name' => "{$column}_end",
+                    'label' => "{$label} End",
+                    'type' => 'date',
+                    'placeholder' => "End date for {$label}"
+                ];
+                $this->line("      [FILTERABLE_FIELDS] Added start/end date inputs for '{$column}'.");
+            } elseif ($uiType === 'number') {
+                $items[] = [
+                    'name' => "{$column}_min",
+                    'label' => "{$label} Min",
+                    'type' => 'number',
+                    'placeholder' => "Min value for {$label}"
+                ];
+                $items[] = [
+                    'name' => "{$column}_max",
+                    'label' => "{$label} Max",
+                    'type' => 'number',
+                    'placeholder' => "Max value for {$label}"
+                ];
+                $this->line("      [FILTERABLE_FIELDS] Added min/max number inputs for '{$column}'.");
+            } else {
+                $placeholder = "Enter {$label}";
+                if ($uiType === 'select') $placeholder = "Select {$label}";
+
+                $fieldDesc = ['name' => $column, 'label' => $label, 'type' => $uiType, 'placeholder' => $placeholder];
+
+                if ($uiType === 'select' && !empty($info['distinctValues'])) {
+                    $this->line("      [FILTERABLE_FIELDS] UI Type is select and has distinct values. Count: " . count($info['distinctValues']));
+                    $options = array_map(fn($val) => ['value' => (string)$val, 'label' => (string)$val], $info['distinctValues']);
+                    // If boolean-like values, ensure consistent labels
+                    if (count($options) == 2 && 
+                        ( (isset($options[0]['value']) && strtolower($options[0]['value']) === '0' && isset($options[1]['value']) && strtolower($options[1]['value']) === '1') ||
+                          (isset($options[0]['value']) && strtolower($options[0]['value']) === 'false' && isset($options[1]['value']) && strtolower($options[1]['value']) === 'true') ||
+                          (isset($options[0]['value']) && strtolower($options[0]['value']) === 'no' && isset($options[1]['value']) && strtolower($options[1]['value']) === 'yes') 
+                        )
+                    ) {
+                         $this->line("        [FILTERABLE_FIELDS] Options look boolean-like. Promoting to UI type 'boolean'.");
+                         $fieldDesc['type'] = 'boolean'; 
+                         unset($fieldDesc['options']);
+                         unset($fieldDesc['placeholder']);
+                    } else {
+                        $fieldDesc['options'] = $options;
+                        $this->line("        [FILTERABLE_FIELDS] Added " . count($options) . " options.");
+                    }
+                }
+                 if ($fieldDesc['type'] === 'boolean') { 
+                    $this->line("      [FILTERABLE_FIELDS] UI Type is boolean. Standardizing representation.");
+                    unset($fieldDesc['placeholder']);
+                    unset($fieldDesc['options']);
+                }
+                $this->line("      [FILTERABLE_FIELDS] Final field description for '{$column}': " . json_encode($fieldDesc));
+                $items[] = $fieldDesc;
+            }
+        }
+        return $items;
+    }
+
+    private function generateContextData(array $fieldsInfo, string $modelClass, array $excludedFilterFields): string
+    {
+        $this->line("  [CONTEXT_DATA] Generating for {$modelClass}");
+        $modelNamePlural = Str::plural($modelClass::getModelNameForHumans());
+        $context = "Dataset of {$modelNamePlural}.";
+        
+        $sampleFilterableFields = [];
+        $count = 0;
+        foreach ($fieldsInfo as $column => $info) {
+            if (in_array($column, $excludedFilterFields) && !$info['isDateField']) continue;
+            if ($info['isDateField']) {
+                 $sampleFilterableFields[] = "date (" . Str::title(str_replace('_', ' ', $column)) . ")";
+                 $count++;
+                 continue;
+            }
+
+            $uiType = $this->determineUiType($info, (int)$this->option('N')); // N is already int, but defensive
+            if ($uiType === 'select' || $uiType === 'text' || $uiType === 'boolean') {
+                 $sampleFilterableFields[] = Str::lower(Str::title(str_replace('_', ' ', $column)));
+                 $count++;
+            }
+            if ($count >= 3) break;
+        }
+
+        if (!empty($sampleFilterableFields)) {
+            $context .= " Filter by attributes like " . implode(', ', $sampleFilterableFields) . ".";
+        }
+        $this->line("    [CONTEXT_DATA] Generated context: {$context}");
+        return $context;
+    }
+
+    private function generateSearchableColumns(array $fieldsInfo, string $modelClass): array
+    {
+        $searchable = [];
+        // Try to use existing constant if defined
+        if (defined("{$modelClass}::SEARCHABLE_COLUMNS")) {
+            $searchable = $modelClass::SEARCHABLE_COLUMNS;
+        } else {
+            foreach ($fieldsInfo as $column => $info) {
+                if ($info['appType'] === 'string' || ($info['appType'] === 'number' && !Str::contains($column, '_id'))) {
+                    $searchable[] = $column;
+                }
+            }
+        }
+        return $searchable;
+    }
+
+    private function generateGptSchemaProperties(array $fieldsInfo, int $nThreshold, string $modelClass, array $excludedFilterFields): array
+    {
+        $this->line("  [GPT_SCHEMA] Generating for {$modelClass}");
+        $dateField = $modelClass::getDateField();
+        $properties = [
+            'search_term' => ['type' => 'string', 'description' => 'A general search term to query across multiple text fields.'],
+            'start_date' => ['type' => 'string', 'format' => 'date', 'description' => "Start date for '{$dateField}' (YYYY-MM-DD)"],
+            'end_date' => ['type' => 'string', 'format' => 'date', 'description' => "End date for '{$dateField}' (YYYY-MM-DD)"],
+            'limit' => ['type' => 'integer', 'description' => 'Limit the number of records. Default is 1000, max 5000.'],
+        ];
+
+        foreach ($fieldsInfo as $column => $info) {
+            $this->line("    [GPT_SCHEMA] Processing column '{$column}' for GPT schema properties");
+            if (in_array($column, $excludedFilterFields) && !$info['isDateField']) {
+                $this->line("      [GPT_SCHEMA] Column '{$column}' is excluded and not a date field. Skipping.");
+                continue;
+            }
+            if ($info['isDateField']) continue; // Handled by start_date/end_date
+
+            $label = Str::title(str_replace('_', ' ', $column));
+            $uiType = $this->determineUiType($info, $nThreshold);
+            $description = "Filter by {$label}.";
+            $gptType = 'string'; // Default GPT type
+
+            if ($uiType === 'date') {
+                $properties["{$column}_start"] = ['type' => 'string', 'format' => 'date', 'description' => "Start date for {$label} (YYYY-MM-DD)"];
+                $properties["{$column}_end"] = ['type' => 'string', 'format' => 'date', 'description' => "End date for {$label} (YYYY-MM-DD)"];
+                $this->line("      [GPT_SCHEMA] Added start/end date properties for '{$column}'.");
+                continue; // Move to next column
+            }
+
+            switch ($uiType) {
+                case 'boolean':
+                    $gptType = 'boolean';
+                    break;
+                case 'number':
+                    // Determine if integer or general number for GPT schema
+                    $gptNumericType = ($info['appType'] === 'integer' || (Str::contains($info['dbType'], 'int') && !Str::contains($info['dbType'], 'interval'))) ? 'integer' : 'number';
+                    $properties["{$column}_min"] = ['type' => $gptNumericType, 'description' => "Minimum value for {$label}."];
+                    $properties["{$column}_max"] = ['type' => $gptNumericType, 'description' => "Maximum value for {$label}."];
+                    $this->line("      [GPT_SCHEMA] Added min/max {$gptNumericType} properties for '{$column}'.");
+                    continue 2; // Skip default property assignment at the end of the loop
+                case 'select':
+                    $gptType = 'string'; // Default for select, might be overridden to boolean
+                     if (!empty($info['distinctValues'])) {
+                        $options = array_map(fn($val) => (string)$val, $info['distinctValues']);
+                        if (count($options) == 2 && 
+                            ( (strtolower($options[0]) === '0' && strtolower($options[1]) === '1') ||
+                              (strtolower($options[0]) === 'false' && strtolower($options[1]) === 'true') ||
+                              (strtolower($options[0]) === 'no' && strtolower($options[1]) === 'yes') 
+                            )
+                        ) {
+                             $gptType = 'boolean'; // Override to boolean
+                             $description = "Filter by {$label} (true/false).";
+                        } else {
+                            $description .= ' Possible values: ' . implode(', ', $options) . '.';
+                        }
+                    }
+                    break;
+                // case 'multiselect': // If enabling multiselect UI type
+                //     $properties[$column] = ['type' => 'array', 'description' => $description, 'items' => ['type' => 'string']];
+                //     if (!empty($info['distinctValues'])) {
+                //         $options = array_map(fn($val) => (string)$val, $info['distinctValues']);
+                //         $properties[$column]['description'] .= ' Possible values: ' . implode(', ', $options) . '.';
+                //     }
+                //     $this->line("      [GPT_SCHEMA] Added array property for multiselect '{$column}'.");
+                //     continue 2; // Skip default property assignment
+                default: // text
+                    $gptType = 'string';
+                    break;
+            }
+            
+            $this->line("      [GPT_SCHEMA] Label: '{$label}', UI Type: '{$uiType}', GPT Type: '{$gptType}'");
+            if ($uiType === 'select' && !empty($info['distinctValues'])) {
+                if ($gptType === 'boolean') { // Check if it was promoted to boolean
+                    $this->line("        [GPT_SCHEMA] Options for '{$column}' determined as boolean for GPT. Description: {$description}");
+                } else {
+                    $this->line("        [GPT_SCHEMA] Added distinct values to GPT description for '{$column}'. Count: " . count($info['distinctValues']));
+                }
+            }
+            
+            $propertyDefinition = ['type' => $gptType, 'description' => $description];
+            // No need to add format:date here as uiType 'date' is handled separately above
+
+            $properties[$column] = $propertyDefinition;
+            $this->line("      [GPT_SCHEMA] Final GPT property for '{$column}': " . json_encode($properties[$column]));
+        }
+        return $properties;
+    }
+    
+    private function varExport($variable, $indentation = ''): string
+    {
+        if (is_array($variable)) {
+            $contents = "[\n";
+            foreach ($variable as $key => $value) {
+                $contents .= $indentation . "    " . var_export($key, true) . " => ";
+                $contents .= $this->varExport($value, $indentation . "    ") . ",\n";
+            }
+            $contents .= $indentation . "]";
+            return $contents;
+        }
+        return var_export($variable, true);
+    }
+}
diff --git a/app/Console/Commands/ProcessEverettDataCommand.php b/app/Console/Commands/ProcessEverettDataCommand.php
new file mode 100644
index 0000000..d66c912
--- /dev/null
+++ b/app/Console/Commands/ProcessEverettDataCommand.php
@@ -0,0 +1,373 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\File;
+use Illuminate\Support\Facades\Http;
+use Illuminate\Support\Facades\Log;
+use Illuminate\Support\Str;
+
+class ProcessEverettDataCommand extends Command
+{
+    protected $signature = 'app:process-everett-data';
+    protected $description = 'Parses Everett Markdown logs, combines data, and geocodes incident addresses.';
+
+    private const API_CALL_DELAY_MICROSECONDS = 100000; // 0.1 seconds
+
+    public function handle()
+    {
+        $this->info("Starting Everett data processing...");
+
+        $everettConfig = config('everett_datasets');
+        if (!$everettConfig || !isset($everettConfig['markdown_output_directory'])) {
+            $this->error("Everett datasets configuration for 'markdown_output_directory' is missing.");
+            return 1;
+        }
+
+        $markdownDirName = $everettConfig['markdown_output_directory'];
+        $baseStoragePath = storage_path('app/datasets/everett');
+        $markdownPath = $baseStoragePath . '/' . trim($markdownDirName, '/');
+        
+        $outputJsonFilename = 'everett_police_calls_and_arrest_data.json';
+        $outputJsonPath = $baseStoragePath . '/' . $outputJsonFilename;
+        
+        $geocodeCacheFilename = 'geocoded_addresses.json';
+        $geocodeCachePath = $baseStoragePath . '/' . $geocodeCacheFilename;
+
+        if (!File::isDirectory($markdownPath)) {
+            $this->error("Markdown directory not found: {$markdownPath}");
+            return 1;
+        }
+
+        // Ensure output directories exist
+        if (!File::isDirectory($baseStoragePath)) {
+            File::makeDirectory($baseStoragePath, 0775, true, true);
+        }
+
+        // Part 1: Parse Markdown files and combine data
+        $this->info("Processing Markdown logs from: {$markdownPath}");
+        $allData = $this->processMarkdownLogs($markdownPath);
+
+        if (empty($allData)) {
+            $this->warn("No data parsed from Markdown logs.");
+        } else {
+            $this->info("Successfully parsed " . count($allData) . " unique case entries.");
+        }
+        
+        // Save combined data
+        File::put($outputJsonPath, json_encode(array_values($allData), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
+        $this->info("Combined data saved to: {$outputJsonPath}");
+
+        // Part 2: Geocode addresses
+        $this->info("Starting geocoding process...");
+        $apiKey = env('GOOGLE_GEOCODING_API_KEY');
+        if (!$apiKey || $apiKey === 'YOUR_GOOGLE_GEOCODING_API_KEY_HERE') {
+            $this->error("GOOGLE_GEOCODING_API_KEY is not set in .env file or is set to placeholder.");
+            return 1;
+        }
+
+        $policeData = json_decode(File::get($outputJsonPath), true);
+        if (empty($policeData)) {
+            $this->warn("No data loaded from {$outputJsonPath} for geocoding. Exiting geocoding step.");
+            $this->info("Everett data processing complete (parsing only).");
+            return 0;
+        }
+
+        $geocodedCache = File::exists($geocodeCachePath) ? json_decode(File::get($geocodeCachePath), true) : [];
+        if (json_last_error() !== JSON_ERROR_NONE && File::exists($geocodeCachePath)) {
+            $this->warn("Could not decode existing geocode cache. Starting with an empty cache.");
+            $geocodedCache = [];
+        }
+
+
+        $addressesToProcessMap = $this->mapOriginalToGeocodableAddresses($policeData);
+        $this->info("Found " . count($addressesToProcessMap) . " unique original incident addresses to process for geocoding.");
+
+        $newlyGeocodedCount = 0;
+        $failedGeocodingCount = 0;
+        $processedAddressesCount = 0;
+        $totalAddressesToQuery = 0;
+
+        // Pre-calculate how many addresses actually need API calls
+        foreach ($addressesToProcessMap as $originalAddrKey => $addrToGeocode) {
+            if ($addrToGeocode !== null && !array_key_exists($originalAddrKey, $geocodedCache)) {
+                $totalAddressesToQuery++;
+            }
+        }
+        $this->info("Need to query API for {$totalAddressesToQuery} new addresses.");
+        $currentQueryCount = 0;
+
+        foreach ($addressesToProcessMap as $originalAddrKey => $addrToGeocode) {
+            $processedAddressesCount++;
+            $this->output->write("\rProcessing address " . $processedAddressesCount . "/" . count($addressesToProcessMap) . ": \"" . Str::limit($originalAddrKey, 50) . "\"");
+
+            if ($addrToGeocode === null) {
+                if (!array_key_exists($originalAddrKey, $geocodedCache)) {
+                    $geocodedCache[$originalAddrKey] = null; // Cache that it's unprocessable
+                    // No need to save cache here, will be saved if an API call is made or at the end.
+                }
+                continue;
+            }
+
+            if (array_key_exists($originalAddrKey, $geocodedCache)) {
+                continue;
+            }
+            
+            $currentQueryCount++;
+            $this->output->write("\rProcessing address " . $processedAddressesCount . "/" . count($addressesToProcessMap) . " (API Call " . $currentQueryCount . "/" . $totalAddressesToQuery . "): Querying for \"" . Str::limit($addrToGeocode, 40) . "\"");
+
+
+            $coordinates = $this->geocodeAddress($addrToGeocode, $apiKey);
+            $geocodedCache[$originalAddrKey] = $coordinates;
+            $newlyGeocodedCount++;
+
+            if ($coordinates === null) {
+                $failedGeocodingCount++;
+            }
+
+            File::put($geocodeCachePath, json_encode($geocodedCache, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
+            
+            if ($currentQueryCount < $totalAddressesToQuery) { // Avoid sleep after the last item
+                 usleep(self::API_CALL_DELAY_MICROSECONDS);
+            }
+        }
+        $this->output->write("\n"); // New line after progress bar
+
+        $this->info("Geocoding Complete.");
+        $this->line("Total unique original incident addresses considered: " . count($addressesToProcessMap));
+        $this->line("Addresses newly geocoded (or attempted): {$newlyGeocodedCount}");
+        $this->line("Addresses that failed geocoding in this run: {$failedGeocodingCount}");
+        $this->line("Total addresses in cache: " . count($geocodedCache));
+        $this->info("Geocoded data cache saved to: {$geocodeCachePath}");
+        $this->info("Everett data processing complete.");
+        return 0;
+    }
+
+    private function processMarkdownLogs(string $markdownDir): array
+    {
+        $allData = [];
+
+        // Process arrest logs
+        $arrestLogFiles = File::glob($markdownDir . "/arr_log_*.md");
+        foreach ($arrestLogFiles as $filepath) {
+            $this->line("Processing arrest log: {$filepath}");
+            $arrests = $this->parseArrestLogFile($filepath);
+            foreach ($arrests as $arrest) {
+                $caseNum = $arrest['case_number'];
+                if (!isset($allData[$caseNum])) {
+                    $allData[$caseNum] = ["case_number" => $caseNum, "arrest_details" => null, "incident_details" => null];
+                }
+                $allData[$caseNum]['arrest_details'] = [
+                    'name' => $arrest['name'],
+                    'address' => $arrest['address'],
+                    'age' => $arrest['age'],
+                    'date' => $arrest['date'],
+                    'charges' => $arrest['charges']
+                ];
+            }
+        }
+
+        // Process call logs
+        $callLogFiles = File::glob($markdownDir . "/call_log_*.md");
+        foreach ($callLogFiles as $filepath) {
+            $this->line("Processing call log: {$filepath}");
+            $calls = $this->parseCallLogFile($filepath);
+            foreach ($calls as $call) {
+                $caseNum = $call['case_number'] ?? null;
+                if (!$caseNum) continue;
+                if (!isset($allData[$caseNum])) {
+                    $allData[$caseNum] = ["case_number" => $caseNum, "arrest_details" => null, "incident_details" => null];
+                }
+                $allData[$caseNum]['incident_details'] = [
+                    'log_file_date' => $call['log_file_date'],
+                    'entry_date' => $call['entry_date'],
+                    'time' => $call['time'],
+                    'type' => $call['type'],
+                    'address' => $call['address'],
+                    'description' => $call['description']
+                ];
+            }
+        }
+        return $allData;
+    }
+
+    private function parseArrestLogFile(string $filepath): array
+    {
+        $arrests = [];
+        $lines = array_map('trim', File::lines($filepath)->toArray());
+
+        $namePattern = "/^([A-Z][A-Z\s,'.-]+,\s*[A-Z][A-Z\s,'.-]+(?:\s+[A-Z\.\s-]+)?)$/";
+        $ageCasePattern = "/^\s*age:\s*(\d+)\s*arrest date:\s*(\d{2}\/\d{2}\/\d{4})\s*case:\s*(\d{6})\s*$/";
+        $skipPatterns = "/ARREST LOG|From:.*To:|^\s*\f\s*$|^$/";
+
+        $i = 0;
+        $numLines = count($lines);
+        while ($i < $numLines) {
+            $line = $lines[$i];
+            if (preg_match($skipPatterns, $line) || empty($line)) {
+                $i++;
+                continue;
+            }
+
+            if (preg_match($namePattern, $line, $nameMatch)) {
+                if ($i + 2 < $numLines) {
+                    $potentialName = trim($nameMatch[1]);
+                    $potentialAddress = trim($lines[$i + 1]);
+                    $ageCaseLine = trim($lines[$i + 2]);
+
+                    if (preg_match($ageCasePattern, $ageCaseLine, $ageCaseMatch)) {
+                        $currentArrest = [
+                            'name' => $potentialName,
+                            'address' => $potentialAddress,
+                            'age' => $ageCaseMatch[1],
+                            'date' => $ageCaseMatch[2],
+                            'case_number' => $ageCaseMatch[3],
+                            'charges' => []
+                        ];
+                        $i += 3;
+                        while ($i < $numLines) {
+                            $chargeLine = trim($lines[$i]);
+                            if (empty($chargeLine) || preg_match($skipPatterns, $chargeLine) || preg_match($namePattern, $chargeLine)) {
+                                break;
+                            }
+                            $currentArrest['charges'][] = $chargeLine;
+                            $i++;
+                        }
+                        $arrests[] = $currentArrest;
+                        continue;
+                    }
+                }
+            }
+            $i++;
+        }
+        return $arrests;
+    }
+
+    private function parseCallLogFile(string $filepath): array
+    {
+        $calls = [];
+        $lines = File::lines($filepath)->toArray(); // Keep original lines with trailing spaces for some patterns
+
+        $fileLogDate = null;
+        $currentCallData = [];
+        $state = 'EXPECT_FILE_DATE';
+
+        $fileDatePattern = "/^\s*DAILY LOG\s+(\d{2}\/\d{2}\/\d{4})\s*$/";
+        $entryHeaderPattern = "/^\s*\*\*\*\s+[A-Z]{3}\s+(\d{2}\/\d{2}\/\d{4})\s+(.+?)\s+\*{10}\s*$/";
+        $timeLocPattern = "/^\s*(\d{2}:\d{2})\s*\*\s*(.+?)(?:\s+EVE)?\s*$/"; // Match on line with internal spaces
+        $caseDescPattern = "/^\s*(\d{6})\s*\*\s*(.+)$/"; // Match on line with internal spaces
+        $pageFeedPattern = "/^\f\s*$/";
+
+        foreach ($lines as $lineContent) {
+            $line = rtrim($lineContent, "\n\r"); // Remove newline, keep trailing spaces for pattern matching
+            $strippedLine = trim($line);
+
+            if (empty($strippedLine) || preg_match($pageFeedPattern, $line)) {
+                continue;
+            }
+
+            switch ($state) {
+                case 'EXPECT_FILE_DATE':
+                    if (preg_match($fileDatePattern, $strippedLine, $match)) {
+                        $fileLogDate = $match[1];
+                        $state = 'EXPECT_ENTRY_HEADER';
+                    }
+                    break;
+                case 'EXPECT_ENTRY_HEADER':
+                    if (preg_match($entryHeaderPattern, $strippedLine, $match)) {
+                        $currentCallData = [
+                            'log_file_date' => $fileLogDate,
+                            'entry_date' => $match[1],
+                            'type' => trim($match[2])
+                        ];
+                        $state = 'EXPECT_TIME_LOC';
+                    }
+                    break;
+                case 'EXPECT_TIME_LOC':
+                    if (preg_match($timeLocPattern, $line, $match)) { // Use $line (not $strippedLine)
+                        $currentCallData['time'] = $match[1];
+                        $currentCallData['address'] = trim($match[2]);
+                        $state = 'EXPECT_CASE_DESC';
+                    } else {
+                        $currentCallData = [];
+                        $state = 'EXPECT_ENTRY_HEADER'; // Reset
+                    }
+                    break;
+                case 'EXPECT_CASE_DESC':
+                    if (preg_match($caseDescPattern, $line, $match)) { // Use $line
+                        $currentCallData['case_number'] = $match[1];
+                        $currentCallData['description'] = trim($match[2]);
+                        $calls[] = $currentCallData;
+                        $currentCallData = [];
+                        $state = 'EXPECT_ENTRY_HEADER';
+                    } else {
+                        $currentCallData = [];
+                        $state = 'EXPECT_ENTRY_HEADER'; // Reset
+                    }
+                    break;
+            }
+        }
+        return $calls;
+    }
+    
+    private function mapOriginalToGeocodableAddresses(array $dataRecords): array
+    {
+        $addressMap = [];
+        foreach ($dataRecords as $record) {
+            $originalAddress = $record['incident_details']['address'] ?? null;
+
+            if (!$originalAddress || !is_string($originalAddress)) {
+                continue;
+            }
+            $cleanedOriginalAddress = trim($originalAddress);
+            if (empty($cleanedOriginalAddress)) {
+                continue;
+            }
+
+            // Split by "Apt:" (case-insensitive) and take the first part
+            $addressParts = preg_split('/Apt:/i', $cleanedOriginalAddress);
+            $streetAddressPart = trim($addressParts[0]);
+
+            if (empty($streetAddressPart)) {
+                 if (!array_key_exists($cleanedOriginalAddress, $addressMap)) {
+                    $addressMap[$cleanedOriginalAddress] = null; // Mark as not geocodable
+                }
+                continue;
+            }
+            $geocodableAddress = "{$streetAddressPart}, Everett, MA 02149";
+            if (!array_key_exists($cleanedOriginalAddress, $addressMap)) {
+                $addressMap[$cleanedOriginalAddress] = $geocodableAddress;
+            }
+        }
+        return $addressMap;
+    }
+
+    private function geocodeAddress(string $address, string $apiKey): ?array
+    {
+        try {
+            $response = Http::get('https://maps.googleapis.com/maps/api/geocode/json', [
+                'address' => $address,
+                'key' => $apiKey
+            ]);
+
+            if (!$response->successful()) {
+                Log::error("Geocoding API request failed for '{$address}'. Status: " . $response->status() . " Body: " . $response->body());
+                return null;
+            }
+
+            $data = $response->json();
+
+            if (($data['status'] ?? 'ERROR') === 'OK' && !empty($data['results'])) {
+                $location = $data['results'][0]['geometry']['location'];
+                return ['lat' => $location['lat'], 'lng' => $location['lng']];
+            } else {
+                 Log::warning("Geocoding API Error for '{$address}': " . ($data['status'] ?? 'UNKNOWN_STATUS') . " - " . ($data['error_message'] ?? 'No error message.'));
+                return null;
+            }
+        } catch (\Exception $e) {
+            Log::error("Exception during geocoding for '{$address}': " . $e->getMessage());
+            return null;
+        }
+    }
+}
diff --git a/app/Console/Commands/RunAllDataPipelineCommand.php b/app/Console/Commands/RunAllDataPipelineCommand.php
new file mode 100644
index 0000000..3878acc
--- /dev/null
+++ b/app/Console/Commands/RunAllDataPipelineCommand.php
@@ -0,0 +1,74 @@
+<?php
+
+namespace App\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Facades\Artisan;
+
+class RunAllDataPipelineCommand extends Command
+{
+    protected $signature = 'app:run-all-data-pipeline';
+    protected $description = 'Runs all download, processing, and seeding commands for the data pipeline.';
+
+    public function handle()
+    {
+        $this->info('Starting the full data pipeline...');
+
+        $commands = [
+            // Download commands
+            ['command' => 'app:download-city-dataset', 'params' => []],
+            ['command' => 'app:download-boston-dataset-via-scraper', 'params' => []],
+            ['command' => 'app:download-cambridge-logs', 'params' => []],
+            // Note: The 'app:download-everett-logs' command is assumed to exist.
+            // If it doesn't, this step will fail. You may need to create this command
+            // or remove this line if Everett logs are obtained manually or by another process.
+            ['command' => 'app:download-everett-pdf-markdown', 'params' => []],
+
+            // Processing commands
+            ['command' => 'app:process-everett-data', 'params' => []],
+            ['command' => 'app:generate-everett-csv', 'params' => []],
+
+            // Seeding commands
+            ['command' => 'db:seed', 'params' => ['--force' => true]], // Using --force for production, be cautious
+            ['command' => 'db:seed', 'params' => ['--class' => 'DataPointSeeder', '--force' => true]],
+        ];
+
+        foreach ($commands as $item) {
+            $commandName = $item['command'];
+            $params = $item['params'];
+
+            $this->line('');
+            $this->info("Running command: {$commandName} with params: " . json_encode($params));
+            
+            // Check if the command exists, except for the hypothetical one
+            if ($commandName === 'app:download-everett-logs' && !$this->isCommandRegistered($commandName)) {
+                $this->warn("Command '{$commandName}' is not registered. Skipping this step. Please create this command if needed for Everett logs.");
+                continue;
+            }
+            
+            $exitCode = $this->call($commandName, $params);
+
+            if ($exitCode === 0) {
+                $this->info("Successfully executed: {$commandName}");
+            } else {
+                $this->error("Command {$commandName} failed with exit code {$exitCode}. Stopping pipeline.");
+                return $exitCode; // Stop the pipeline on failure
+            }
+        }
+
+        $this->line('');
+        $this->info('Full data pipeline completed successfully.');
+        return 0;
+    }
+
+    /**
+     * Check if an Artisan command is registered.
+     *
+     * @param string $name
+     * @return bool
+     */
+    private function isCommandRegistered(string $name): bool
+    {
+        return array_key_exists($name, Artisan::all());
+    }
+}
diff --git a/app/Http/Controllers/AiAssistantController.php b/app/Http/Controllers/AiAssistantController.php
index 108298d..3c04703 100644
--- a/app/Http/Controllers/AiAssistantController.php
+++ b/app/Http/Controllers/AiAssistantController.php
@@ -4,7 +4,15 @@
 use Illuminate\Http\Request;
 use Inertia\Inertia;
 use GuzzleHttp\Client;
+use GuzzleHttp\Exception\RequestException;
+use GuzzleHttp\Exception\ClientException;
 use Symfony\Component\HttpFoundation\StreamedResponse;
+use Illuminate\Support\Facades\Log;
+use Carbon\Carbon;
+use App\Http\Controllers\GenericMapController; // Added for streamLocationReport
+use App\Http\Controllers\ThreeOneOneCaseController; // Added for streamLocationReport
+use Illuminate\Support\Facades\Auth; // Added for Auth
+use App\Models\Report; // Added for Report model
 
 class AiAssistantController extends Controller
 {
@@ -191,4 +199,353 @@ private function getContext() {
         EOT;
 
     }
+
+    /**
+     * Generates the system prompt for Gemini, customized for the data type and context for a report section.
+     *
+     * @param string $typeContext Description of the data (e.g., "Crime events from May 12, 2025")
+     * @param string $language The target language for the report (e.g., "en", "es")
+     * @return string
+     */
+    public static function getSystemPromptForReportSection(string $typeContext, string $language): string
+    {
+        $basePrompt = "You are a helpful assistant. Generate a narrative summary in markdown format for the provided city operations data. ";
+        $languageInstruction = "The report MUST be entirely in **{$language}**. ";
+        $typeInstruction = "This section is specifically about: **{$typeContext}**. ";
+        $focusInstruction = "Focus ONLY on the data points provided in this current conversation turn for this specific section. ";
+        $formattingInstruction = "Summarize the incidents. Be factual and do not speculate. Do NOT include any disclaimers, introductory, or concluding remarks for THIS INDIVIDUAL SECTION. Keep it brief and to the point for this section.";
+        $importanceInstruction = "It is of UTMOST IMPORTANCE that the report section is in the requested language: **{$language}**. Ignoring this will be detrimental.";
+
+        return $basePrompt . $languageInstruction . $typeInstruction . $focusInstruction . $formattingInstruction . $importanceInstruction;
+    }
+
+    /**
+     * Generates a report section for a specific type of data points using Gemini.
+     *
+     * @param string $typeContext A string describing the type and potentially the date context
+     * @param array $dataPoints Array of data point objects for this specific type and date.
+     * @param string $language The target language for the report.
+     * @return string The generated report snippet, or 'No report generated.'
+     */
+    public static function generateReportSection(string $typeContext, array $dataPoints, string $language): string
+    {
+        if (empty($dataPoints)) {
+            return 'No report generated.';
+        }
+
+        $apiKey = config('services.gemini.api_key');
+        $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$apiKey"; // Consider making model configurable
+        // $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=$apiKey";
+        $client = new Client();
+
+        $contents = [];
+        foreach ($dataPoints as $dataPoint) {
+            $contents[] = [
+                'role' => 'user',
+                'parts' => [
+                    ['text' => json_encode($dataPoint)],
+                ],
+            ];
+        }
+
+        $contents[] = [
+            'role' => 'user',
+            'parts' => [
+                ['text' => self::getSystemPromptForReportSection($typeContext, $language)],
+            ],
+        ];
+
+        $requestBody = [
+            'contents' => $contents,
+            "generationConfig" => [
+                "temperature" => 0.7,
+                "maxOutputTokens" => 800,
+            ]
+        ];
+
+        try {
+            $response = $client->post($url, [
+                'headers' => ['Content-Type' => 'application/json'],
+                'json' => $requestBody,
+            ]);
+
+            $responseBody = json_decode($response->getBody()->getContents(), true);
+
+            if (isset($responseBody['candidates'][0]['content']['parts'][0]['text'])) {
+                return trim($responseBody['candidates'][0]['content']['parts'][0]['text']);
+            } elseif (isset($responseBody['promptFeedback']['blockReason'])) {
+                 Log::warning("Gemini content generation blocked for report section.", [
+                    'reason' => $responseBody['promptFeedback']['blockReason'],
+                    'safetyRatings' => $responseBody['promptFeedback']['safetyRatings'] ?? [],
+                    'typeContext' => $typeContext,
+                    'language' => $language
+                ]);
+                return 'Report content generation was blocked due to safety settings.';
+            }
+            Log::warning("No text content found in Gemini response for report section: $typeContext", ['responseBody' => $responseBody, 'language' => $language]);
+            return 'No report generated.';
+
+        } catch (RequestException | ClientException $e) {
+            Log::error("Guzzle Exception during Gemini call for report section: $typeContext: " . $e->getMessage(), ['language' => $language]);
+            if ($e->hasResponse()) {
+                Log::error("Gemini Response Body for report section: " . $e->getResponse()->getBody()->getContents());
+            }
+            return "Error generating report section for $typeContext.";
+        } catch (\Exception $e) {
+            Log::error("Error generating report section for $typeContext: " . $e->getMessage(), ['language' => $language]);
+            return "Error generating report section for $typeContext.";
+        }
+    }
+
+    /**
+     * Streams a location-based report section by section.
+     */
+    public function streamLocationReport(Request $request)
+    {
+        // Basic validation for required parameters
+        $validated = $request->validate([
+            'latitude' => 'required|numeric',
+            'longitude' => 'required|numeric',
+            'address' => 'required|string',
+            'radius' => 'sometimes|numeric|min:0.01|max:5', // Radius in miles
+            'language' => 'required|string|in:en,es,fr,pt,zh-CN,ht,vi,km,ar,el,it,ru,ko,ja,pl', // Example languages
+        ]);
+
+        $centralLatitude = $validated['latitude'];
+        $centralLongitude = $validated['longitude'];
+        $address = $validated['address'];
+        $radius = $validated['radius'] ?? 0.25; // Default radius
+        $language = $validated['language'];
+        $maxDaysIndividualReports = 7; // Same constant as in SendLocationReportEmail
+
+        $fullReportContent = ""; // Accumulator for the full report
+
+        return new StreamedResponse(function () use ($centralLatitude, $centralLongitude, $address, $radius, $language, $maxDaysIndividualReports, &$fullReportContent) {
+            try {
+                // --- 0. Prepend Location Details ---
+                $locationDetailsHeader = "## Location Report Details\n\n";
+                $locationDetailsHeader .= "- **Address:** {$address}\n";
+                $locationDetailsHeader .= "- **Coordinates:** Latitude {$centralLatitude}, Longitude {$centralLongitude}\n";
+                $locationDetailsHeader .= "- **Radius:** {$radius} miles\n";
+                $locationDetailsHeader .= "- **Report Language:** {$language}\n";
+                $locationDetailsHeader .= "- **Report Generated:** " . Carbon::now()->locale($language)->isoFormat('LLLL') . "\n\n";
+                $locationDetailsHeader .= "---\n\n";
+
+                echo "data: " . json_encode(['type' => 'markdown', 'content' => $locationDetailsHeader]) . "\n\n";
+                ob_flush();
+                flush();
+                $fullReportContent .= $locationDetailsHeader;
+
+                // --- 1. Get Map Data ---
+                $mapController = new GenericMapController();
+                $simulatedRequest = new Request([
+                    'centralLocation' => [
+                        'latitude' => $centralLatitude,
+                        'longitude' => $centralLongitude,
+                        'address' => $address,
+                    ],
+                    'radius' => $radius,
+                ]);
+                $mapDataResponse = $mapController->getRadialMapData($simulatedRequest);
+                $mapData = $mapDataResponse->getData();
+
+                if (empty($mapData->dataPoints)) {
+                    Log::info("Stream Report: No map data found for address: {$address}");
+                    $noDataMessage = 'No map data found for the specified location and radius.';
+                    echo "data: " . json_encode(['type' => 'status', 'message' => $noDataMessage]) . "\n\n";
+                    ob_flush();
+                    flush();
+                    $fullReportContent .= $noDataMessage . "\n";
+                    // Still save this attempt if user is logged in
+                    if (Auth::check()) {
+                        Report::create([
+                            'user_id' => Auth::id(),
+                            'location_id' => null,
+                            'title' => "On-Demand Report for {$address} - " . Carbon::now()->format('Y-m-d H:i'),
+                            'content' => $fullReportContent,
+                            'generated_at' => Carbon::now(),
+                        ]);
+                    }
+                    return;
+                }
+
+                // --- 2. Pre-process and Group Data Points ---
+                $groupedDataByDateAndType = [];
+                $sevenDaysAgo = Carbon::now()->subDays($maxDaysIndividualReports)->startOfDay();
+
+                foreach ($mapData->dataPoints as $dataPoint) {
+                    if (!isset($dataPoint->alcivartech_date) || !isset($dataPoint->alcivartech_type)) {
+                        continue;
+                    }
+                    try {
+                        $itemDate = Carbon::parse($dataPoint->alcivartech_date)->startOfDay();
+                    } catch (\Exception $e) {
+                        continue;
+                    }
+                    $dateKey = $itemDate->format('Y-m-d');
+                    $typeKey = $dataPoint->alcivartech_type;
+
+                    if ($itemDate->gte($sevenDaysAgo)) {
+                        $groupedDataByDateAndType[$dateKey][$typeKey][] = $dataPoint;
+                    } else {
+                        $groupedDataByDateAndType['older'][$typeKey][] = $dataPoint;
+                    }
+                }
+                uksort($groupedDataByDateAndType, function ($a, $b) {
+                    if ($a === 'older') return 1;
+                    if ($b === 'older') return -1;
+                    return strtotime($b) - strtotime($a);
+                });
+
+                // --- 2.5. Enrich 311 Data ---
+                $threeOneOneController = new ThreeOneOneCaseController();
+                foreach ($groupedDataByDateAndType as $dateOrOlderKey => &$typesOnDate) {
+                    if (isset($typesOnDate['311 Case']) && !empty($typesOnDate['311 Case'])) {
+                        $serviceRequestIds = array_unique(array_map(function ($dp) {
+                            return $dp->service_request_id ?? null;
+                        }, $typesOnDate['311 Case']));
+                        $serviceRequestIds = array_filter($serviceRequestIds);
+
+                        if (!empty($serviceRequestIds)) {
+                            $idFetchingRequest = new Request(['service_request_ids' => $serviceRequestIds]);
+                            $liveDataResponse = $threeOneOneController->getMultiple($idFetchingRequest);
+                            if ($liveDataResponse->getStatusCode() === 200) {
+                                $liveCasesData = json_decode($liveDataResponse->getContent(), false);
+                                $liveCases = $liveCasesData->data ?? $liveCasesData;
+                                if (is_array($liveCases) && !empty($liveCases)) {
+                                    $liveCasesMap = [];
+                                    foreach ($liveCases as $liveCase) {
+                                        if (isset($liveCase->service_request_id)) {
+                                            $liveCasesMap[$liveCase->service_request_id] = $liveCase;
+                                        }
+                                    }
+                                    $enrichedDataPoints = [];
+                                    foreach ($typesOnDate['311 Case'] as $originalDataPoint) {
+                                        if (isset($originalDataPoint->service_request_id) && isset($liveCasesMap[$originalDataPoint->service_request_id])) {
+                                            $enrichedDataPoints[] = (object) array_merge((array) $originalDataPoint, (array) $liveCasesMap[$originalDataPoint->service_request_id]);
+                                        } else {
+                                            $enrichedDataPoints[] = $originalDataPoint;
+                                        }
+                                    }
+                                    $typesOnDate['311 Case'] = $enrichedDataPoints;
+                                }
+                            }
+                        }
+                    }
+                }
+                unset($typesOnDate);
+
+                // --- 3. Generate and Stream Reports ---
+                $reportGenerated = false;
+                foreach ($groupedDataByDateAndType as $dateOrOlderKey => $typesOnDate) {
+                    $displayDate = ($dateOrOlderKey === 'older')
+                        ? "Older than " . $maxDaysIndividualReports . " days"
+                        : Carbon::parse($dateOrOlderKey)->locale($language)->isoFormat('LL');
+
+                    $dateHeaderSent = false;
+                    $currentDateSectionContent = "";
+
+                    foreach ($typesOnDate as $type => $dataPointsForTypeAndDate) {
+                        if (empty($dataPointsForTypeAndDate)) {
+                            continue;
+                        }
+
+                        if (!$dateHeaderSent) {
+                            $dateHeaderMarkdown = "\n### " . $displayDate . "\n";
+                            echo "data: " . json_encode(['type' => 'markdown', 'content' => $dateHeaderMarkdown]) . "\n\n";
+                            ob_flush();
+                            flush();
+                            $currentDateSectionContent .= $dateHeaderMarkdown;
+                            $dateHeaderSent = true;
+                        }
+                        
+                        $typeHeaderMarkdown = "#### $type\n";
+                        echo "data: " . json_encode(['type' => 'markdown', 'content' => $typeHeaderMarkdown]) . "\n\n";
+                        ob_flush();
+                        flush();
+                        $currentDateSectionContent .= $typeHeaderMarkdown;
+
+                        $promptType = ($dateOrOlderKey === 'older') ? "$type (Older Events)" : "$type (Events from $displayDate)";
+                        $individualReport = self::generateReportSection($promptType, $dataPointsForTypeAndDate, $language);
+
+                        if ($individualReport && $individualReport !== 'No report generated.' && !str_starts_with($individualReport, "Error generating report section for") && $individualReport !== 'Report content generation was blocked due to safety settings.') {
+                            $reportChunk = $individualReport . "\n\n";
+                            echo "data: " . json_encode(['type' => 'markdown', 'content' => $reportChunk]) . "\n\n";
+                            ob_flush();
+                            flush();
+                            $currentDateSectionContent .= $reportChunk;
+                            $reportGenerated = true;
+                        } else if ($individualReport === 'No report generated.') {
+                             $statusMsg = "No specific details to report for $type on $displayDate.";
+                             echo "data: " . json_encode(['type' => 'status', 'message' => $statusMsg]) . "\n\n";
+                             ob_flush();
+                             flush();
+                             $currentDateSectionContent .= "*".$statusMsg."*\n\n";
+                        } else { // Error message or safety block
+                             $errorMsg = $individualReport; // Contains the error or safety message
+                             echo "data: " . json_encode(['type' => 'error', 'message' => $errorMsg]) . "\n\n";
+                             ob_flush();
+                             flush();
+                             $currentDateSectionContent .= "**".$errorMsg."**\n\n";
+                        }
+                    }
+                     if ($dateHeaderSent) { // Add a separator between dates if a date section was processed
+                        $separatorMarkdown = "\n---\n\n";
+                        echo "data: " . json_encode(['type' => 'markdown', 'content' => $separatorMarkdown]) . "\n\n";
+                        ob_flush();
+                        flush();
+                        $currentDateSectionContent .= $separatorMarkdown;
+                     }
+                     $fullReportContent .= $currentDateSectionContent; // Append the whole date section
+                }
+
+                if (!$reportGenerated && empty($groupedDataByDateAndType)) { // This case is handled earlier by mapData check
+                     // $msg = 'No relevant data points found to generate a report.';
+                     // echo "data: " . json_encode(['type' => 'status', 'message' => $msg]) . "\n\n";
+                     // ob_flush();
+                     // flush();
+                     // $fullReportContent .= "*".$msg."*\n";
+                } else if (!$reportGenerated) {
+                    $msg = 'Finished processing. No specific report sections were generated based on the available data.';
+                    echo "data: " . json_encode(['type' => 'status', 'message' => $msg]) . "\n\n";
+                    ob_flush();
+                    flush();
+                    $fullReportContent .= "*".$msg."*\n";
+                }
+
+                // Save the full report if user is authenticated
+                if (Auth::check() && !empty($fullReportContent)) {
+                    Report::create([
+                        'user_id' => Auth::id(),
+                        'location_id' => null, // On-demand reports are not tied to a saved location
+                        'title' => "On-Demand Report for {$address} - " . Carbon::now()->format('Y-m-d H:i'),
+                        'content' => $fullReportContent,
+                        'generated_at' => Carbon::now(),
+                    ]);
+                    Log::info("Streamed on-demand report saved for user: " . Auth::id() . " for address: {$address}");
+                }
+
+
+            } catch (\Illuminate\Validation\ValidationException $e) {
+                Log::error("Stream Report Validation Error: " . $e->getMessage(), $e->errors());
+                echo "data: " . json_encode(['type' => 'error', 'message' => 'Invalid request parameters: ' . $e->getMessage(), 'details' => $e->errors()]) . "\n\n";
+                ob_flush();
+                flush();
+            } catch (\Exception $e) {
+                Log::error("Stream Report Error for address {$address}: {$e->getMessage()}");
+                Log::error("Stream Report Stack Trace: " . $e->getTraceAsString());
+                echo "data: " . json_encode(['type' => 'error', 'message' => 'An error occurred while generating the report: ' . $e->getMessage()]) . "\n\n";
+                ob_flush();
+                flush();
+            } finally {
+                echo "data: " . json_encode(['type' => 'control', 'action' => 'close']) . "\n\n";
+                ob_flush();
+                flush();
+            }
+        }, 200, [
+            'Content-Type' => 'text/event-stream',
+            'Cache-Control' => 'no-cache',
+            'X-Accel-Buffering' => 'no', // For Nginx
+        ]);
+    }
 }
diff --git a/app/Http/Controllers/Auth/AuthenticatedSessionController.php b/app/Http/Controllers/Auth/AuthenticatedSessionController.php
index 134a58d..106ee97 100644
--- a/app/Http/Controllers/Auth/AuthenticatedSessionController.php
+++ b/app/Http/Controllers/Auth/AuthenticatedSessionController.php
@@ -11,6 +11,7 @@
 use Illuminate\Support\Facades\Route;
 use Inertia\Inertia;
 use Inertia\Response;
+use Illuminate\Http\JsonResponse;
 
 class AuthenticatedSessionController extends Controller
 {
diff --git a/app/Http/Controllers/DataMapController.php b/app/Http/Controllers/DataMapController.php
new file mode 100644
index 0000000..e7567db
--- /dev/null
+++ b/app/Http/Controllers/DataMapController.php
@@ -0,0 +1,657 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Http\Request;
+use Inertia\Inertia;
+use GuzzleHttp\Client;
+use Illuminate\Database\Eloquent\Builder;
+use App\Models\Concerns\Mappable; // Assuming Mappable trait/interface exists
+use Illuminate\Support\Facades\Log;
+use Illuminate\Support\Str; // Added
+use Illuminate\Support\Facades\Auth; // Added
+use Carbon\Carbon; // Added
+
+class DataMapController extends Controller
+{
+    protected array $modelMapping = [
+        '311_cases' => \App\Models\ThreeOneOneCase::class,
+        'property_violations' => \App\Models\PropertyViolation::class,
+        'food_inspections' => \App\Models\FoodInspection::class,
+        'construction_off_hours' => \App\Models\ConstructionOffHour::class,
+        'building_permits' => \App\Models\BuildingPermit::class,
+        'crime' => \App\Models\CrimeData::class, // Ensure CrimeData is mappable
+        // Add other data types and their models here
+    ];
+
+    private const MODELS = [
+        'crime' => ['lat' => 'lat', 'lng' => 'long', 'id' => 'id', 'date_field' => 'occurred_on_date', 'foreign_key' => 'crime_data_id'],
+        '311_cases' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'id', 'date_field' => 'open_dt', 'foreign_key' => 'three_one_one_case_id'],
+        'property_violations' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'id', 'date_field' => 'status_dttm', 'foreign_key' => 'property_violation_id'],
+        'construction_off_hours' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'id', 'date_field' => 'start_datetime', 'foreign_key' => 'construction_off_hour_id'],
+        'building_permits' => ['lat' => 'y_latitude', 'lng' => 'x_longitude', 'id' => 'id', 'date_field' => 'issued_date', 'foreign_key' => 'building_permit_id'],
+        'food_inspections' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'external_id', 'date_field' => 'resultdttm', 'foreign_key' => 'food_inspection_id'],
+    ];
+
+    private function getModelClass(string $dataType): ?string
+    {
+        if (!isset($this->modelMapping[$dataType])) {
+            abort(404, "Data type '{$dataType}' not found or not configured for mapping.");
+        }
+        $modelClass = $this->modelMapping[$dataType];
+
+        // Ensure the model uses the Mappable trait or implements a similar interface
+        if (!in_array(Mappable::class, class_uses_recursive($modelClass))) {
+            abort(500, "Model for {$dataType} does not use the Mappable trait/interface.");
+        }
+        return $modelClass;
+    }
+
+    public function getMinDateForUser(string $dataType)
+    {
+        $modelClass = $this->getModelClass($dataType);
+        $user = Auth::user();
+        $tierMinDate = null;
+
+        if ($user && !$user->subscribed('default')) {
+            // Authenticated free user
+            $tierMinDate = Carbon::now()->subMonths(2);
+        } elseif ($user && $user->subscribed('default')) {
+            $subscription = $user->subscription('default');
+            if ($subscription && $subscription->stripe_price === config('stripe.prices.basic_plan')) {
+                $tierMinDate = Carbon::now()->subMonths(6);
+            } elseif ($subscription && $subscription->stripe_price === config('stripe.prices.pro_plan')) {
+                // Pro users have no date restriction from tier
+                $tierMinDate = null; 
+            } else {
+                 // Fallback for subscribed users without a recognized plan (treat as free)
+                $tierMinDate = Carbon::now()->subMonths(2);
+            }
+        }
+
+        return $tierMinDate;
+    }
+
+    public function index(Request $request, string $dataType)
+    {
+        $modelClass = $this->getModelClass($dataType);
+        // Fetch initial data with a sensible limit. Filters can override this.
+        //$initialData = $modelClass::limit(100000)->get(); 
+
+        // Fetch data limited by user's subscription tier
+        $user = Auth::user();
+        $tierMinDate =$this->getMinDateForUser($dataType);
+
+        $query = $modelClass::query();
+        // Apply tier-based date restriction first
+        if ($tierMinDate) {
+            $query->where($modelClass::getDateField(), '>=', $tierMinDate->toDateString());
+        }
+
+        //get limit from request    
+        $limit = $request->input('limit', 1000); // Default limit
+
+        //order by date field
+        $query->orderBy($modelClass::getDateField(), 'desc');
+        $initialData = $query->limit(max(1, min($limit, 100000)))->get(); // Clamp limit for performance
+
+        // enrich data with additional fields
+        $initialData = $this->enrichData($initialData, $dataType);
+
+        return Inertia::render('DataMap', [
+            'initialData' => $initialData,
+            'filters' => $request->all(), // Pass through any query params as initial filters
+            'dataType' => $dataType,
+            'dateField' => $modelClass::getDateField(), // From Mappable trait
+            'externalIdField' => $modelClass::getExternalIdName(), // From Mappable trait
+            // getFilterableFieldsDescription should return a JSON string or array
+            'filterFieldsDescription' => $modelClass::getFilterableFieldsDescription(), // From Mappable trait
+        ]);
+    }
+
+    public function combinedIndex(Request $request)
+    {
+        $allDataTypeDetails = [];
+        $initialDataType = null;
+        $initialData = collect(); // Use Laravel Collection
+        $initialFilters = ['limit' => 100]; // Default initial filters
+
+        // Determine the initial data type (e.g., the first one in the mapping)
+        if (!empty($this->modelMapping)) {
+            $initialDataType = array_key_first($this->modelMapping);
+        }
+
+        foreach ($this->modelMapping as $dataType => $modelClassString) {
+            /** @var Mappable $modelClass */
+            $modelClass = $this->getModelClass($dataType); // Ensures it uses Mappable
+            if (!$modelClass) {
+                Log::warning("Skipping data type {$dataType} in combinedIndex as its model class could not be resolved or is not Mappable.");
+                continue;
+            }
+
+            $allDataTypeDetails[$dataType] = [
+                'dateField' => $modelClass::getDateField(),
+                'externalIdField' => $modelClass::getExternalIdName(),
+                'filterFieldsDescription' => $modelClass::getFilterableFieldsDescription(), // Pass as is, component handles parsing
+                'modelNameForHumans' => $modelClass::getModelNameForHumans(),
+                'searchableColumns' => $modelClass::getSearchableColumns(), // Good to have for client-side reference if needed
+            ];
+
+            // Fetch initial data only for the designated initialDataType
+            if ($dataType === $initialDataType) {
+                $query = $modelClass::query();
+
+                // Apply tier-based date restriction first
+                $tierMinDate =$this->getMinDateForUser($dataType);
+                if ($tierMinDate) {
+                    $query->where($modelClass::getDateField(), '>=', $tierMinDate->toDateString());
+                }
+
+                // Apply initial filters if any (e.g., limit)
+                if (isset($initialFilters['limit'])) {
+                    $query->limit(max(1, min((int)$initialFilters['limit'], 100000)));
+                }
+                // Add other default filters for initial load if necessary
+
+                
+                $initialData = $this->enrichData($query->get(), $dataType);
+            }
+        }
+
+        if (!$initialDataType && !empty($allDataTypeDetails)) {
+            // Fallback if initialDataType wasn't set but we have details (e.g. first valid one)
+            $initialDataType = array_key_first($allDataTypeDetails);
+            // Potentially fetch data for this fallback initialDataType if not already fetched
+            if ($initialData->isEmpty() && $initialDataType) {
+                 /** @var Mappable $modelClass */
+                $modelClass = $this->getModelClass($initialDataType);
+                $query = $modelClass::query();
+                if (isset($initialFilters['limit'])) {
+                    $query->limit(max(1, min((int)$initialFilters['limit'], 100000)));
+                }
+                $initialData = $this->enrichData($query->get(), $initialDataType);
+            }
+        }
+
+
+        return Inertia::render('CombinedDataMap', [
+            'modelMapping' => $this->modelMapping, // Pass the raw mapping
+            'initialDataType' => $initialDataType,
+            'initialData' => $initialData,
+            'initialFilters' => $initialFilters, // Pass the filters used for the initial data
+            'allDataTypeDetails' => $allDataTypeDetails,
+        ]);
+    }
+
+    public function getData(Request $request, string $dataType)
+    {
+        $modelClass = $this->getModelClass($dataType);
+        Log::info("Fetching data for {$dataType} with filters: " . json_encode($request->input('filters')));
+        /** @var Builder $query */
+        $query = $modelClass::query();
+        $filters = $request->input('filters', []);
+
+        $user = Auth::user();
+        $dateField = $modelClass::getDateField();
+        $tierMinDate = null;
+
+        if (!$user) {
+            // Guest users - for now, let's assume they can't access this endpoint
+            // Or, apply a very strict limit, e.g., 1 day.
+            // This should ideally be handled by route middleware.
+            // If allowing guests, set $tierMinDate = Carbon::now()->subDay();
+            // For now, we assume 'auth' middleware protects this route.
+            // If a guest somehow reaches here, they'll get no date restriction from this logic,
+            // but also won't have a plan.
+            // A more robust solution would be to explicitly deny or provide sample data.
+            // For this iteration, we'll rely on middleware. If user is null, no tier-specific date limits apply here.
+        } else if ($user && !$user->subscribed('default')) {
+            // Authenticated free user
+            $tierMinDate = Carbon::now()->subMonths(2);
+        } elseif ($user && $user->subscribed('default')) {
+            $subscription = $user->subscription('default');
+            if ($subscription && $subscription->stripe_price === config('stripe.prices.basic_plan')) {
+                $tierMinDate = Carbon::now()->subMonths(6);
+            } elseif ($subscription && $subscription->stripe_price === config('stripe.prices.pro_plan')) {
+                // Pro users have no date restriction from tier
+                $tierMinDate = null; 
+            } else {
+                 // Fallback for subscribed users without a recognized plan (treat as free)
+                $tierMinDate = Carbon::now()->subMonths(2);
+            }
+        }
+
+
+        $searchableColumns = $modelClass::getSearchableColumns(); // From Mappable
+        // $dateField is already defined above
+
+        $processedKeys = []; // To keep track of filter keys that have been handled
+
+        // Apply tier-based date restriction first
+        if ($tierMinDate) {
+            $query->where($dateField, '>=', $tierMinDate->toDateString());
+        }
+
+        foreach ($filters as $key => $value) {
+            // Skip if already processed, or special keys handled elsewhere, or empty/null values that are not explicit false for booleans
+            if (in_array($key, $processedKeys) || $key === 'search_term' || $key === 'limit' ||
+                ($value === null && !is_bool($value)) || ($value === '' && !is_bool($value)) || (is_array($value) && empty(array_filter($value, fn($item) => ($item !== null && $item !== '') || is_bool($item) )))) {
+                continue;
+            }
+
+            // 1. Primary date field handling (e.g., 'occurred_on_date' via 'start_date' & 'end_date' filters)
+            if ($key === 'start_date' && !empty($value)) {
+                $userStartDate = Carbon::parse($value);
+                // Ensure user's start_date respects tier limitations
+                if ($tierMinDate && $userStartDate->lt($tierMinDate)) {
+                    $value = $tierMinDate->toDateString(); // Override with tier's minimum date
+                }
+
+                $endDateValue = $filters['end_date'] ?? null;
+                if (!empty($endDateValue)) {
+                    $query->whereBetween($dateField, [$value, $endDateValue]);
+                    $processedKeys[] = 'end_date'; // Mark 'end_date' as handled
+                } else {
+                    $query->where($dateField, '>=', $value);
+                }
+                $processedKeys[] = 'start_date'; // Mark 'start_date' as handled
+                continue;
+            } elseif ($key === 'end_date' && !empty($value) && !isset($filters['start_date'])) {
+                // Only 'end_date' is present for the primary date field
+                // If tierMinDate is set, and no start_date is provided by user,
+                // the query already has `where($dateField, '>=', $tierMinDate)`.
+                // So, we just add the upper bound.
+                $query->where($dateField, '<=', $value);
+                $processedKeys[] = 'end_date';
+                continue;
+            }
+
+            // 2. Secondary date fields (e.g., 'some_other_date_start' & 'some_other_date_end')
+            // AND Numeric range fields (e.g., 'age_min' & 'age_max')
+            if (Str::endsWith($key, '_start') || Str::endsWith($key, '_min')) {
+                $isDateRange = Str::endsWith($key, '_start');
+                $suffix = $isDateRange ? '_start' : '_min';
+                $correspondingSuffix = $isDateRange ? '_end' : '_max';
+
+                $baseColumn = Str::beforeLast($key, $suffix);
+                $startValue = $value; // or minValue
+                $endKey = $baseColumn . $correspondingSuffix;
+                $endValue = $filters[$endKey] ?? null; // or maxValue
+
+                // Ensure value is not an empty string before processing
+                if ($startValue === '' && !is_numeric($startValue)) $startValue = null;
+                if ($endValue === '' && !is_numeric($endValue)) $endValue = null;
+
+
+                if ($startValue !== null && $endValue !== null) {
+                    if (!$isDateRange) { // Numeric range
+                        $numStartValue = filter_var($startValue, FILTER_VALIDATE_FLOAT, FILTER_NULL_ON_FAILURE);
+                        $numEndValue = filter_var($endValue, FILTER_VALIDATE_FLOAT, FILTER_NULL_ON_FAILURE);
+                        if ($numStartValue !== null && $numEndValue !== null) {
+                            $query->whereBetween($baseColumn, [$numStartValue, $numEndValue]);
+                        } else {
+                            Log::warning("Invalid numeric range values for {$baseColumn}: min='{$startValue}', max='{$endValue}'");
+                        }
+                    } else { // Date range
+                        $query->whereBetween($baseColumn, [$startValue, $endValue]);
+                    }
+                    $processedKeys[] = $endKey; // Mark corresponding _end or _max key as handled
+                } elseif ($startValue !== null) {
+                    if (!$isDateRange) { // Numeric min
+                        $numStartValue = filter_var($startValue, FILTER_VALIDATE_FLOAT, FILTER_NULL_ON_FAILURE);
+                        if ($numStartValue !== null) {
+                            $query->where($baseColumn, '>=', $numStartValue);
+                        } else {
+                             Log::warning("Invalid numeric min value for {$baseColumn}: '{$startValue}'");
+                        }
+                    } else { // Date start
+                        $query->where($baseColumn, '>=', $startValue);
+                    }
+                }
+                $processedKeys[] = $key; // Mark _start or _min key as handled
+                continue;
+            } elseif (Str::endsWith($key, '_end') || Str::endsWith($key, '_max')) {
+                $isDateRange = Str::endsWith($key, '_end');
+                $suffix = $isDateRange ? '_end' : '_max';
+                $correspondingSuffix = $isDateRange ? '_start' : '_min';
+
+                $baseColumn = Str::beforeLast($key, $suffix);
+                $startKeyForThis = $baseColumn . $correspondingSuffix; // or _min
+
+                $currentEndValue = $value;
+                if ($currentEndValue === '' && !is_numeric($currentEndValue)) $currentEndValue = null;
+
+                // Process _end or _max key only if its corresponding _start or _min key was not provided/handled
+                if (!isset($filters[$startKeyForThis]) && $currentEndValue !== null) {
+                    if (!$isDateRange) { // Numeric max
+                        $numEndValue = filter_var($currentEndValue, FILTER_VALIDATE_FLOAT, FILTER_NULL_ON_FAILURE);
+                        if ($numEndValue !== null) {
+                            $query->where($baseColumn, '<=', $numEndValue);
+                        } else {
+                            Log::warning("Invalid numeric max value for {$baseColumn}: '{$currentEndValue}'");
+                        }
+                    } else { // Date end
+                         $query->where($baseColumn, '<=', $currentEndValue);
+                    }
+                }
+                $processedKeys[] = $key; // Mark _end or _max key as handled
+                continue;
+            }
+            
+            // 3. General column filtering for other types (text, select, boolean, etc.)
+            // These keys should directly correspond to database column names.
+            if (!in_array($key, $processedKeys)) { // Ensure it wasn't handled by date logic
+                 if (is_array($value)) {
+                    // Ensure array values are not empty strings before applying whereIn
+                    $filteredValues = array_filter($value, fn($item) => $item !== null && $item !== '');
+                    if (!empty($filteredValues)) {
+                        $query->whereIn($key, $filteredValues);
+                    }
+                } elseif (is_bool($value)) {
+                    $query->where($key, $value);
+                } else {
+                    // For single string/numeric values, typically use LIKE for text.
+                    // For numeric or exact matches, '=' would be better.
+                    // This might need refinement based on column type from metadata if available.
+                    // Defaulting to LIKE for broader matching.
+                    $query->where($key, 'LIKE', "%{$value}%");
+                }
+                $processedKeys[] = $key;
+            }
+        }
+
+        $limit = isset($filters['limit']) && is_numeric($filters['limit']) ? (int)$filters['limit'] : 1000;
+        // Tier-based limit adjustments could be added here if needed
+        // Example:
+        // if ($user && !$user->subscribed('default')) { $limit = min($limit, 200); } // Free user limit
+        // elseif ($user && $user->subscribed('default') && $user->subscription('default')->stripe_price === config('stripe.prices.basic_plan')) { $limit = min($limit, 1000); } // Basic
+        // Pro users could use the default clamp or a higher one.
+        $query->limit(max(1, min($limit, 100000))); // Clamp limit for performance
+
+        //order by date field
+        $query->orderBy($modelClass::getDateField(), 'desc');
+        
+        Log::info("Query: " . $query->toSql());
+        Log::info("Query values: " . json_encode($query->getBindings()));
+        $data = $query->get();
+
+        $data = $this->enrichData($data, $dataType);
+
+        return response()->json(['data' => $data, 'filtersApplied' => $filters]);
+    }
+
+    public function enrichData( $data, string $dataType)
+    { 
+                // add alcivartech_type to the data
+        // add alcivartech_type to the data based on the data.type and
+        // also add alcivartech_date to the data based on the data.type
+        // follow the exampled code above and ingnore the location stuff
+
+        $data = $data->map(function ($point) use ($dataType) {
+            $point->alcivartech_type = $dataType; // Set the type based on the data type
+            //normalize latitude and longitude field name
+            if ($dataType != "property_violations") {
+                $point->latitude = $point->{self::MODELS[$dataType]['lat']};
+                $point->longitude = $point->{self::MODELS[$dataType]['lng']};
+            } else {
+                //parse the location field into latitude and longitude if it exists
+                if( isset($point->location) && !empty($point->location)) {
+                    $location = json_decode($point->location, true);
+                    if (isset($location['latitude']) && isset($location['longitude'])) {
+                        $point->latitude = $location['latitude'];
+                        $point->longitude = $location['longitude'];
+                    }
+                }
+                unset($point->location);
+
+            }
+
+            switch ($dataType) {
+                case 'crime':
+                    $point->alcivartech_date = $point->occurred_on_date;
+                    $point->alcivartech_type = 'Crime';
+                    break;
+                case '311_cases':
+                    $point->alcivartech_date = $point->open_dt;
+
+                    $point->alcivartech_type = '311 Case';
+
+                    break;
+                case 'building_permits':
+                    $point->alcivartech_date = $point->issued_date;
+                    $point->alcivartech_type = 'Building Permit';
+                    break;
+                case 'property_violations':
+                    $point->alcivartech_date = $point->status_dttm;
+                    $point->alcivartech_type = 'Property Violation';
+                    break;
+                case 'construction_off_hours':
+                    $point->alcivartech_date = $point->start_datetime;
+                    $point->alcivartech_type = 'Construction Off Hour';
+                    break;
+                case 'food_inspections':
+
+                        $point->alcivartech_date = $point->resultdttm;
+                        $point->alcivartech_type = 'Food Inspection';
+                    break;
+                default:
+                    $point->alcivartech_date = null; // Default case
+            }
+            return $point;
+        });
+
+        $data = $this->aggregateFoodViolations($data);
+
+        return $data;
+    }
+
+   
+    // This function aggregates food inspection violations by license number
+    // and returns a modified data set with aggregated records.
+    public function aggregateFoodViolations($dataPoints)
+    {
+        $nonFoodInspections = collect();
+        $foodInspectionsToAggregate = collect();
+        $foodInspectionsWithoutLicenseNo = collect();
+
+        // Partition dataPoints
+        foreach ($dataPoints as $dp) {
+            if (isset($dp->alcivartech_type) && $dp->alcivartech_type === 'Food Inspection') {
+                if (empty($dp->licenseno)) {
+                    $foodInspectionsWithoutLicenseNo->push($dp);
+                } else {
+                    $foodInspectionsToAggregate->push($dp);
+                }
+            } else {
+                $nonFoodInspections->push($dp);
+            }
+        }
+
+        if ($foodInspectionsToAggregate->isEmpty()) {
+            return $nonFoodInspections->merge($foodInspectionsWithoutLicenseNo)->values();
+        }
+
+        $groupedByLicense = $foodInspectionsToAggregate->groupBy('licenseno');
+
+        $aggregatedFoodViolations = $groupedByLicense->map(function ($licenseGroup) {
+            // Sort by date to find the most recent record for representative data
+            $licenseGroup = $licenseGroup->sortByDesc(function ($item) {
+                $date = $item->alcivartech_date ?? null;
+                return $date ? Carbon::parse($date)->timestamp : 0;
+            });
+            $mostRecentRecord = $licenseGroup->first();
+
+            // Filter for actual violations within the group
+            $actualViolationEntries = $licenseGroup->filter(fn($viol) => !empty($viol->violdttm));
+
+            $violationSummary = null;
+
+            if ($actualViolationEntries->isNotEmpty()) {
+                $violationSummaryMap = [];
+                foreach ($actualViolationEntries as $viol) {
+                    $descKey = !empty($viol->violdesc) ? $viol->violdesc : 'Unknown Violation Description';
+                    if (!isset($violationSummaryMap[$descKey])) {
+                        $violationSummaryMap[$descKey] = [
+                            'violdesc' => $descKey,
+                            'entries' => []
+                        ];
+                    }
+                    $violationSummaryMap[$descKey]['entries'][] = [
+                        'alcivartech_date' => $viol->alcivartech_date,
+                        'viol_status' => $viol->viol_status,
+                        'comments' => $viol->comments,
+                        'result' => $viol->result,
+                        'viol_level' => $viol->viol_level,
+                    ];
+                }
+
+                // Process summary items: sort entries, then sort summary items by violdesc
+                $processedSummaryItems = [];
+                foreach ($violationSummaryMap as $descKey => $summaryDetails) {
+                    $sortedEntries = collect($summaryDetails['entries'])->sortByDesc(function ($entry) {
+                        $date = $entry['alcivartech_date'] ?? null;
+                        return $date ? Carbon::parse($date)->timestamp : 0;
+                    })->values()->all();
+                    
+                    $processedSummaryItems[] = [
+                        'violdesc' => $summaryDetails['violdesc'], // Use from summaryDetails to ensure consistency
+                        'entries' => $sortedEntries
+                    ];
+                }
+
+                usort($processedSummaryItems, function ($a, $b) {
+                    return strcmp($a['violdesc'], $b['violdesc']);
+                });
+                $violationSummary = $processedSummaryItems;
+            }
+
+            // Create the aggregated point, starting with mostRecentRecord's properties
+            $aggregatedPointData = $mostRecentRecord;
+
+
+            Log::info("Aggregated Food Inspection Data: " . json_encode($aggregatedPointData));
+            Log::info("Most Recent Record: " . json_encode($mostRecentRecord));
+            
+            // Add/override specific fields for aggregation
+            $aggregatedPointData['alcivartech_type'] = "Food Inspection";
+            $aggregatedPointData['alcivartech_date'] = $mostRecentRecord->alcivartech_date; // Ensure it's the most recent date
+            $aggregatedPointData['_is_aggregated_food_violation'] = true;
+
+            if ($violationSummary !== null) {
+                $aggregatedPointData['violation_summary'] = $violationSummary;
+            }
+            Log::info("Aggregated Food Inspection Data: " . json_encode($aggregatedPointData));
+            
+            return (object) $aggregatedPointData;
+        })->filter()->values(); // filter() removes nulls, values() re-indexes collection
+
+        // Combine all parts: non-food, food without licenseno (passed through), and aggregated food inspections
+        return $nonFoodInspections->toBase()
+            ->merge($foodInspectionsWithoutLicenseNo)
+            ->merge($aggregatedFoodViolations)
+            ->values();
+    }
+    // This method is for natural language processing queries
+    // It takes a natural language query and converts it into a structured filter
+    // It uses the OpenAI API to process the query and generate the filters
+    // It also handles the authentication and tier-based restrictions
+
+    public function naturalLanguageQuery(Request $request, string $dataType)
+    {
+        $user = Auth::user();
+        if (!$user) {
+            // Or handle guest access for NLP differently, e.g., deny or use sample data.
+            // For now, assume 'auth' middleware protects this.
+            return response()->json(['error' => 'Authentication required for natural language queries.'], 401);
+        }
+        // Tier-based restrictions are handled within getData, which this method calls.
+        // No specific tier logic needed here beyond what getData enforces.
+
+        $modelClass = $this->getModelClass($dataType);
+        $queryText = $request->input('query');
+
+        if (empty($queryText)) {
+            return response()->json(['error' => 'Query text cannot be empty.'], 400);
+        }
+
+        try {
+            $gptResponseJson = $this->queryGPT($queryText, $modelClass);
+            $gptResponse = json_decode($gptResponseJson, true);
+
+            if (isset($gptResponse['filters'])) {
+                // Pass GPT's filters to the getData method
+                $filterRequest = new Request(['filters' => $gptResponse['filters']]);
+                // Merge original request's query parameters if needed, or just use GPT's
+                // $filterRequest->setMethod('POST'); // getData expects POST or reads from input()
+                
+                // Call getData directly
+                return $this->getData($filterRequest, $dataType);
+            }
+            return response()->json(['error' => 'Could not parse query filters from AI response.', 'query' => $queryText, 'raw_ai_response' => $gptResponseJson], 400);
+
+        } catch (\Exception $e) {
+            \Log::error("NLP Query Error for {$dataType}: " . $e->getMessage());
+            return response()->json(['error' => 'Failed to process natural language query: ' . $e->getMessage()], 500);
+        }
+    }
+
+    private function queryGPT(string $queryText, string $modelClass): string
+    {
+        $client = new Client();
+        $apiKey = config('services.openai.api_key');
+
+        if (!$apiKey) {
+            throw new \Exception('OpenAI API key is not configured.');
+        }
+
+        // These methods must exist on the model via Mappable trait or direct implementation
+        // $fieldsDescription = $modelClass::getFilterableFieldsDescription(); // No longer directly used here for schema building
+        $contextData = $modelClass::getContextData(); // Optional additional context, now part of schema description
+        $dateField = $modelClass::getDateField(); // Still useful for system message
+
+        $systemMessage = "You are an AI assistant that converts natural language queries into JSON filter objects for a dataset about {$modelClass::getModelNameForHumans()}. ".
+                         "The primary date field for filtering is '{$dateField}'. Use 'start_date' and 'end_date' in 'YYYY-MM-DD' format for date ranges on this field. ".
+                         "There is also a 'search_term' field which accepts a string for general free-text search across multiple fields. ".
+                         "Today's date is " . now()->toDateString() . ". " .
+                         "Refer to the available fields and their types in the function description. Only use filter keys that are explicitly mentioned or inferable from the description. Ensure all filter values are in the correct format (e.g. strings for text, numbers for numeric fields, booleans for true/false, arrays of strings/numbers for multi-select).";
+        
+        $userMessages = [
+            ['role' => 'user', 'content' => "Convert this query into data filters: \"{$queryText}\""],
+        ];
+        // Context data is now part of the function schema description, but can also be added as a separate message if desired for emphasis.
+        // if (!empty($contextData)) {
+        //     $userMessages[] = ['role' => 'user', 'content' => "Additional context for the dataset: {$contextData}"];
+        // }
+
+        // Get the function schema directly from the model
+        $functionTool = $modelClass::getGptFunctionSchema();
+
+        // Validate that the schema was generated correctly (basic check)
+        if (!isset($functionTool['type']) || $functionTool['type'] !== 'function' || !isset($functionTool['function']['parameters'])) {
+            \Log::error("DataMapController: model {$modelClass}::getGptFunctionSchema() returned an invalid schema.");
+            throw new \Exception("Failed to generate a valid function schema for model {$modelClass}.");
+        }
+        
+        $response = $client->post('https://api.openai.com/v1/chat/completions', [
+            'headers' => [
+                'Authorization' => 'Bearer ' . $apiKey,
+                'Content-Type' => 'application/json',
+            ],
+            'json' => [
+                'model' => 'gpt-4o-mini', // Consider updating model if needed
+                'messages' => array_merge([['role' => 'system', 'content' => $systemMessage]], $userMessages),
+                'tools' => [$functionTool], // Use the schema from the model
+                'tool_choice' => ["type" => "function", "function" => ["name" => $functionTool['function']['name']]], 
+            ]
+        ]);
+
+        $responseBody = json_decode($response->getBody()->getContents(), true);
+
+        if (isset($responseBody['choices'][0]['message']['tool_calls'][0]['function']['arguments'])) {
+            return $responseBody['choices'][0]['message']['tool_calls'][0]['function']['arguments'];
+        }
+        
+        \Log::error('OpenAI GPT Error: Failed to get valid filter arguments. Response: ' . json_encode($responseBody));
+        throw new \Exception('Failed to get valid filter arguments from OpenAI. Check logs for details. OpenAI Response: ' . json_encode($responseBody));
+    }
+}
diff --git a/app/Http/Controllers/GenericMapController.php b/app/Http/Controllers/GenericMapController.php
index fc26a8f..7726dc7 100644
--- a/app/Http/Controllers/GenericMapController.php
+++ b/app/Http/Controllers/GenericMapController.php
@@ -8,6 +8,7 @@
 use App\Models\PropertyViolation;
 use App\Models\ConstructionOffHour;
 use App\Models\DataPoint;
+use App\Models\FoodInspection; // Corrected model name from FoodEstablishmentViolation
 use Illuminate\Http\Request;
 use Illuminate\Support\Facades\Log;
 use Illuminate\Support\Facades\Auth;
@@ -18,21 +19,81 @@
 class GenericMapController extends Controller
 {
 
-    public function generateJsonObjectFromModel($modelClass)
+    protected function getJsonSelectForModel($modelClass, $jsonAlias)
     {
-        $fillable = (new $modelClass)->getFillable();
-    
-        // Escape reserved keywords with backticks for MySQL
-        $jsonObject = implode(', ', array_map(function ($field) {
-            $escapedField = "`$field`"; // Add backticks around the field name
-            return "'$field', $escapedField";
-        }, $fillable));
-    
-        return "JSON_OBJECT($jsonObject)";
+        $model = new $modelClass;
+        $table = $model->getTable();
+        
+        $fields = $model->getFillable();
+        $fields[] = $model->getKeyName(); // Add primary key
+        
+        // Add date field(s) used in logic if not already in fillable
+        // Most models have one main date field returned by getDateField()
+        $dateField = $modelClass::getDateField();
+        if (!in_array($dateField, $fields)) {
+            $fields[] = $dateField;
+        }
+
+        // FoodInspection uses violdttm and resultdttm. Both should be in fillable.
+        // If not, add them explicitly. Current FoodInspection model has them in fillable.
+        // Example:
+        // if ($modelClass === \App\Models\FoodInspection::class) {
+        //     if(!in_array('violdttm', $fields)) $fields[] = 'violdttm';
+        // }
+
+        $fields = array_unique(array_filter($fields)); // Remove duplicates and empty values
+
+        if (empty($fields)) {
+            return "JSON_OBJECT() as $jsonAlias"; // Return empty JSON object if no fields
+        }
+
+        $jsonObjectParts = [];
+        foreach ($fields as $field) {
+            $jsonObjectParts[] = "'$field'";
+            $jsonObjectParts[] = "`$table`.`$field`";
+        }
+
+        return "JSON_OBJECT(" . implode(', ', $jsonObjectParts) . ") as $jsonAlias";
     }
 
     public function getRadialMapData(Request $request)
     {
+        $user = Auth::user();
+        $currentPlan = null;
+        $daysToFilter = 7; // Default for unauthenticated users
+        $targetTable = 'data_points'; // Default table
+
+        if ($user) {
+            $daysToFilter = 14; // Authenticated free user
+            if ($user->subscribed('default')) {
+                $subscription = $user->subscription('default');
+                if ($subscription) {
+                    if ($subscription->stripe_price === config('stripe.prices.basic_plan')) {
+                        $currentPlan = 'basic';
+                        $daysToFilter = 21; // Basic plan gets ~6 months from data_points
+                        $targetTable = 'data_points';
+                    } elseif ($subscription->stripe_price === config('stripe.prices.pro_plan')) {
+                        $currentPlan = 'pro';
+                        $targetTable = 'data_points'; // Pro plan uses all_time_data_points
+                        // No date filtering for pro plan on all_time_data_points, or a very long period if needed for performance.
+                        // For true "all time", $daysToFilter is not strictly applied to the query on this table.
+                        // We can set it to a very large number or null to signify no filtering.
+                        $daysToFilter = 31; // Or a very large number like 365 * 20 (20 years)
+                    }
+                }
+            }
+        }
+
+        $cutoffDateTime = $daysToFilter ? Carbon::now()->subDays($daysToFilter)->startOfDay() : null;
+
+        Log::info('User authentication status for data filtering.', [
+            'authenticated' => (bool)$user,
+            'currentPlan' => $currentPlan,
+            'targetTable' => $targetTable,
+            'daysToFilter' => $daysToFilter,
+            'cutoffDateTime' => $cutoffDateTime ? $cutoffDateTime->toDateTimeString() : 'N/A (all time)',
+        ]);
+
         $defaultLatitude = 42.3601;
         $defaultLongitude = -71.0589;
         $defaultAddress = 'Boston, MA';
@@ -64,218 +125,146 @@ public function getRadialMapData(Request $request)
         Log::info('Language codes to include.', ['language_codes' => $language_codes]);
 
         $radius = $request->input('radius', .25);
-        $days = 14;
-        $crimeDays = 14;
-        $caseDays = 14;
-        $permitDays = 14;
-        $violationDays = 14;
-        $offHourDays = 14;
-
-        /*
-        $boundingBox = $this->getBoundingBox($centralLocation['latitude'], $centralLocation['longitude'], $radius);
-
-        
-        $crimeData = collect($this->getCrimeDataForBoundingBox($boundingBox, $crimeDays, $language_codes));
-        Log::info('Crime data fetched.', ['crimeDataCount' => $crimeData->count()]);
-
-        $caseData = collect($this->getThreeOneOneCaseDataForBoundingBox($boundingBox, $caseDays, $language_codes));
-        Log::info('311 case data fetched.', ['caseDataCount' => $caseData->count()]);
-
-        $buildingPermits = collect($this->getBuildingPermitsForBoundingBox($boundingBox, $permitDays, $language_codes));
-        Log::info('Building permits data fetched.', ['buildingPermitsCount' => $buildingPermits->count()]);
-
-        $propertyViolations = collect($this->getPropertyViolationsForBoundingBox($boundingBox, $violationDays, $language_codes));
-        Log::info('Property violations data fetched.', ['propertyViolationsCount' => $propertyViolations->count()]);
-
-        $offHours = collect($this->getConstructionOffHoursForBoundingBox($boundingBox, $offHourDays));
-        Log::info('Construction off hours data fetched.', ['offHoursCount' => $offHours->count()]);
-
-        $dataPoints = $crimeData->merge($caseData)->merge($buildingPermits)->merge($propertyViolations)->merge($offHours);
-        Log::info('Data points merged.', ['totalDataPointsCount' => $dataPoints->count()]);
-        
-        /*
-        $crimeDataJson = $this->generateJsonObjectFromModel(CrimeData::class);
-        $threeOneOneJson = $this->generateJsonObjectFromModel(ThreeOneOneCase::class);
-        $buildingPermitJson = $this->generateJsonObjectFromModel(BuildingPermit::class);
-        $propertyViolationsJson = $this->generateJsonObjectFromModel(PropertyViolation::class);
-        $constructionOffHoursJson = $this->generateJsonObjectFromModel(ConstructionOffHour::class);
- 
-
-        $dataPoints = DB::table('crime_data')
-    ->select(
-        'lat as latitude',
-        'long as longitude',
-        'occurred_on_date as date',
-        DB::raw("'Crime' as type"),
-        DB::raw("$crimeDataJson as info")
-    )
-    ->whereBetween('lat', [$boundingBox['minLat'], $boundingBox['maxLat']])
-    ->whereBetween('long', [$boundingBox['minLon'], $boundingBox['maxLon']])
-    ->where('occurred_on_date', '>=', Carbon::now()->subDays($days)->toDateString())
-
-    ->union(
-        DB::table('three_one_one_cases')
-            ->select(
-                'latitude',
-                'longitude',
-                'open_dt as date',
-                DB::raw("'311 Case' as type"),
-                DB::raw("$threeOneOneJson as info")
-            )
-            ->whereBetween('latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-            ->whereBetween('longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-            ->where('open_dt', '>=', Carbon::now()->subDays($days)->toDateString())
-    )
-
-    ->union(
-        DB::table('building_permits')
-            ->select(
-                'y_latitude as latitude',
-                'x_longitude as longitude',
-                'issued_date as date',
-                DB::raw("'Building Permit' as type"),
-                DB::raw("$buildingPermitJson as info")
-            )
-            ->whereBetween('y_latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-            ->whereBetween('x_longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-            ->where('issued_date', '>=', Carbon::now()->subDays($days)->toDateString())
-    )
-
-    ->union(
-        DB::table('property_violations')
-            ->select(
-                'latitude',
-                'longitude',
-                'status_dttm as date',
-                DB::raw("'Property Violation' as type"),
-                DB::raw("$propertyViolationsJson as info")
-            )
-            ->whereBetween('latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-            ->whereBetween('longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-            ->where('status_dttm', '>=', Carbon::now()->subDays($days)->toDateString())
-    )
+        // The individual $crimeDays, $caseDays etc. are no longer primary drivers for date filtering,
+        // $cutoffDateTime based on subscription will be used.
+        // These can be removed or kept if there's a different specific use case for them later.
+        // For now, we'll rely on the global $cutoffDateTime.
 
-    ->union(
-        DB::table('construction_off_hours')
-            ->select(
-                'latitude',
-                'longitude',
-                'start_datetime as date',
-                DB::raw("'Construction Off Hour' as type"),
-                DB::raw("$constructionOffHoursJson as info")
-            )
-            ->whereBetween('latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-            ->whereBetween('longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-            ->where('start_datetime', '>=', Carbon::now()->subDays($days)->toDateString())
-    )
-    ->get();
     
-
-        */
         $latitude = $centralLocation['latitude'];
         $longitude = $centralLocation['longitude'];
         $radiusInMeters = $radius * 1609.34; // Convert miles to meters
 
         $wktPoint = "POINT($longitude $latitude)";
 
-        $dataPoints = DB::table('data_points')
+        $query = DB::table($targetTable) // Use dynamic targetTable
             ->select(
-                'data_points.id as data_point_id',
-                DB::raw('ST_AsText(data_points.location) as location_wkt'), // Convert spatial data to readable format
-                'data_points.type as alcivartech_type', // Renaming type to prevent conflicts
-
-                // Crime Data
-                'crime_data.id as crime_id',
-                'crime_data.*',
-
-
-                // 311 Cases
-                'three_one_one_cases.id as case_id',
-                'three_one_one_cases.*',
-
-                // Property Violations
-                'property_violations.id as violation_id',
-                'property_violations.*',
-
-                // Construction Off Hours
-                'construction_off_hours.id as construction_id',
-                'construction_off_hours.*',
-
-                // Building Permits
-                'building_permits.id as permit_id',
-                'building_permits.*',
+                $targetTable.'.id as data_point_id', 
+                DB::raw("ST_AsText({$targetTable}.location) as location_wkt"),
+                $targetTable.'.type as alcivartech_type_raw', // Keep raw type for switch, rename to avoid clash if alcivartech_type is also a field in JSON
+                // $targetTable.'.alcivartech_date as data_point_alcivartech_date', // This can be used if alcivartech_date in data_points is the source of truth
+
+                DB::raw($this->getJsonSelectForModel(\App\Models\CrimeData::class, 'crime_data_json')),
+                DB::raw($this->getJsonSelectForModel(\App\Models\ThreeOneOneCase::class, 'three_one_one_case_json')),
+                DB::raw($this->getJsonSelectForModel(\App\Models\PropertyViolation::class, 'property_violation_json')),
+                DB::raw($this->getJsonSelectForModel(\App\Models\ConstructionOffHour::class, 'construction_off_hour_json')),
+                DB::raw($this->getJsonSelectForModel(\App\Models\BuildingPermit::class, 'building_permit_json')),
+                DB::raw($this->getJsonSelectForModel(\App\Models\FoodInspection::class, 'food_inspection_json'))
             )
-            ->leftJoin('crime_data', 'data_points.crime_data_id', '=', 'crime_data.id')
-            ->leftJoin('three_one_one_cases', 'data_points.three_one_one_case_id', '=', 'three_one_one_cases.id')
-            ->leftJoin('property_violations', 'data_points.property_violation_id', '=', 'property_violations.id')
-            ->leftJoin('construction_off_hours', 'data_points.construction_off_hour_id', '=', 'construction_off_hours.id')
-            ->leftJoin('building_permits', 'data_points.building_permit_id', '=', 'building_permits.id')
-            ->whereRaw("ST_Distance_Sphere(data_points.location, ST_GeomFromText(?)) <= ?", [$wktPoint, $radiusInMeters])
-            ->get();    
-
-        // Convert location_wkt (e.g., "POINT(-71.0589 42.3601)") into separate lat/lng
-        $dataPoints = $dataPoints->map(function ($point) {
-            preg_match('/POINT\((-?\d+\.\d+) (-?\d+\.\d+)\)/', $point->location_wkt, $matches);
-            $point->longitude = $matches[1] ?? null;
-            $point->latitude = $matches[2] ?? null;
-
-            //make sure latitute and longitude are numbers not strings
-            $point->latitude = floatval($point->latitude);
-            $point->longitude = floatval($point->longitude);
-            
-            unset($point->location_wkt); // Remove WKT field
+            ->leftJoin('crime_data', $targetTable.'.crime_data_id', '=', 'crime_data.id')
+            ->leftJoin('three_one_one_cases', $targetTable.'.three_one_one_case_id', '=', 'three_one_one_cases.id')
+            ->leftJoin('property_violations', $targetTable.'.property_violation_id', '=', 'property_violations.id')
+            ->leftJoin('construction_off_hours', $targetTable.'.construction_off_hour_id', '=', 'construction_off_hours.id')
+            ->leftJoin('building_permits', $targetTable.'.building_permit_id', '=', 'building_permits.id')
+            ->leftJoin('food_inspections', $targetTable.'.food_inspection_id', '=', 'food_inspections.id')
+            ->whereRaw("ST_Distance_Sphere({$targetTable}.location, ST_GeomFromText(?)) <= ?", [$wktPoint, $radiusInMeters]);
+
+        if ($cutoffDateTime && $targetTable === 'data_points') { 
+            // Apply date filtering based on the main date of the data_point itself
+            $query->where($targetTable.'.alcivartech_date', '>=', $cutoffDateTime);
+        }
+        
+        $dataPoints = $query->get();    
 
+        $dataPoints = $dataPoints->map(function ($point) {
+            // Decode JSON strings into objects
+            $point->crime_data = $point->crime_data_json ? json_decode($point->crime_data_json) : null;
+            unset($point->crime_data_json);
+            $point->three_one_one_case_data = $point->three_one_one_case_json ? json_decode($point->three_one_one_case_json) : null;
+            unset($point->three_one_one_case_json);
+            $point->property_violation_data = $point->property_violation_json ? json_decode($point->property_violation_json) : null;
+            unset($point->property_violation_json);
+            $point->construction_off_hour_data = $point->construction_off_hour_json ? json_decode($point->construction_off_hour_json) : null;
+            unset($point->construction_off_hour_json);
+            $point->building_permit_data = $point->building_permit_json ? json_decode($point->building_permit_json) : null;
+            unset($point->building_permit_json);
+            $point->food_inspection_data = $point->food_inspection_json ? json_decode($point->food_inspection_json) : null;
+            unset($point->food_inspection_json);
 
+            preg_match('/POINT\((-?\d+\.\d+) (-?\d+\.\d+)\)/', $point->location_wkt, $matches);
+            $point->longitude = isset($matches[1]) ? floatval($matches[1]) : null;
+            $point->latitude = isset($matches[2]) ? floatval($matches[2]) : null;
+            unset($point->location_wkt); 
 
-            //also convert the alcivartech type to a human readable format specifically:
-            /*    'Crime': 
-                '311 Case': 
-                'Building Permit': 
-                'Property Violation': 
-                'Construction Off Hour':  */
-            
-            switch ($point->alcivartech_type) {
+            $humanReadableType = 'Unknown';
+            switch ($point->alcivartech_type_raw) {
                 case 'crime_data':
-                    $point->alcivartech_type = 'Crime';
+                    $humanReadableType = 'Crime';
                     break;
                 case 'three_one_one_cases':
-                    $point->alcivartech_type = '311 Case';
+                    $humanReadableType = '311 Case';
                     break;
                 case 'building_permits':
-                    $point->alcivartech_type = 'Building Permit';
+                    $humanReadableType = 'Building Permit';
                     break;
                 case 'property_violations':
-                    $point->alcivartech_type = 'Property Violation';
+                    $humanReadableType = 'Property Violation';
                     break;
                 case 'construction_off_hours':
-                    $point->alcivartech_type = 'Construction Off Hour';
+                    $humanReadableType = 'Construction Off Hour';
+                    break;
+                case 'food_inspections': 
+                    $humanReadableType = 'Food Inspection';
+                    break;
+            }
+            $point->alcivartech_type = $humanReadableType;
+            unset($point->alcivartech_type_raw);
+
+            switch ($humanReadableType) {
+                case 'Crime':
+                    $point->alcivartech_date = $point->crime_data->occurred_on_date ?? null;
+                    break;
+                case '311 Case':
+                    // Assuming 'open_dt' is the field in ThreeOneOneCase model
+                    $point->alcivartech_date = $point->three_one_one_case_data->open_dt ?? null; 
+                    break;
+                case 'Building Permit':
+                    $point->alcivartech_date = $point->building_permit_data->issued_date ?? null;
+                    break;
+                case 'Property Violation':
+                    $point->alcivartech_date = $point->property_violation_data->status_dttm ?? null;
+                    break;
+                case 'Construction Off Hour':
+                    $point->alcivartech_date = $point->construction_off_hour_data->start_datetime ?? null;
+                    break;
+                case 'Food Inspection': 
+                    if ($point->food_inspection_data && !empty($point->food_inspection_data->violdttm)) {
+                        $point->alcivartech_date = $point->food_inspection_data->violdttm;
+                    } elseif ($point->food_inspection_data && !empty($point->food_inspection_data->resultdttm)) {
+                        $point->alcivartech_date = $point->food_inspection_data->resultdttm;
+                    } else {
+                        $point->alcivartech_date = null;
+                    }
                     break;
                 default:
-                    $point->alcivartech_type = 'Unknown';
+                    $point->alcivartech_date = null;
             }
 
-                        //set alcivartech_date field to the right date field based on the type
-                        switch ($point->alcivartech_type) {
-                            case 'Crime':
-                                $point->alcivartech_date = $point->occurred_on_date;
-                                break;
-                            case '311 Case':
-                                $point->alcivartech_date = $point->open_dt;
-                                break;
-                            case 'Building Permit':
-                                $point->alcivartech_date = $point->issued_date;
-                                break;
-                            case 'Property Violation':
-                                $point->alcivartech_date = $point->status_dttm;
-                                break;
-                            case 'Construction Off Hour':
-                                $point->alcivartech_date = $point->start_datetime;
-                                break;
-                            default:
-                                $point->alcivartech_date = null;
+            if (!Auth::check() && $humanReadableType === 'Food Inspection') {
+                $restrictedMessage = "Log In to See Food Inspection Information";
+                
+                if ($point->food_inspection_data) {
+                    $foodData = (array)$point->food_inspection_data;
+                    $newFoodData = new \stdClass();
+                    foreach ($foodData as $key => $value) {
+                        // Remove specific location fields from food_inspection_data itself
+                        if (in_array($key, ['latitude', 'longitude', 'location', 'lat', 'lng', 'gpsy', 'gpsx', 'y_latitude', 'x_longitude'])) {
+                            continue; 
                         }
-
-
+                        if ($key === 'licenseno') {
+                            $newFoodData->$key = md5((string)$value);
+                        } elseif (!empty($value) && !in_array($key, ['violdesc', 'viol_level', 'comments'])) {
+                            $newFoodData->$key = $restrictedMessage;
+                        } else {
+                            $newFoodData->$key = $value;
+                        }
+                    }
+                    $point->food_inspection_data = $newFoodData;
+                }
+                // Unset top-level lat/lng for this data point if it's a food inspection and user is not authed
+                unset($point->latitude);
+                unset($point->longitude);
+            }
             return $point;
         });
         
@@ -291,175 +280,4 @@ public function getRadialMapData(Request $request)
             'centralLocation' => $centralLocation,
         ]);
     }
-
-    private function getBoundingBox($lat, $lon, $radius)
-    {
-        $earthRadius = 3959;
-
-        $latDelta = rad2deg($radius / $earthRadius);
-        $lonDelta = rad2deg($radius / ($earthRadius * cos(deg2rad($lat))));
-
-        return [
-            'minLat' => $lat - $latDelta,
-            'maxLat' => $lat + $latDelta,
-            'minLon' => $lon - $lonDelta,
-            'maxLon' => $lon + $lonDelta,
-        ];
-    }
-
-    public function getCrimeDataForBoundingBox($boundingBox, $days, $language_codes)
-    {
-        Log::info('Fetching crime data within bounding box.', ['boundingBox' => $boundingBox, 'days' => $days]);
-
-        $startDate = Carbon::now()->subDays($days)->toDateString();
-
-        $query = CrimeData::whereBetween('lat', [$boundingBox['minLat'], $boundingBox['maxLat']])
-                          ->whereBetween('long', [$boundingBox['minLon'], $boundingBox['maxLon']])
-                          ->where('occurred_on_date', '>=', $startDate)
-                            ->whereIn('language_code', $language_codes);
-
-        $crimeData = $query->get();
-
-        Log::info('Crime data query executed.', ['rowsFetched' => $crimeData->count()]);
-
-        // Transform data for the map
-        return $crimeData->map(function ($crime) {
-            // Convert crime object to an array and exclude the latitude, longitude, and date fields
-            $info = Arr::except($crime->toArray(), ['lat', 'long', 'occurred_on_date', 'created_at', 'updated_at', 'location', 'offense_code_group']);
-        
-            return [
-                'latitude' => $crime->lat,
-                'longitude' => $crime->long,
-                'date' => $crime->occurred_on_date,
-                'type' => 'Crime',
-                'info' => $info,
-            ];
-        });
-    }
-
-    public function getThreeOneOneCaseDataForBoundingBox($boundingBox, $days, $language_codes)
-    {
-        Log::info('Fetching 311 case data within bounding box.', ['boundingBox' => $boundingBox, 'days' => $days]);
-
-        $startDate = Carbon::now()->subDays($days)->toDateString();
-
-
-
-        $query = ThreeOneOneCase::whereBetween('latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-            ->whereBetween('longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-            ->where('open_dt', '>=', $startDate)
-            ->whereIn('language_code', $language_codes);
-    
-        $cases = $query->get();
-
-        Log::info('311 case data query executed.', ['rowsFetched' => $cases->count()]);
-
-        // Transform data for the map
-        return $cases->map(function ($case) {
-            // Convert case object to an array and exclude the latitude, longitude, and date fields
-            $info = Arr::except($case->toArray(), ['latitude', 'longitude', 'open_dt','checksum']);
-        
-            return [
-                'latitude' => $case->latitude,
-                'longitude' => $case->longitude,
-                'date' => $case->open_dt,
-                'type' => '311 Case',
-                'info' => $info,
-            ];
-        });
-    }
-
-    public function getBuildingPermitsForBoundingBox($boundingBox, $days, $language_codes)
-    {
-        Log::info('Fetching building permits within bounding box.', ['boundingBox' => $boundingBox, 'days' => $days]);
-
-        $startDate = Carbon::now()->subDays($days)->toDateString();
-
-        $buildingPermits = BuildingPermit::whereBetween('y_latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-                                         ->whereBetween('x_longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-                                         ->where('issued_date', '>=', $startDate)
-                                            ->whereIn('language_code', $language_codes)
-                                            ->get();
-
-        Log::info('Building permits data query executed.', ['rowsFetched' => $buildingPermits->count()]);
-
-        // Transform data for the map
-        return $buildingPermits->map(function ($permit) {
-            // Convert permit object to an array and exclude the latitude, longitude, and date fields
-            $info = Arr::except($permit->toArray(), ['y_latitude', 'x_longitude', 'issued_date', 'applicant']);
-
-            return [
-                'latitude' => $permit->y_latitude,
-                'longitude' => $permit->x_longitude,
-                'date' => $permit->issued_date,
-                'type' => 'Building Permit',
-                'info' => $info,
-            ];
-        });
-
-    }
-
-    public function getPropertyViolationsForBoundingBox($boundingBox, $days, $language_codes)
-    {
-        Log::info('Fetching property violations within bounding box.', ['boundingBox' => $boundingBox, 'days' => $days]);
-
-        $startDate = Carbon::now()->subDays($days)->toDateString();
-
-        $violations = PropertyViolation::whereBetween('latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-                                         ->whereBetween('longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-                                         ->where('status_dttm', '>=', $startDate)
-                                            ->whereIn('language_code', $language_codes)
-                                          ->get();
-
-        Log::info('Property violations data query executed.', ['rowsFetched' => $violations->count()]);
-
-        // Transform data for the map
-        return $violations->map(function ($violation) {
-            // Convert violation object to an array and exclude the latitude, longitude, and date fields
-            $info = Arr::except($violation->toArray(), ['latitude', 'longitude', 'status_dttm', 'created_at', 'updated_at']);
-
-            return [
-                'latitude' => $violation->latitude,
-                'longitude' => $violation->longitude,
-                'date' => $violation->status_dttm,
-                'type' => 'Property Violation',
-                'info' => $info,
-            ];
-        });
-
-    }
-
-
-    
-    public function getConstructionOffHoursForBoundingBox($boundingBox, $days)
-    {
-        Log::info('Fetching construction off hours within bounding box.', ['boundingBox' => $boundingBox, 'days' => $days]);
-
-        $startDate = Carbon::now()->subDays($days)->toDateString();
-        $endDate = Carbon::now()->addDays($days)->toDateString();
-
-        $offHours = ConstructionOffHour::whereBetween('latitude', [$boundingBox['minLat'], $boundingBox['maxLat']])
-                                            ->whereBetween('longitude', [$boundingBox['minLon'], $boundingBox['maxLon']])
-                                            ->where('start_datetime', '>=', $startDate)->where('start_datetime', '<', $endDate)
-                                            ->get();
-
-        Log::info('Construction off hours data query executed.', ['rowsFetched' => $offHours->count()]);
-
-        // Transform data for the map
-        return $offHours->map(function ($offHour) {
-            // Convert offHour object to an array and exclude the latitude, longitude, and date fields
-            $info = Arr::except($offHour->toArray(), ['latitude', 'longitude', 'created_at', 'updated_at']);
-            //convert start datetime to date
-            $start_date = Carbon::parse($offHour->start_datetime)->toDateString();
-
-            return [
-                'latitude' => $offHour->latitude,
-                'longitude' => $offHour->longitude,
-                'date' => $start_date,
-                'type' => 'Construction Off Hour',
-                'info' => $info,
-            ];
-        });
-
-    }
 }
diff --git a/app/Http/Controllers/LocationController.php b/app/Http/Controllers/LocationController.php
index f7afaeb..4f869d3 100644
--- a/app/Http/Controllers/LocationController.php
+++ b/app/Http/Controllers/LocationController.php
@@ -33,13 +33,30 @@ public function store(Request $request)
             'language' => 'nullable|string',
         ]);
 
-        // check if the user has reached the maximum number of locations
-        if (Auth::user()->locations()->count() >= 3) {
-            return response()->json(['error' => 'Maximum number of locations reached'], 403);
+        $user = Auth::user();
+        if (!$user) {
+            return response()->json(['error' => 'Unauthenticated.'], 401);
+        }
+
+        $currentLocationCount = $user->locations()->count();
+        $maxLocations = 1; // Default for free users
+
+        if ($user->subscribed('default')) {
+            $subscription = $user->subscription('default');
+            if ($subscription && $subscription->stripe_price === config('stripe.prices.basic_plan')) {
+                $maxLocations = 3;
+            } elseif ($subscription && $subscription->stripe_price === config('stripe.prices.pro_plan')) {
+                $maxLocations = 10;
+            }
+        }
+        // If user is authenticated but not subscribed to basic or pro, they are on the free tier (maxLocations remains 1)
+
+        if ($currentLocationCount >= $maxLocations) {
+            return response()->json(['error' => 'Maximum number of locations reached for your current plan.'], 403);
         }
 
         // Associate the location with the authenticated user
-        $location = Auth::user()->locations()->create($validated);
+        $location = $user->locations()->create($validated);
 
         return response()->json($location, 201);
     }
diff --git a/app/Http/Controllers/MetricsController.php b/app/Http/Controllers/MetricsController.php
new file mode 100644
index 0000000..ac2d94a
--- /dev/null
+++ b/app/Http/Controllers/MetricsController.php
@@ -0,0 +1,176 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use Illuminate\Http\Request;
+use Inertia\Inertia;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+use Illuminate\Support\Facades\Cache; // Added
+use Illuminate\Support\Facades\Log; // Added
+
+// Import Models
+use App\Models\CrimeData;
+use App\Models\ThreeOneOneCase;
+use App\Models\FoodInspection;
+use App\Models\PropertyViolation;
+use App\Models\BuildingPermit;
+
+class MetricsController extends Controller
+{
+    protected $mappableModels = [
+        CrimeData::class,
+        ThreeOneOneCase::class,
+        FoodInspection::class,
+        PropertyViolation::class,
+        BuildingPermit::class,
+    ];
+
+    public function index()
+    {
+        $allMetrics = [];
+        $overallPageLastUpdated = null;
+        $cacheTtlHours = 24; // Define a TTL for cache entries, e.g., 24 hours
+
+        foreach ($this->mappableModels as $modelClassString) {
+            $modelInstance = new $modelClassString();
+            $modelName = $modelInstance::getModelNameForHumans();
+            $dateField = $modelInstance::getDateField(); // Can be null if not applicable
+
+            $metricsDataCacheKey = "metrics:data:{$modelName}";
+            $metricsDbMaxDateCacheKey = "metrics:db_max_date:{$modelName}"; // Stores the MAX(date_field) at the time of caching
+            $metricsCacheWriteTimeKey = "metrics:cache_write_time:{$modelName}"; // Stores when this cache entry was written
+
+            $cachedMetrics = Cache::get($metricsDataCacheKey);
+            $cachedDbMaxDateString = Cache::get($metricsDbMaxDateCacheKey);
+            $cachedWriteTimeString = Cache::get($metricsCacheWriteTimeKey);
+
+            $currentTotalRecords = $modelInstance::count();
+            $currentDbMaxDateString = null;
+            if ($dateField && $currentTotalRecords > 0) {
+                try {
+                    $currentDbMaxDate = $modelInstance::max($dateField);
+                    $currentDbMaxDateString = $currentDbMaxDate ? Carbon::parse($currentDbMaxDate)->toIso8601String() : null;
+                } catch (\Exception $e) {
+                    Log::error("Error fetching max date for {$modelName}: " . $e->getMessage());
+                    // Proceed without currentDbMaxDateString, likely forcing a recalc or relying on older cache
+                }
+            }
+
+            $recalculateMetrics = true;
+            $modelMetricsData = []; // Holds the final metrics for this model
+            $currentModelUpdateTime = null;
+
+            if ($cachedMetrics !== null) {
+                if ($dateField && $currentTotalRecords > 0) {
+                    // Cache is fresh if the DB's max date matches the one stored with the cache
+                    // OR if current DB max date is somehow older/null (e.g. data cleared) and we have a cached version based on a previous max date.
+                    if ($cachedDbMaxDateString === $currentDbMaxDateString) {
+                        $recalculateMetrics = false;
+                    }
+                    // If $cachedDbMaxDateString is not null, but $currentDbMaxDateString is null (data deleted),
+                    // we should recalculate to reflect that there's no data. So $recalculateMetrics remains true.
+                } else {
+                    // No date field or no current records. Invalidation based on max date is not applicable.
+                    // Rely on standard cache TTL. If cache exists, use it.
+                    $recalculateMetrics = false;
+                }
+            }
+
+            if ($recalculateMetrics) {
+                $newlyCalculatedMetrics = ['modelName' => $modelName, 'tableName' => $modelInstance->getTable()];
+                $newlyCalculatedMetrics['totalRecords'] = $currentTotalRecords;
+
+                if ($newlyCalculatedMetrics['totalRecords'] > 0 && $dateField) {
+                    try {
+                        $minDateVal = $modelInstance::min($dateField);
+                        $newlyCalculatedMetrics['minDate'] = $minDateVal ? Carbon::parse($minDateVal)->toDateString() : null;
+                        $newlyCalculatedMetrics['maxDate'] = $currentDbMaxDateString ? Carbon::parse($currentDbMaxDateString)->toDateString() : null;
+
+                        $newlyCalculatedMetrics['recordsLast30Days'] = $modelInstance::where($dateField, '>=', Carbon::now()->subDays(30))->count();
+                        $newlyCalculatedMetrics['recordsLast90Days'] = $modelInstance::where($dateField, '>=', Carbon::now()->subDays(90))->count();
+                        $newlyCalculatedMetrics['recordsLast1Year'] = $modelInstance::where($dateField, '>=', Carbon::now()->subYear())->count();
+                    } catch (\Exception $e) {
+                        Log::error("Error calculating general date metrics for {$modelName}: " . $e->getMessage());
+                        $newlyCalculatedMetrics['minDate'] = 'Error';
+                        $newlyCalculatedMetrics['maxDate'] = 'Error';
+                        $newlyCalculatedMetrics['recordsLast30Days'] = 0;
+                        $newlyCalculatedMetrics['recordsLast90Days'] = 0;
+                        $newlyCalculatedMetrics['recordsLast1Year'] = 0;
+                    }
+                } else {
+                    $newlyCalculatedMetrics['minDate'] = null;
+                    $newlyCalculatedMetrics['maxDate'] = null;
+                    $newlyCalculatedMetrics['recordsLast30Days'] = 0;
+                    $newlyCalculatedMetrics['recordsLast90Days'] = 0;
+                    $newlyCalculatedMetrics['recordsLast1Year'] = 0;
+                }
+
+                // Model-Specific Metrics
+                if ($modelInstance instanceof CrimeData) {
+                    $newlyCalculatedMetrics['offenseGroupDistribution'] = $modelInstance::select('offense_description', DB::raw('count(*) as total'))
+                        ->whereNotNull('offense_description')->groupBy('offense_description')->orderBy('total', 'desc')->take(10)->get();
+                    $newlyCalculatedMetrics['shootingIncidents'] = $modelInstance::where(function($query) { $query->where('shooting', '1'); })->count();
+                } elseif ($modelInstance instanceof ThreeOneOneCase) {
+                    $newlyCalculatedMetrics['caseStatusDistribution'] = $modelInstance::select('case_status', DB::raw('count(*) as total'))
+                        ->whereNotNull('case_status')->groupBy('case_status')->orderBy('total', 'desc')->take(5)->get();
+                    $avgClosure = $modelInstance::whereNotNull('closed_dt')->whereNotNull('open_dt')
+                        ->select(DB::raw('AVG(TIMESTAMPDIFF(HOUR, open_dt, closed_dt)) as avg_closure_hours'))->value('avg_closure_hours');
+                    $newlyCalculatedMetrics['averageClosureTimeHours'] = $avgClosure ? round($avgClosure, 2) : null;
+                } elseif ($modelInstance instanceof FoodInspection) {
+                    $newlyCalculatedMetrics['resultDistribution'] = $modelInstance::select('result', DB::raw('count(*) as total'))
+                        ->whereNotNull('result')->groupBy('result')->orderBy('total', 'desc')->take(5)->get();
+                    $distribution = $modelInstance::select(DB::raw("CASE WHEN TRIM(LOWER(viol_level)) = '*' THEN 'Low' WHEN TRIM(LOWER(viol_level)) = '**' THEN 'Medium' WHEN TRIM(LOWER(viol_level)) = '***' THEN 'High' WHEN TRIM(LOWER(viol_level)) = 'low' THEN 'Low' WHEN TRIM(LOWER(viol_level)) = 'medium' THEN 'Medium' WHEN TRIM(LOWER(viol_level)) = 'high' THEN 'High' ELSE 'Other' END as category_name"), DB::raw("COUNT(*) as total_count"))
+                        ->whereNotNull('viol_level')->whereRaw("TRIM(LOWER(viol_level)) != ''")->groupBy('category_name')->orderBy('total_count', 'desc')->take(4)->get();
+                    $newlyCalculatedMetrics['violationLevelDistribution'] = $distribution->map(function ($item) { $m = new \stdClass(); $m->viol_level = $item->category_name; $m->total = $item->total_count; return $m; });
+                } elseif ($modelInstance instanceof PropertyViolation) {
+                    $newlyCalculatedMetrics['statusDistribution'] = $modelInstance::select('status', DB::raw('count(*) as total'))
+                        ->whereNotNull('status')->groupBy('status')->orderBy('total', 'desc')->take(5)->get();
+                    $newlyCalculatedMetrics['topViolationCodes'] = $modelInstance::select('code', 'description', DB::raw('count(*) as total'))
+                        ->whereNotNull('code')->groupBy('code', 'description')->orderBy('total', 'desc')->take(10)->get();
+                } elseif ($modelInstance instanceof BuildingPermit) {
+                    $newlyCalculatedMetrics['workTypeDistribution'] = $modelInstance::select('worktype', DB::raw('count(*) as total'))
+                        ->whereNotNull('worktype')->groupBy('worktype')->orderBy('total', 'desc')->take(10)->get();
+                    $newlyCalculatedMetrics['permitStatusDistribution'] = $modelInstance::select('status', DB::raw('count(*) as total'))
+                        ->whereNotNull('status')->groupBy('status')->orderBy('total', 'desc')->take(5)->get();
+                    $newlyCalculatedMetrics['totalDeclaredValuation'] = $modelInstance::sum('declared_valuation');
+                }
+                // --- End of metrics calculation block ---
+
+                Cache::put($metricsDataCacheKey, $newlyCalculatedMetrics, now()->addHours($cacheTtlHours));
+                Cache::put($metricsCacheWriteTimeKey, Carbon::now()->toIso8601String(), now()->addHours($cacheTtlHours));
+                if ($dateField && $currentTotalRecords > 0) {
+                    Cache::put($metricsDbMaxDateCacheKey, $currentDbMaxDateString, now()->addHours($cacheTtlHours));
+                } else {
+                    Cache::forget($metricsDbMaxDateCacheKey);
+                }
+                
+                $modelMetricsData = $newlyCalculatedMetrics;
+                $currentModelUpdateTime = Carbon::now();
+            } else {
+                $modelMetricsData = $cachedMetrics;
+                if ($dateField && $currentTotalRecords > 0 && $cachedDbMaxDateString) {
+                    $currentModelUpdateTime = Carbon::parse($cachedDbMaxDateString);
+                } elseif ($cachedWriteTimeString) {
+                    $currentModelUpdateTime = Carbon::parse($cachedWriteTimeString);
+                } else {
+                    // Fallback if cache is inconsistent
+                    $currentModelUpdateTime = Carbon::createFromTimestamp(0); // Treat as very old
+                }
+            }
+
+            $allMetrics[] = $modelMetricsData;
+
+            if ($currentModelUpdateTime && (!isset($overallPageLastUpdated) || $currentModelUpdateTime->gt($overallPageLastUpdated))) {
+                $overallPageLastUpdated = $currentModelUpdateTime;
+            }
+        }
+
+        $pageLastUpdatedTimestamp = $overallPageLastUpdated ? $overallPageLastUpdated->toDateTimeString() : Carbon::now()->toDateTimeString();
+
+        return Inertia::render('DataMetrics', [
+            'metricsData' => $allMetrics,
+            'lastUpdated' => $pageLastUpdatedTimestamp,
+        ]);
+    }
+}
diff --git a/app/Http/Controllers/ProfileController.php b/app/Http/Controllers/ProfileController.php
index 73401c7..8faad59 100644
--- a/app/Http/Controllers/ProfileController.php
+++ b/app/Http/Controllers/ProfileController.php
@@ -10,6 +10,8 @@
 use Illuminate\Support\Facades\Redirect;
 use Inertia\Inertia;
 use Inertia\Response;
+use Illuminate\Support\Facades\Config;
+use Laravel\Cashier\Subscription; // Import Subscription model
 
 class ProfileController extends Controller
 {
@@ -18,9 +20,70 @@ class ProfileController extends Controller
      */
     public function edit(Request $request): Response
     {
+        $user = $request->user();
+        $subscriptionsDetailsList = [];
+        $socialLoginDetails = [
+            'providerName' => $user->provider_name,
+            'providerAvatar' => $user->provider_avatar,
+        ];
+
+        if ($user) {
+            if ($user->subscriptions->isNotEmpty()) {
+                foreach ($user->subscriptions as $subscription) {
+                    /** @var Subscription $subscription */
+                    $planName = 'Unknown Plan'; // Default plan name
+                    $planKey = 'unknown';
+
+                    // Determine plan name and key based on Stripe price ID
+                    if ($subscription->stripe_price === config('stripe.prices.basic_plan')) {
+                        $planName = 'Resident Awareness'; // Or fetch from translations/config
+                        $planKey = 'basic';
+                    } elseif ($subscription->stripe_price === config('stripe.prices.pro_plan')) {
+                        $planName = 'Pro Insights'; // Or fetch from translations/config
+                        $planKey = 'pro';
+                    }
+                    // Add more plans here if necessary
+
+                    $subscriptionsDetailsList[] = [
+                        'name' => $planKey, // The name of the subscription (e.g., 'default', 'premium')
+                        'planName' => $planName,
+                        'planKey' => $planKey, // To help Vue component map to translations if needed
+                        'status' => $subscription->stripe_status,
+                        'isActive' => $subscription->active(),
+                        'isOnTrial' => $subscription->onTrial(),
+                        'isCancelled' => $subscription->cancelled(),
+                        'isOnGracePeriod' => $subscription->onGracePeriod(),
+                        'endsAt' => $subscription->ends_at ? date('F j, Y', strtotime($subscription->ends_at)) : null,
+                        'trialEndsAt' => $subscription->trial_ends_at ? (date('F j, Y', strtotime($subscription->trial_ends_at))) : null,
+                        'currentPeriodEnd' => $subscription->active() && !$subscription->onTrial() && !$subscription->cancelled() ? date('F j, Y', $subscription->current_period_end) : null,
+                    ];
+                }
+            }
+
+            // If no subscriptions, add a default "free tier" representation
+            if (empty($subscriptionsDetailsList)) {
+                $subscriptionsDetailsList[] = [
+                    'name' => 'free_tier',
+                    'planName' => 'Registered User Features (Free)', // Or fetch from translations/config
+                    'planKey' => 'free',
+                    'status' => 'free',
+                    'isActive' => false,
+                    'isOnTrial' => false,
+                    'isCancelled' => false,
+                    'isOnGracePeriod' => false,
+                    'endsAt' => null,
+                    'trialEndsAt' => null,
+                    'currentPeriodEnd' => null,
+                ];
+            }
+        }
+
         return Inertia::render('Profile/Edit', [
-            'mustVerifyEmail' => $request->user() instanceof MustVerifyEmail,
+            'mustVerifyEmail' => $user instanceof MustVerifyEmail,
             'status' => session('status'),
+            // 'currentPlanKey' => $currentPlanKey, // This is now ambiguous, replaced by planKey within each subscription item
+            'subscriptionsList' => $subscriptionsDetailsList, // Changed from subscriptionDetails
+            'socialLoginDetails' => $socialLoginDetails,
         ]);
     }
 
diff --git a/app/Http/Controllers/ReportController.php b/app/Http/Controllers/ReportController.php
new file mode 100644
index 0000000..731a991
--- /dev/null
+++ b/app/Http/Controllers/ReportController.php
@@ -0,0 +1,65 @@
+<?php
+
+namespace App\Http\Controllers;
+
+use App\Models\Report;
+use Illuminate\Http\Request;
+use Illuminate\Support\Facades\Auth;
+use Inertia\Inertia;
+use Illuminate\Support\Facades\Gate;
+use Symfony\Component\HttpFoundation\StreamedResponse;
+
+class ReportController extends Controller
+{
+    public function index(Request $request)
+    {
+        $reports = Auth::user()->reports()
+            ->with('location:id,name,address') // Eager load location with specific columns
+            ->orderBy('generated_at', 'desc')
+            ->paginate(10)
+            ->through(fn ($report) => [ // Transform data for the view
+                'id' => $report->id,
+                'title' => $report->title,
+                'location_name' => $report->location ? ($report->location->name ?? $report->location->address) : 'N/A',
+                'generated_at' => $report->generated_at->format('F j, Y, g:i a'),
+                'view_url' => route('reports.show', $report),
+                'download_url' => route('reports.download', $report),
+            ]);
+
+        return Inertia::render('Reports/Index', [
+            'reports' => $reports,
+        ]);
+    }
+
+    public function show(Report $report)
+    {
+        Gate::authorize('view', $report); // Assumes you'll create a ReportPolicy
+
+        return Inertia::render('Reports/Show', [
+            'report' => [
+                'id' => $report->id,
+                'title' => $report->title,
+                'content' => $report->content, // Consider using a Markdown parser in Vue
+                'location_name' => $report->location ? ($report->location->name ?? $report->location->address) : 'N/A',
+                'generated_at' => $report->generated_at->format('F j, Y, g:i a'),
+                'download_url' => route('reports.download', $report),
+            ],
+        ]);
+    }
+
+    public function download(Report $report)
+    {
+        Gate::authorize('download', $report); // Assumes you'll create a ReportPolicy
+
+        $filename = str_replace([' ', '/', '\\', ':', '*'], '_', $report->title) . '.md';
+
+        $headers = [
+            'Content-Type' => 'text/markdown; charset=UTF-8',
+            'Content-Disposition' => 'attachment; filename="' . $filename . '"',
+        ];
+
+        return new StreamedResponse(function () use ($report) {
+            echo $report->content;
+        }, 200, $headers);
+    }
+}
diff --git a/app/Http/Controllers/ThreeOneOneCaseController.php b/app/Http/Controllers/ThreeOneOneCaseController.php
index 15bfad6..e26195a 100644
--- a/app/Http/Controllers/ThreeOneOneCaseController.php
+++ b/app/Http/Controllers/ThreeOneOneCaseController.php
@@ -8,36 +8,10 @@
 use Illuminate\Support\Facades\Log;
 use Illuminate\Support\Facades\Http;
 use Illuminate\Support\Facades\Config;
+use Illuminate\Support\Facades\Cache;
 
 class ThreeOneOneCaseController extends Controller
 {
-    /**
-     * Display a listing of the cases with associated predictions.
-     *
-     * @return \Inertia\Response
-     */
-    public function index(Request $request)
-    {
-        $searchTerm = $request->get('searchTerm', '');
-        // Log::debug("doing a search for $searchTerm");
-        $cases = ThreeOneOneCase::where(function($query) use ($searchTerm) {
-                foreach (ThreeOneOneCase::SEARCHABLE_COLUMNS as $column) {
-                    $query->orWhere($column, 'LIKE', "%{$searchTerm}%");
-                }
-            })
-            // only include cases with predictions
-            ->whereHas('predictions', function($query) {
-                $query->where('prediction_date', '>', '2021-01-01');
-            })
-            ->orderBy('open_dt', 'desc')
-            ->take(50)
-            ->get();
-
-        return Inertia::render('ThreeOneOneCaseList', [
-            'cases' => $cases,
-            'search' => $searchTerm
-        ]);
-    }
 
     public function indexnofilter(Request $request)
     {
@@ -66,6 +40,13 @@ public function indexnofilter(Request $request)
      */
     public function getLiveCaseDetails(Request $request, $caseEnquiryId)
     {
+        $cacheKey = "case_details_{$caseEnquiryId}";
+        $cachedData = Cache::get($cacheKey);
+
+        if ($cachedData) {
+            return response()->json(['data' => $cachedData]);
+        }
+
         $apiKey = Config::get('services.bostongov.api_key');
         $baseUrl = Config::get('services.bostongov.base_url', 'https://311.boston.gov/open311/v2');
 
@@ -88,12 +69,14 @@ public function getLiveCaseDetails(Request $request, $caseEnquiryId)
 
             if (empty($data) || !is_array($data)) {
                 Log::warning("Boston 311 API returned empty or invalid data for case ID {$caseEnquiryId}. Body: " . $response->body());
-                // It's possible an empty array is a valid "not found" response from Open311 for a specific ID.
-                // Let the frontend decide how to interpret an empty array.
-                // If the API guarantees an array with one item or an error, this could be a 404.
-                // For now, return the empty data.
+                Cache::put($cacheKey, 'no_data', now()->addMinutes(10)); // Cache "no data" marker for 10 minutes
+                return response()->json(['data' => []]);
             }
-            
+
+            if (is_array($data)) {
+                Cache::put($cacheKey, $data, now()->addMinutes(10)); // Cache for 10 minutes
+            }
+
             return response()->json(['data' => $data]);
 
         } catch (\Illuminate\Http\Client\ConnectionException $e) {
@@ -115,19 +98,16 @@ public function getMultipleLiveCaseDetails(Request $request)
     {
         $validated = $request->validate([
             'case_enquiry_ids' => 'required|array',
+            'case_enquiry_ids.*' => 'string', // Ensure IDs are strings
         ]);
 
         $caseEnquiryIds = $validated['case_enquiry_ids'];
 
         if (empty($caseEnquiryIds)) {
-            return response()->json(['error' => 'No case enquiry IDs provided.'], 400);
+            return response()->json(['data' => []]); // Return empty data if no IDs provided
         }
-        // deduplicate the case enquiry IDs
-        $caseEnquiryIds = array_unique($caseEnquiryIds);
-
-        // The Boston API expects a comma-separated string for multiple service_request_id
-        $serviceRequestIdsString = implode(',', $caseEnquiryIds);
 
+        $caseEnquiryIds = array_values(array_unique($caseEnquiryIds)); // Deduplicate and reindex
         $apiKey = Config::get('services.bostongov.api_key');
         $baseUrl = Config::get('services.bostongov.base_url', 'https://311.boston.gov/open311/v2');
 
@@ -136,37 +116,88 @@ public function getMultipleLiveCaseDetails(Request $request)
             return response()->json(['error' => 'Service configuration error.'], 500);
         }
 
-        // Construct the URL as per Open311 spec for multiple requests
-        // e.g., https://311.boston.gov/open311/v2/requests.json?api_key=YOUR_API_KEY&service_request_id=ID1,ID2,ID3
-        $apiUrl = "{$baseUrl}/requests.json?api_key={$apiKey}&service_request_id={$serviceRequestIdsString}";
+        $allCaseData = [];
+        $missingCaseIds = [];
 
-        try {
-            $response = Http::timeout(30)->get($apiUrl); // Increased timeout for potentially larger response
+        // Check cache for each ID
+        foreach ($caseEnquiryIds as $caseEnquiryId) {
+            $cacheKey = "case_details_{$caseEnquiryId}";
+            $cachedData = Cache::get($cacheKey);
 
-            if ($response->failed()) {
-                Log::error("Boston 311 API request failed for multiple case IDs. Status: " . $response->status() . " Body: " . $response->body());
-                return response()->json(['error' => 'Failed to fetch data from Boston 311 API for multiple cases.', 'details' => $response->json() ?: $response->body()], $response->status());
+            if ($cachedData) {
+                if ($cachedData === 'no_data') {
+                    $allCaseData[] = []; // Add empty data for cases with "no data" cached
+                    continue;
+                }
+                $allCaseData[] = $cachedData;
+            } else {
+                $missingCaseIds[] = $caseEnquiryId;
             }
+        }
 
-            $data = $response->json();
-
-            // According to Open311, the response should be an array of service_requests.
-            // If $data is null or not an array, it might indicate an issue or an empty valid response.
-            if (!is_array($data)) {
-                 Log::warning("Boston 311 API returned non-array data for multiple case IDs. Body: " . $response->body());
-                 // Depending on API behavior, an empty array might be valid if no cases are found or all are invalid.
-                 // If an error is expected, this might need adjustment.
-                 // For now, return what we got, which might be an empty array if $data was null and json() produced it.
+        //log stats on misses and hits
+        Log::info("Cache hits: " . (count($caseEnquiryIds) - count($missingCaseIds)) . ", Cache misses: " . count($missingCaseIds));
+
+        // Fetch data for missing IDs
+        if (!empty($missingCaseIds)) {
+            $chunkedCaseEnquiryIds = array_chunk($missingCaseIds, 50); // API limit of 50 per request
+
+            foreach ($chunkedCaseEnquiryIds as $index => $chunk) {
+                $serviceRequestIdsString = implode(',', $chunk);
+                $apiUrl = "{$baseUrl}/requests.json?api_key={$apiKey}&service_request_id={$serviceRequestIdsString}";
+
+                try {
+                    $response = Http::timeout(30)->get($apiUrl);
+
+                    if ($response->failed()) {
+                        Log::error("Boston 311 API request failed for chunk of case IDs. Status: " . $response->status() . " Body: " . $response->body());
+                        return response()->json(['error' => 'Failed to fetch data from Boston 311 API for a batch of cases.', 'details' => $response->json() ?: $response->body()], $response->status());
+                    }
+
+                    $data = $response->json();
+
+                    if (is_array($data)) {
+                        $returnedCaseIds = [];
+                        foreach ($data as $case) {
+                            $caseId = $case['service_request_id'] ?? null;
+                            if ($caseId) {
+                                $cacheKey = "case_details_{$caseId}";
+                                Cache::put($cacheKey, $case, now()->addMinutes(10)); // Cache for 10 minutes
+                                $allCaseData[] = $case;
+                                $returnedCaseIds[] = $caseId;
+                            }
+                        }
+
+                        // Identify missing case IDs and cache "no data" for them
+                        $missingFromResponse = array_diff($chunk, $returnedCaseIds);
+                        foreach ($missingFromResponse as $missingCaseId) {
+                            $cacheKey = "case_details_{$missingCaseId}";
+                            Cache::put($cacheKey, 'no_data', now()->addMinutes(10)); // Cache "no data" marker for 10 minutes
+                            $allCaseData[] = []; // Add empty data for cases with "no data"
+                        }
+                    } else {
+                        foreach ($chunk as $caseId) {
+                            $cacheKey = "case_details_{$caseId}";
+                            Cache::put($cacheKey, 'no_data', now()->addMinutes(10)); // Cache "no data" marker for 10 minutes
+                            $allCaseData[] = []; // Add empty data for cases with "no data"
+                        }
+                    }
+
+                    // Rate limit: sleep for 1 second if there are more chunks to process
+                    if ($index < count($chunkedCaseEnquiryIds) - 1) {
+                        sleep(1);
+                    }
+
+                } catch (\Illuminate\Http\Client\ConnectionException $e) {
+                    Log::error("Boston 311 API connection error for chunk of case IDs: " . $e->getMessage());
+                    return response()->json(['error' => 'Could not connect to Boston 311 API.'], 503);
+                } catch (\Exception $e) {
+                    Log::error("Error fetching live data for chunk of case IDs: " . $e->getMessage());
+                    return response()->json(['error' => 'An unexpected error occurred while fetching live data for a batch of cases.'], 500);
+                }
             }
-            
-            return response()->json(['data' => $data]);
-
-        } catch (\Illuminate\Http\Client\ConnectionException $e) {
-            Log::error("Boston 311 API connection error for multiple case IDs: " . $e->getMessage());
-            return response()->json(['error' => 'Could not connect to Boston 311 API.'], 503);
-        } catch (\Exception $e) {
-            Log::error("Error fetching live data for multiple case IDs: " . $e->getMessage());
-            return response()->json(['error' => 'An unexpected error occurred while fetching live data for multiple cases.'], 500);
         }
+
+        return response()->json(['data' => $allCaseData]);
     }
 }
diff --git a/app/Http/Middleware/HandleInertiaRequests.php b/app/Http/Middleware/HandleInertiaRequests.php
index 73266e2..ce96404 100644
--- a/app/Http/Middleware/HandleInertiaRequests.php
+++ b/app/Http/Middleware/HandleInertiaRequests.php
@@ -4,6 +4,8 @@
 
 use Illuminate\Http\Request;
 use Inertia\Middleware;
+use Illuminate\Support\Facades\Auth;
+use App\Models\User; // Ensure User model is imported
 use Tightenco\Ziggy\Ziggy;
 
 class HandleInertiaRequests extends Middleware
@@ -30,15 +32,65 @@ public function version(Request $request): string|null
      */
     public function share(Request $request): array
     {
+        $user = $request->user();
+        $currentPlanDetails = null;
+        $avatarUrl = null;
+
+        if ($user) {
+            /** @var User $user */
+            $avatarUrl = $user->provider_avatar ?? $user->avatar; // Assuming 'avatar' is another field or provider_avatar is used
+
+            // Determine current plan
+            // Check for active or onGracePeriod subscriptions first
+            $activeSubscription = $user->subscriptions()
+                                    ->where(function ($query) {
+                                        $query->active()->orWhere(function ($q) {
+                                            $q->onGracePeriod();
+                                        });
+                                    })
+                                    ->orderBy('created_at', 'desc') // Get the latest if multiple somehow exist
+                                    ->first();
+
+            if ($activeSubscription) {
+                if ($activeSubscription->stripe_price === config('stripe.prices.basic_plan')) {
+                    $currentPlanDetails = ['key' => 'basic', 'name' => 'Resident Awareness'];
+                } elseif ($activeSubscription->stripe_price === config('stripe.prices.pro_plan')) {
+                    $currentPlanDetails = ['key' => 'pro', 'name' => 'Pro Insights'];
+                } else {
+                    // Fallback for unknown subscribed plan
+                    $currentPlanDetails = ['key' => 'subscribed', 'name' => 'Subscribed'];
+                }
+            } else {
+                // Authenticated but no active paid subscription means they are on the "free" tier
+                $currentPlanDetails = ['key' => 'free', 'name' => 'Registered User'];
+            }
+        } else {
+            // Not authenticated
+            $currentPlanDetails = ['key' => 'guest', 'name' => 'Guest'];
+        }
+
         return array_merge(parent::share($request), [
-            'auth' => [
-                'user' => $request->user(),
-            ],
+            'auth' => function () use ($user, $avatarUrl, $currentPlanDetails) {
+                return [
+                    'user' => $user ? [
+                        'id' => $user->id,
+                        'name' => $user->name,
+                        'email' => $user->email,
+                        'avatar_url' => $avatarUrl,
+                        // Add other user properties you need globally
+                    ] : null,
+                    'currentPlan' => $currentPlanDetails,
+                ];
+            },
             'ziggy' => function () use ($request) {
                 return array_merge((new Ziggy)->toArray(), [
                     'location' => $request->url(),
                 ]);
             },
+            'flash' => [
+                'success' => fn () => $request->session()->get('success'),
+                'error' => fn () => $request->session()->get('error'),
+            ],
         ]);
     }
 }
diff --git a/app/Jobs/SendLocationReportEmail.php b/app/Jobs/SendLocationReportEmail.php
index 65a7d93..2ff9ea4 100644
--- a/app/Jobs/SendLocationReportEmail.php
+++ b/app/Jobs/SendLocationReportEmail.php
@@ -12,11 +12,14 @@
 use Illuminate\Contracts\Mail\Mailer;
 use App\Http\Controllers\GenericMapController;
 use App\Http\Controllers\ThreeOneOneCaseController; // Added import
+use App\Http\Controllers\AiAssistantController; // Added import
 use Illuminate\Http\Request;
-use GuzzleHttp\Client;
-use GuzzleHttp\Exception\RequestException;
-use GuzzleHttp\Exception\ClientException;
+// GuzzleHttp imports are no longer needed here if AiAssistantController handles its own client
+// use GuzzleHttp\Client;
+// use GuzzleHttp\Exception\RequestException;
+// use GuzzleHttp\Exception\ClientException;
 use Carbon\Carbon; // Import Carbon for date manipulation
+use App\Models\Report; // Added import
 
 class SendLocationReportEmail implements ShouldQueue
 {
@@ -24,6 +27,7 @@ class SendLocationReportEmail implements ShouldQueue
 
     protected $location;
     protected const MAX_DAYS_INDIVIDUAL_REPORTS = 7; // Number of recent days to report individually
+    protected $radiusForReport; // Store radius used for data fetching
 
     /**
      * Create a new job instance.
@@ -31,6 +35,7 @@ class SendLocationReportEmail implements ShouldQueue
     public function __construct(Location $location)
     {
         $this->location = $location;
+        $this->radiusForReport = 0.25; // Default, or could be from $location->report_radius if you add such a field
     }
 
     /**
@@ -48,7 +53,7 @@ public function handle(Mailer $mailer)
                     'longitude' => $this->location->longitude,
                     'address' => $this->location->address,
                 ],
-                'radius' => 0.25, // Default radius, or could be configurable per location
+                'radius' => $this->radiusForReport, // Use stored radius
                 // 'language_codes' => [$this->location->language] // If getRadialMapData uses this
             ]);
             $mapDataResponse = $mapController->getRadialMapData($simulatedRequest);
@@ -194,7 +199,7 @@ public function handle(Mailer $mailer)
                 // Determine the display date for the report section header
                 $displayDate = ($dateOrOlderKey === 'older')
                     ? "Older than " . self::MAX_DAYS_INDIVIDUAL_REPORTS . " days"
-                    : Carbon::parse($dateOrOlderKey)->isoFormat('LL'); // e.g., "May 12, 2025" (localized)
+                    : Carbon::parse($dateOrOlderKey)->locale($this->location->language)->isoFormat('LL'); // e.g., "May 12, 2025" (localized)
 
                 $dateReportParts[] = "### " . $displayDate . "\n"; // Date heading
 
@@ -205,13 +210,27 @@ public function handle(Mailer $mailer)
 
                     // Pass the date context to the prompt if needed, or just the type
                     $promptType = ($dateOrOlderKey === 'older') ? "$type (Older Events)" : "$type (Events from $displayDate)";
-                    $individualReport = $this->generateReportForType($promptType, $dataPointsForTypeAndDate);
-
-                    if ($individualReport && $individualReport !== 'No report generated.') {
+                    // Call the static method from AiAssistantController
+                    $individualReport = AiAssistantController::generateReportSection(
+                        $promptType,
+                        $dataPointsForTypeAndDate,
+                        $this->location->language
+                    );
+
+                    if ($individualReport && $individualReport !== 'No report generated.' && $individualReport !== 'Report content generation was blocked due to safety settings.' && !str_starts_with($individualReport, "Error generating report section for")) {
                         // Prepend the type to the individual report if not already included by Gemini
                         // (Gemini prompt asks for a report on $type, so it might already be there)
                         // For clarity, we can add it:
                         $dateReportParts[] = "#### $type\n" . $individualReport . "\n";
+                    } else if ($individualReport === 'Report content generation was blocked due to safety settings.' || str_starts_with($individualReport, "Error generating report section for")) {
+                        // Log the issue but don't add it to the user-facing report
+                        Log::warning("Report section generation issue for email: {$individualReport}", [
+                            'location_id' => $this->location->id,
+                            'type_context' => $promptType,
+                            'language' => $this->location->language
+                        ]);
+                         // Optionally add a generic placeholder to the report if needed
+                        // $dateReportParts[] = "#### $type\n_A report section for $type could not be generated at this time._\n";
                     }
                 }
 
@@ -222,7 +241,22 @@ public function handle(Mailer $mailer)
             }
 
             // --- 4. Combine All Daily Reports into a Single String ---
-            $finalReport = implode("\n---\n\n", $dailyCombinedReports); // Separate daily sections with a horizontal rule
+            $dailyReportContent = implode("\n---\n\n", $dailyCombinedReports); // Separate daily sections with a horizontal rule
+
+            // --- 4.5 Prepend Location Details to the Final Report ---
+            $locationDetailsHeader = "## Location Report: {$this->location->name_or_address}\n\n";
+            if ($this->location->name && $this->location->name !== $this->location->address) {
+                $locationDetailsHeader .= "- **Location Name:** {$this->location->name}\n";
+            }
+            $locationDetailsHeader .= "- **Address:** {$this->location->address}\n";
+            $locationDetailsHeader .= "- **Coordinates:** Latitude {$this->location->latitude}, Longitude {$this->location->longitude}\n";
+            $locationDetailsHeader .= "- **Radius Covered:** {$this->radiusForReport} miles\n";
+            $locationDetailsHeader .= "- **Report Language:** {$this->location->language}\n";
+            $locationDetailsHeader .= "- **Report Generated:** " . Carbon::now()->locale($this->location->language)->isoFormat('LLLL') . "\n\n";
+            $locationDetailsHeader .= "---\n\n";
+            
+            $finalReport = $locationDetailsHeader . $dailyReportContent;
+
 
             // Log the generated report details
             if ($this->location->user && $this->location->user->subscription('default')) {
@@ -234,13 +268,32 @@ public function handle(Mailer $mailer)
             }
 
 
-            // --- 5. Send Email (if there's a report to send)---
-            if (!empty($finalReport)) {
+            // --- 5. Save Report to Database (New Step) ---
+            if (!empty($finalReport) && $this->location->user) { // Check $finalReport, not $dailyReportContent
+                try {
+                    $reportDateForTitle = Carbon::now()->format('Y-m-d'); // Or use a date derived from the report content if more appropriate
+                    Report::create([
+                        'user_id' => $this->location->user_id,
+                        'location_id' => $this->location->id,
+                        'title' => "Location Report for {$this->location->name_or_address} - {$reportDateForTitle}",
+                        'content' => $finalReport, // Save the full report with header
+                        'generated_at' => Carbon::now(),
+                    ]);
+                    Log::info("Report saved to database for user: {$this->location->user->email}, location: {$this->location->address}");
+                } catch (\Exception $dbException) {
+                    Log::error("Failed to save report to database for user: {$this->location->user->email}, location: {$this->location->address}. Error: {$dbException->getMessage()}");
+                    // Decide if you want to proceed with email if DB save fails. For now, it continues.
+                }
+            }
+
+
+            // --- 6. Send Email (if there's a report to send)---
+            if (!empty($dailyReportContent)) { // Check if there was actual daily content, not just the header
                 $mailer->to($this->location->user->email)
-                       ->send(new \App\Mail\SendLocationReport($this->location, $finalReport));
+                       ->send(new \App\Mail\SendLocationReport($this->location, $finalReport)); // Send full report
                 Log::info("Report email sent to user: {$this->location->user->email} for location: {$this->location->address}");
             } else {
-                Log::info("No reports generated after date/type processing. No email was sent to {$this->location->user->email} for location: {$this->location->address}");
+                Log::info("No reports generated after date/type processing (empty dailyReportContent). No email was sent to {$this->location->user->email} for location: {$this->location->address}");
             }
 
         } catch (\Exception $e) {
@@ -250,103 +303,4 @@ public function handle(Mailer $mailer)
             // throw $e;
         }
     }
-
-    /**
-     * Generates a report for a specific type of data points using Gemini.
-     *
-     * @param string $typeContext A string describing the type and potentially the date context (e.g., "Crime (Events from May 12, 2025)")
-     * @param array $dataPoints Array of data point objects for this specific type and date.
-     * @return string The generated report snippet, or 'No report generated.'
-     */
-    private function generateReportForType(string $typeContext, array $dataPoints): string
-    {
-        if (empty($dataPoints)) {
-            return 'No report generated.'; // Should not happen if called correctly, but good safeguard
-        }
-
-        $apiKey = config('services.gemini.api_key');
-        //$url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$apiKey";
-        $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=$apiKey";
-        $client = new Client();
-
-        $contents = [];
-        // Add each data point as a separate user message part for Gemini to process
-        foreach ($dataPoints as $dataPoint) {
-            $contents[] = [
-                'role' => 'user',
-                'parts' => [
-                    ['text' => json_encode($dataPoint)], // Send the raw data point
-                ],
-            ];
-        }
-
-        // Add the system prompt as the final user message
-        $contents[] = [
-            'role' => 'user', // Treat system prompt as a user instruction in this context
-            'parts' => [
-                // Pass the specific type and date context to the system prompt
-                ['text' => $this->getSystemPromptForContext($typeContext)],
-            ],
-        ];
-
-        $requestBody = [
-            'contents' => $contents,
-            "generationConfig" => [
-                "temperature" => 0.7,
-                "maxOutputTokens" => 800, // Adjusted based on expected length per section
-            ]
-        ];
-
-        try {
-            $response = $client->post($url, [
-                'headers' => ['Content-Type' => 'application/json'],
-                'json' => $requestBody,
-            ]);
-
-            $responseBody = json_decode($response->getBody()->getContents(), true);
-
-            if (isset($responseBody['candidates'][0]['content']['parts'][0]['text'])) {
-                return trim($responseBody['candidates'][0]['content']['parts'][0]['text']);
-            } elseif (isset($responseBody['promptFeedback']['blockReason'])) {
-                 Log::warning("Gemini content generation blocked.", [
-                    'reason' => $responseBody['promptFeedback']['blockReason'],
-                    'safetyRatings' => $responseBody['promptFeedback']['safetyRatings'] ?? [],
-                    'typeContext' => $typeContext
-                ]);
-                return 'Report content generation was blocked due to safety settings.';
-            }
-            Log::warning("No text content found in Gemini response for type: $typeContext", ['responseBody' => $responseBody]);
-            return 'No report generated.';
-
-        } catch (RequestException | ClientException $e) {
-            Log::error("Guzzle Exception during Gemini call for type: $typeContext: " . $e->getMessage());
-            if ($e->hasResponse()) {
-                Log::error("Gemini Response Body: " . $e->getResponse()->getBody()->getContents());
-            }
-            // Don't throw here to allow other report parts to process, return an error message instead
-            return "Error generating report section for $typeContext.";
-        } catch (\Exception $e) {
-            Log::error("Error generating report section for $typeContext: " . $e->getMessage());
-            // Don't throw here
-            return "Error generating report section for $typeContext.";
-        }
-    }
-
-    /**
-     * Generates the system prompt for Gemini, customized for the data type and context.
-     *
-     * @param string $typeContext Description of the data (e.g., "Crime events from May 12, 2025")
-     * @return string
-     */
-    private function getSystemPromptForContext(string $typeContext): string
-    {
-        $basePrompt = "You are a helpful assistant. Generate a narrative summary in markdown format for the provided city operations data. ";
-        $languageInstruction = "The report MUST be entirely in **{$this->location->language}**. ";
-        $typeInstruction = "This section is specifically about: **{$typeContext}**. ";
-        $focusInstruction = "Focus ONLY on the data points provided in this current conversation turn for this specific section. ";
-        $formattingInstruction = "Summarize the incidents. Be factual and do not speculate. Do NOT include any disclaimers, introductory, or concluding remarks for THIS INDIVIDUAL SECTION. Keep it brief and to the point for this section.";
-        $importanceInstruction = "It is of UTMOST IMPORTANCE that the report section is in the requested language: **{$this->location->language}**. Ignoring this will be detrimental.";
-
-        return $basePrompt . $languageInstruction . $typeInstruction . $focusInstruction . $formattingInstruction . $importanceInstruction;
-    }
 }
\ No newline at end of file
diff --git a/app/Models/BuildingPermit.php b/app/Models/BuildingPermit.php
index 867f5b0..9aac129 100644
--- a/app/Models/BuildingPermit.php
+++ b/app/Models/BuildingPermit.php
@@ -4,10 +4,11 @@
 
 use Illuminate\Database\Eloquent\Factories\HasFactory;
 use Illuminate\Database\Eloquent\Model;
+use App\Models\Concerns\Mappable; // Added
 
 class BuildingPermit extends Model
 {
-    use HasFactory;
+    use HasFactory, Mappable; // Added Mappable
 
     // Specify the table name if it's different from the model's pluralized name
     protected $table = 'building_permits';
@@ -40,6 +41,11 @@ class BuildingPermit extends Model
         'language_code',
     ];
 
+    const SEARCHABLE_COLUMNS = [ // Added
+        'permitnumber', 'worktype', 'permittypedescr', 'status', 'occupancytype',
+        'address', 'city', 'state', 'zip', 'property_id', 'parcel_id', 'language_code',
+    ];
+
     public static function getDateField(): string
     {
         return 'issued_date';
@@ -59,4 +65,10 @@ public function getExternalId(): string
     {
         return $this->permitnumber;
     }
+
+    // Mappable Trait Implementations
+    // getFilterableFieldsDescription() method removed
+    // getContextData() method removed
+    // getSearchableColumns() method removed (trait will use SEARCHABLE_COLUMNS constant if defined, or suggestions)
+    // getGptFunctionSchema() method removed
 }
diff --git a/app/Models/Concerns/Mappable.php b/app/Models/Concerns/Mappable.php
new file mode 100644
index 0000000..dbacd85
--- /dev/null
+++ b/app/Models/Concerns/Mappable.php
@@ -0,0 +1,169 @@
+<?php
+
+namespace App\Models\Concerns;
+
+use Illuminate\Support\Facades\Log; // Added
+use Illuminate\Support\Facades\Config; // Added
+
+trait Mappable
+{
+    private static $modelMetadataSuggestions = null; // Added for caching
+
+    /**
+     * Helper method to load model metadata suggestions.
+     */
+    private static function loadModelMetadataSuggestions(): ?array // Added
+    {
+        if (self::$modelMetadataSuggestions === null) {
+            self::$modelMetadataSuggestions = Config::get('model_metadata_suggestions', []);
+        }
+        return self::$modelMetadataSuggestions[static::class] ?? null;
+    }
+
+    /**
+     * Get the name of the date field used for filtering by date ranges.
+     */
+    abstract public static function getDateField(): string;
+
+    /**
+     * Get the date value for a specific record, typically from the field specified by getDateField().
+     */
+    abstract public function getDate(): ?string;
+
+    /**
+     * Get the name of the external ID field.
+     */
+    abstract public static function getExternalIdName(): string;
+
+    /**
+     * Get the external ID value for a specific record.
+     */
+    abstract public function getExternalId(): string;
+
+    /**
+     * Get a string describing filterable fields and their types for AI.
+     * This description guides the AI in constructing filter objects.
+     */
+    public static function getFilterableFieldsDescription(): string // Implemented
+    {
+        $suggestions = self::loadModelMetadataSuggestions();
+        if ($suggestions && isset($suggestions['filterableFieldsDescription'])) {
+            return json_encode($suggestions['filterableFieldsDescription']);
+        }
+        Log::warning("Mappable Trait: No 'filterableFieldsDescription' suggestions found for model " . static::class);
+        return json_encode([['name' => 'search_term', 'label' => 'General Search', 'type' => 'text', 'placeholder' => 'Search...']]); // Basic fallback
+    }
+
+    /**
+     * Get context data for AI, e.g., unique values for categorical fields or general dataset information.
+     */
+    public static function getContextData(): string // Implemented
+    {
+        $suggestions = self::loadModelMetadataSuggestions();
+        if ($suggestions && isset($suggestions['contextData'])) {
+            return $suggestions['contextData'];
+        }
+        Log::warning("Mappable Trait: No 'contextData' suggestions found for model " . static::class);
+        return "Dataset of " . static::getModelNameForHumans() . "."; // Basic fallback
+    }
+
+    /**
+     * Get an array of searchable/filterable column names.
+     */
+    public static function getSearchableColumns(): array // Implemented
+    {
+        $suggestions = self::loadModelMetadataSuggestions();
+        if ($suggestions && isset($suggestions['searchableColumns'])) {
+            return $suggestions['searchableColumns'];
+        }
+        // Fallback: Check for a constant in the model, then default to empty array
+        if (defined(static::class . '::SEARCHABLE_COLUMNS')) {
+            Log::warning("Mappable Trait: No 'searchableColumns' suggestions found for model " . static::class . ". Falling back to SEARCHABLE_COLUMNS constant.");
+            return static::SEARCHABLE_COLUMNS;
+        }
+        Log::warning("Mappable Trait: No 'searchableColumns' suggestions or SEARCHABLE_COLUMNS constant found for model " . static::class);
+        return []; // Basic fallback
+    }
+
+    /**
+     * Get the GPT function schema for this model.
+     */
+    public static function getGptFunctionSchema(): array // Implemented
+    {
+        $suggestions = self::loadModelMetadataSuggestions();
+        $dateField = static::getDateField(); // Assumes getDateField is always implemented in the model
+
+        $filterProperties = [
+            'search_term' => ['type' => 'string', 'description' => 'A general search term to query across multiple text fields.'],
+            'start_date' => ['type' => 'string', 'format' => 'date', 'description' => "Start date for '{$dateField}' (YYYY-MM-DD)"],
+            'end_date' => ['type' => 'string', 'format' => 'date', 'description' => "End date for '{$dateField}' (YYYY-MM-DD)"],
+            'limit' => ['type' => 'integer', 'description' => 'Limit the number of records. Default is 1000, max 5000.'],
+        ];
+
+        if ($suggestions && isset($suggestions['gptSchemaProperties']) && is_array($suggestions['gptSchemaProperties'])) {
+            // Merge suggested properties, ensuring our defaults are not overwritten if they exist in suggestions
+            // but allowing suggestions to add new ones or modify non-default ones.
+            foreach ($suggestions['gptSchemaProperties'] as $key => $value) {
+                if (!array_key_exists($key, $filterProperties)) {
+                    $filterProperties[$key] = $value;
+                } elseif (is_array($value) && isset($value['description'])) { // Allow overriding description
+                    $filterProperties[$key]['description'] = $value['description'];
+                     if (isset($value['type'])) { // Allow overriding type too
+                        $filterProperties[$key]['type'] = $value['type'];
+                    }
+                }
+            }
+        } else {
+            Log::warning("Mappable Trait: No 'gptSchemaProperties' suggestions found for model " . static::class . ". Using basic schema.");
+            // If no suggestions, we might try to build from filterableFieldsDescription as a complex fallback,
+            // or just rely on the basic properties defined above. For now, keep it simple.
+        }
+        
+        $contextData = static::getContextData(); // This will use the trait's implementation of getContextData
+
+        return [
+            'type' => 'function',
+            'function' => [
+                'name' => 'generate_data_filters',
+                'description' => 'Generate filters for the data query about ' . static::getModelNameForHumans() . '. Use the properties schema for available filter fields and their types. Context: ' . $contextData,
+                'parameters' => [
+                    'type' => 'object',
+                    'properties' => [
+                        'filters' => [
+                            'type' => 'object',
+                            'description' => "Key-value pairs for filtering. Available fields and their types are defined in the properties of this 'filters' object.",
+                            'properties' => $filterProperties,
+                        ],
+                    ],
+                    'required' => ['filters'],
+                ],
+            ],
+        ];
+    }
+
+    /**
+     * Get a human-readable name for the model.
+     * Example: "Crime Data", "311 Cases".
+     */
+    public static function getModelNameForHumans(): string
+    {
+        // Get the short class name (e.g., "ThreeOneOneCase" from "App\Models\ThreeOneOneCase")
+        $className = (new \ReflectionClass(static::class))->getShortName();
+        // Add spaces before capital letters (e.g., "Three One One Case")
+        $humanReadable = preg_replace('/(?<!^)([A-Z])/', ' $1', $className);
+        // Replace underscores with spaces if any were part of the class name (less common for class names)
+        $humanReadable = str_replace('_', ' ', $humanReadable);
+        // Capitalize words if needed (though preg_replace usually handles this well for CamelCase)
+        // $humanReadable = ucwords(strtolower($humanReadable)); // Optional: if you want "Three one one case" -> "Three One One Case"
+        return trim($humanReadable);
+    }
+
+    /**
+     * Dummy method to check for Mappable trait usage.
+     * Used by GenerateModelMetadataCommand.
+     */
+    public static function getMappableTraitUsageCheck(): bool // Added
+    {
+        return true;
+    }
+}
diff --git a/app/Models/ConstructionOffHour.php b/app/Models/ConstructionOffHour.php
index de689d7..55f3379 100644
--- a/app/Models/ConstructionOffHour.php
+++ b/app/Models/ConstructionOffHour.php
@@ -4,10 +4,11 @@
 
 use Illuminate\Database\Eloquent\Factories\HasFactory;
 use Illuminate\Database\Eloquent\Model;
+use App\Models\Concerns\Mappable; // Added
 
 class ConstructionOffHour extends Model
 {
-    use HasFactory;
+    use HasFactory, Mappable; // Added Mappable
 
     protected $table = 'construction_off_hours';
 
@@ -22,6 +23,10 @@ class ConstructionOffHour extends Model
         'language_code',
     ];
 
+    const SEARCHABLE_COLUMNS = [ // Added
+        'app_no', 'address', 'ward', 'latitude', 'longitude', 'language_code',
+    ];
+
     public static function getDateField(): string
     {
         return 'start_datetime';
@@ -41,4 +46,6 @@ public function getExternalId(): string
     {
         return $this->app_no;
     }
+
+    // Mappable Trait Implementations
 }
diff --git a/app/Models/CrimeData.php b/app/Models/CrimeData.php
index e55dca5..3093216 100644
--- a/app/Models/CrimeData.php
+++ b/app/Models/CrimeData.php
@@ -4,10 +4,11 @@
 
 use Illuminate\Database\Eloquent\Factories\HasFactory;
 use Illuminate\Database\Eloquent\Model;
+use App\Models\Concerns\Mappable; // Added
 
 class CrimeData extends Model
 {
-    use HasFactory;
+    use HasFactory, Mappable; // Added Mappable
 
     // Specify the table name if it doesn't follow Laravel's naming conventions
     protected $table = 'crime_data';
@@ -32,6 +33,9 @@ class CrimeData extends Model
         'long',
         'location',
         'language_code',
+        'crime_details', // Added
+        'crime_start_time', // Added
+        'crime_end_time',   // Added
     ];
 
     // Cast the occurred_on_date to a date type
@@ -39,6 +43,12 @@ class CrimeData extends Model
         'occurred_on_date' => 'datetime',
     ];
 
+    const SEARCHABLE_COLUMNS = [ // Added
+        'incident_number', 'offense_code', 'offense_code_group', 'offense_description',
+        'district', 'reporting_area', 'shooting', 'year', 'month', 'day_of_week', 'hour',
+        'ucr_part', 'street', 'location', 'language_code', 'crime_details', 'crime_start_time', 'crime_end_time'
+    ];
+
     public static function getDateField(): string
     {
         return 'occurred_on_date';
@@ -461,8 +471,8 @@ public function getExternalId(): string
         3123	EXPLOSIVES - TURNED IN OR FOUND
         2604	EXTORTION OR BLACKMAIL
         1721	FAILURE TO REGISTER AS A SEX OFFENDER
-        3160	FIRE REPORT - CAR, BRUSH, ETC
-        3108	FIRE REPORT - HOUSE, BUILDING, ETC. 
+        3160	FIRE REPORT - CAR, BRUSH, ETC.
+        3108	FIRE REPORT - HOUSE, BUILDING, ETC.
         2602	FIRE REPORT/ALARM - FALSE
         3017	FIREARM/WEAPON - ACCIDENTAL DEATH
         3016	FIREARM/WEAPON - ACCIDENTAL INJURY
@@ -642,5 +652,11 @@ public function getExternalId(): string
         
         EOT;
 
-    
+
+    public static function getContextData(): string // Added
+    {
+        // Clean up the context data slightly for better processing if needed
+        return preg_replace('/\s+/', ' ', self::CONTEXT_CRIME_DATA);
+    }
+
 }
diff --git a/app/Models/DataPoint.php b/app/Models/DataPoint.php
index 7197ba5..b70b483 100644
--- a/app/Models/DataPoint.php
+++ b/app/Models/DataPoint.php
@@ -19,6 +19,8 @@ class DataPoint extends Model
         'property_violation_id',
         'construction_off_hour_id',
         'building_permit_id',
+        'food_establishment_violation_id',
+        'generic_foreign_id', // Add generic_foreign_id here
     ];
 
     /**
@@ -61,6 +63,14 @@ public function buildingPermit()
         return $this->belongsTo(BuildingPermit::class, 'building_permit_id');
     }
 
+    /**
+     * Relationship to FoodEstablishmentViolation model.
+     */
+    public function foodEstablishmentViolation()
+    {
+        return $this->belongsTo(FoodEstablishmentViolation::class, 'food_establishment_violation_id');
+    }
+
     /**
      * If you need to fetch 'location' as WKB or WKT, you could add an accessor.
      * Example: Convert raw binary data to WKT for debugging:
diff --git a/app/Models/FoodInspection.php b/app/Models/FoodInspection.php
new file mode 100644
index 0000000..514e616
--- /dev/null
+++ b/app/Models/FoodInspection.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Factories\HasFactory;
+use Illuminate\Database\Eloquent\Model;
+use App\Models\Concerns\Mappable; // Added
+
+class FoodInspection extends Model
+{
+    use HasFactory, Mappable; // Added Mappable
+
+    protected $table = 'food_inspections'; // Assuming it uses the same table
+
+    protected $fillable = [
+        'external_id',
+        'businessname',
+        'dbaname',
+        'legalowner',
+        'namelast',
+        'namefirst',
+        'licenseno',
+        'issdttm',
+        'expdttm',
+        'licstatus',
+        'licensecat',
+        'descript',
+        'result',
+        'resultdttm',
+        'violation',
+        'viol_level',
+        'violdesc',
+        'violdttm',
+        'viol_status',
+        'status_date',
+        'comments',
+        'address',
+        'city',
+        'state',
+        'zip',
+        'property_id',
+        'latitude',
+        'longitude',
+        'language_code',
+    ];
+
+    const SEARCHABLE_COLUMNS = [ // Added
+        'external_id', 'businessname', 'dbaname', 'licenseno', 'licstatus', 'licensecat',
+        'result', 'viol_level', 'viol_status', 'address', 'city', 'zip', 'property_id', 'language_code',
+    ];
+
+    protected $casts = [
+        'issdttm' => 'datetime',
+        'expdttm' => 'datetime',
+        'resultdttm' => 'datetime',
+        'violdttm' => 'datetime',
+        'status_date' => 'datetime',
+    ];
+
+    public static function getDateField(): string
+    {
+        return 'resultdttm';
+    }
+
+    public function getDate(): ?string
+    {
+        return $this->resultdttm ? $this->resultdttm->toDateTimeString() : null;
+    }
+
+    public static function getExternalIdName(): string
+    {
+        return 'external_id';
+    }
+
+    public function getExternalId(): string
+    {
+        return (string)$this->external_id;
+    }
+
+    // Mappable Trait Implementations
+    // getFilterableFieldsDescription() method removed
+    // getContextData() method removed
+    // getSearchableColumns() method removed (trait will use SEARCHABLE_COLUMNS constant if defined, or suggestions)
+    // getGptFunctionSchema() method removed
+}
diff --git a/app/Models/PropertyViolation.php b/app/Models/PropertyViolation.php
index ec14ae4..ac12c29 100644
--- a/app/Models/PropertyViolation.php
+++ b/app/Models/PropertyViolation.php
@@ -4,10 +4,11 @@
 
 use Illuminate\Database\Eloquent\Factories\HasFactory;
 use Illuminate\Database\Eloquent\Model;
+use App\Models\Concerns\Mappable; // Added
 
 class PropertyViolation extends Model
 {
-    use HasFactory;
+    use HasFactory, Mappable; // Added Mappable
 
     protected $table = 'property_violations';
 
@@ -39,6 +40,11 @@ class PropertyViolation extends Model
         'language_code',
     ];
 
+    const SEARCHABLE_COLUMNS = [ // Added
+        'case_no', 'status', 'code', 'description', 'violation_stno', 'violation_street',
+        'violation_zip', 'ward', 'contact_city', 'contact_state', 'sam_id', 'latitude', 'longitude', 'language_code',
+    ];
+
     public static function getDateField(): string
     {
         return 'status_dttm';
@@ -61,4 +67,10 @@ public function getExternalId(): string
     {
         return $this->case_no;
     }
+
+    // Mappable Trait Implementations
+    // getFilterableFieldsDescription() method removed
+    // getContextData() method removed
+    // getSearchableColumns() method removed (trait will use SEARCHABLE_COLUMNS constant if defined, or suggestions)
+    // getGptFunctionSchema() method removed
 }
\ No newline at end of file
diff --git a/app/Models/Report.php b/app/Models/Report.php
new file mode 100644
index 0000000..1311cb7
--- /dev/null
+++ b/app/Models/Report.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace App\Models;
+
+use Illuminate\Database\Eloquent\Factories\HasFactory;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Relations\BelongsTo;
+
+class Report extends Model
+{
+    use HasFactory;
+
+    protected $fillable = [
+        'user_id',
+        'location_id',
+        'title',
+        'content',
+        'generated_at',
+    ];
+
+    protected $casts = [
+        'generated_at' => 'datetime',
+    ];
+
+    public function user(): BelongsTo
+    {
+        return $this->belongsTo(User::class);
+    }
+
+    public function location(): BelongsTo
+    {
+        return $this->belongsTo(Location::class);
+    }
+}
diff --git a/app/Models/ThreeOneOneCase.php b/app/Models/ThreeOneOneCase.php
index c4cac84..24d4d0e 100644
--- a/app/Models/ThreeOneOneCase.php
+++ b/app/Models/ThreeOneOneCase.php
@@ -4,9 +4,12 @@
 
 use Illuminate\Database\Eloquent\Model;
 use Illuminate\Database\Eloquent\Relations\HasMany;
+use App\Models\Concerns\Mappable; // Added
 
 class ThreeOneOneCase extends Model
 {
+    use Mappable; // Added
+
     /**
      * The primary key associated with the table.
      *
@@ -61,10 +64,12 @@ class ThreeOneOneCase extends Model
         'source', 
         'ward_number', 
         'language_code',
+        'threeoneonedescription', // Added
+        'source_city', // Added
     ];
 
     const SEARCHABLE_COLUMNS = [
-        'id', 'case_enquiry_id', 'open_dt', 'sla_target_dt', 'closed_dt', 'on_time', 'case_status', 'closure_reason', 'case_title', 'subject', 'reason', 'type', 'queue', 'department', 'submitted_photo', 'closed_photo', 'location', 'fire_district', 'pwd_district', 'city_council_district', 'police_district', 'neighborhood', 'neighborhood_services_district', 'ward', 'precinct', 'location_street_name', 'location_zipcode', 'latitude', 'longitude', 'source', 'ward_number',
+        'id', 'case_enquiry_id', 'open_dt', 'sla_target_dt', 'closed_dt', 'on_time', 'case_status', 'closure_reason', 'case_title', 'subject', 'reason', 'type', 'queue', 'department', 'submitted_photo', 'closed_photo', 'location', 'fire_district', 'pwd_district', 'city_council_district', 'police_district', 'neighborhood', 'neighborhood_services_district', 'ward', 'precinct', 'location_street_name', 'location_zipcode', 'latitude', 'longitude', 'source', 'ward_number', 'language_code', 'description', 'source_city', // Added description and source_city
     ];
     
     //function to check case survival time
@@ -105,4 +110,10 @@ public function getExternalId(): string
     {
         return $this->case_enquiry_id;
     }
+
+    // Mappable Trait Implementations
+    // getFilterableFieldsDescription() method removed
+    // getContextData() method removed
+    // getSearchableColumns() method removed (trait will use SEARCHABLE_COLUMNS constant if defined, or suggestions)
+    // getGptFunctionSchema() method removed
 }
diff --git a/app/Models/User.php b/app/Models/User.php
index fbbea8b..f7e14c7 100644
--- a/app/Models/User.php
+++ b/app/Models/User.php
@@ -74,5 +74,10 @@ public function locations()
         return $this->hasMany(Location::class);
     }
 
+    public function reports()
+    {
+        return $this->hasMany(Report::class);
+    }
+
 
 }
diff --git a/app/Policies/ReportPolicy.php b/app/Policies/ReportPolicy.php
new file mode 100644
index 0000000..d20307d
--- /dev/null
+++ b/app/Policies/ReportPolicy.php
@@ -0,0 +1,75 @@
+<?php
+
+namespace App\Policies;
+
+use App\Models\Report;
+use App\Models\User;
+use Illuminate\Auth\Access\Response;
+
+class ReportPolicy
+{
+    /**
+     * Determine whether the user can view any models.
+     */
+    public function viewAny(User $user): bool
+    {
+        return true; // Any authenticated user can view their own list of reports
+    }
+
+    /**
+     * Determine whether the user can view the model.
+     */
+    public function view(User $user, Report $report): bool
+    {
+        return $user->id === $report->user_id;
+    }
+
+    /**
+     * Determine whether the user can create models.
+     */
+    public function create(User $user): bool
+    {
+        // Reports are created by the system (job), not directly by users via a form
+        return false; 
+    }
+
+    /**
+     * Determine whether the user can update the model.
+     */
+    public function update(User $user, Report $report): bool
+    {
+        return false; // Reports are immutable once generated
+    }
+
+    /**
+     * Determine whether the user can delete the model.
+     */
+    public function delete(User $user, Report $report): bool
+    {
+        return $user->id === $report->user_id; // Or disable deletion
+    }
+
+    /**
+     * Determine whether the user can restore the model.
+     */
+    public function restore(User $user, Report $report): bool
+    {
+        return false;
+    }
+
+    /**
+     * Determine whether the user can permanently delete the model.
+     */
+    public function forceDelete(User $user, Report $report): bool
+    {
+        return false;
+    }
+
+    /**
+     * Determine whether the user can download the report.
+     */
+    public function download(User $user, Report $report): bool
+    {
+        return $user->id === $report->user_id;
+    }
+}
diff --git a/app/Providers/AuthServiceProvider.php b/app/Providers/AuthServiceProvider.php
index 54756cd..115f8aa 100644
--- a/app/Providers/AuthServiceProvider.php
+++ b/app/Providers/AuthServiceProvider.php
@@ -4,6 +4,8 @@
 
 // use Illuminate\Support\Facades\Gate;
 use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;
+use App\Models\Report;
+use App\Policies\ReportPolicy;
 
 class AuthServiceProvider extends ServiceProvider
 {
@@ -13,7 +15,8 @@ class AuthServiceProvider extends ServiceProvider
      * @var array<class-string, class-string>
      */
     protected $policies = [
-        //
+        // 'App\Models\Model' => 'App\Policies\ModelPolicy',
+        Report::class => ReportPolicy::class,
     ];
 
     /**
diff --git a/app/Providers/RouteServiceProvider.php b/app/Providers/RouteServiceProvider.php
index 973b544..269d714 100644
--- a/app/Providers/RouteServiceProvider.php
+++ b/app/Providers/RouteServiceProvider.php
@@ -28,6 +28,14 @@ public function boot(): void
             return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
         });
 
+        RateLimiter::for('boston_311_live_global', function (Request $request) {
+            // Using a static string as the key ensures a single bucket for all users.
+            // Adjust the limit (e.g., 10 requests per minute) as needed.
+            return Limit::perMinute(60)->by('global_boston_311_api_limit')->response(function(Request $request, array $headers) {
+                return response()->json(['message' => 'Too many requests to the 311 live API. Please try again later.'], 429, $headers);
+            });
+        });
+
         $this->routes(function () {
             Route::middleware('api')
                 ->prefix('api')
diff --git a/app/Services/PdfLinkExtractorService.php b/app/Services/PdfLinkExtractorService.php
new file mode 100644
index 0000000..a678b9a
--- /dev/null
+++ b/app/Services/PdfLinkExtractorService.php
@@ -0,0 +1,36 @@
+<?php
+
+namespace App\Services;
+
+use DOMDocument;
+use DOMXPath;
+use GuzzleHttp\Psr7\Uri;
+use GuzzleHttp\Psr7\UriResolver;
+
+class PdfLinkExtractorService
+{
+    public function extractFromHtml(string $html, string $baseUrl): array
+    {
+        $pdfLinks = [];
+        $dom = new DOMDocument();
+        @$dom->loadHTML($html);
+        $xpath = new DOMXPath($dom);
+        $anchors = $xpath->query("//a[@href]");
+        $baseUri = new Uri($baseUrl);
+
+        foreach ($anchors as $anchor) {
+            $href = $anchor->getAttribute('href');
+            $cleanedHref = trim(preg_replace('/^[\\\\\'"]+|[\\\\\'"]+$/', '', $href));
+            if (str_ends_with(strtolower($cleanedHref), '.pdf')) {
+                try {
+                    $relativeUri = new Uri($cleanedHref);
+                    $resolvedUri = UriResolver::resolve($baseUri, $relativeUri);
+                    $pdfLinks[] = (string)$resolvedUri;
+                } catch (\InvalidArgumentException $e) {
+                    // Skip invalid URIs.
+                }
+            }
+        }
+        return array_unique($pdfLinks);
+    }
+}
diff --git a/composer.json b/composer.json
index d9a9b81..e21c75c 100644
--- a/composer.json
+++ b/composer.json
@@ -16,7 +16,9 @@
         "league/csv": "^9.16",
         "symfony/yaml": "^7.1",
         "tightenco/ziggy": "^1.0",
-        "yethee/tiktoken": "^0.5.0"
+        "yethee/tiktoken": "^0.5.0",
+        "symfony/dom-crawler": "^6.0",
+        "symfony/css-selector": "^6.0"
     },
     "require-dev": {
         "fakerphp/faker": "^1.9.1",
diff --git a/composer.lock b/composer.lock
index 6db7372..9f8a1cc 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,20 +4,20 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
         "This file is @generated automatically"
     ],
-    "content-hash": "e3b87b6a5c3ff633bdce621041304f28",
+    "content-hash": "04cf32951901615881a7c35b472e531c",
     "packages": [
         {
             "name": "brick/math",
-            "version": "0.12.1",
+            "version": "0.12.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/brick/math.git",
-                "reference": "f510c0a40911935b77b86859eb5223d58d660df1"
+                "reference": "866551da34e9a618e64a819ee1e01c20d8a588ba"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/brick/math/zipball/f510c0a40911935b77b86859eb5223d58d660df1",
-                "reference": "f510c0a40911935b77b86859eb5223d58d660df1",
+                "url": "https://api.github.com/repos/brick/math/zipball/866551da34e9a618e64a819ee1e01c20d8a588ba",
+                "reference": "866551da34e9a618e64a819ee1e01c20d8a588ba",
                 "shasum": ""
             },
             "require": {
@@ -26,7 +26,7 @@
             "require-dev": {
                 "php-coveralls/php-coveralls": "^2.2",
                 "phpunit/phpunit": "^10.1",
-                "vimeo/psalm": "5.16.0"
+                "vimeo/psalm": "6.8.8"
             },
             "type": "library",
             "autoload": {
@@ -56,7 +56,7 @@
             ],
             "support": {
                 "issues": "https://github.com/brick/math/issues",
-                "source": "https://github.com/brick/math/tree/0.12.1"
+                "source": "https://github.com/brick/math/tree/0.12.3"
             },
             "funding": [
                 {
@@ -64,7 +64,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-11-29T23:19:16+00:00"
+            "time": "2025-02-28T13:11:00+00:00"
         },
         {
             "name": "carbonphp/carbon-doctrine-types",
@@ -442,16 +442,16 @@
         },
         {
             "name": "dragonmantank/cron-expression",
-            "version": "v3.3.3",
+            "version": "v3.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/dragonmantank/cron-expression.git",
-                "reference": "adfb1f505deb6384dc8b39804c5065dd3c8c8c0a"
+                "reference": "8c784d071debd117328803d86b2097615b457500"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/dragonmantank/cron-expression/zipball/adfb1f505deb6384dc8b39804c5065dd3c8c8c0a",
-                "reference": "adfb1f505deb6384dc8b39804c5065dd3c8c8c0a",
+                "url": "https://api.github.com/repos/dragonmantank/cron-expression/zipball/8c784d071debd117328803d86b2097615b457500",
+                "reference": "8c784d071debd117328803d86b2097615b457500",
                 "shasum": ""
             },
             "require": {
@@ -464,10 +464,14 @@
             "require-dev": {
                 "phpstan/extension-installer": "^1.0",
                 "phpstan/phpstan": "^1.0",
-                "phpstan/phpstan-webmozart-assert": "^1.0",
                 "phpunit/phpunit": "^7.0|^8.0|^9.0"
             },
             "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.x-dev"
+                }
+            },
             "autoload": {
                 "psr-4": {
                     "Cron\\": "src/Cron/"
@@ -491,7 +495,7 @@
             ],
             "support": {
                 "issues": "https://github.com/dragonmantank/cron-expression/issues",
-                "source": "https://github.com/dragonmantank/cron-expression/tree/v3.3.3"
+                "source": "https://github.com/dragonmantank/cron-expression/tree/v3.4.0"
             },
             "funding": [
                 {
@@ -499,20 +503,20 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-08-10T19:36:49+00:00"
+            "time": "2024-10-09T13:47:03+00:00"
         },
         {
             "name": "egulias/email-validator",
-            "version": "4.0.2",
+            "version": "4.0.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/egulias/EmailValidator.git",
-                "reference": "ebaaf5be6c0286928352e054f2d5125608e5405e"
+                "reference": "d42c8731f0624ad6bdc8d3e5e9a4524f68801cfa"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/ebaaf5be6c0286928352e054f2d5125608e5405e",
-                "reference": "ebaaf5be6c0286928352e054f2d5125608e5405e",
+                "url": "https://api.github.com/repos/egulias/EmailValidator/zipball/d42c8731f0624ad6bdc8d3e5e9a4524f68801cfa",
+                "reference": "d42c8731f0624ad6bdc8d3e5e9a4524f68801cfa",
                 "shasum": ""
             },
             "require": {
@@ -558,7 +562,7 @@
             ],
             "support": {
                 "issues": "https://github.com/egulias/EmailValidator/issues",
-                "source": "https://github.com/egulias/EmailValidator/tree/4.0.2"
+                "source": "https://github.com/egulias/EmailValidator/tree/4.0.4"
             },
             "funding": [
                 {
@@ -566,7 +570,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-10-06T06:47:41+00:00"
+            "time": "2025-03-06T22:45:56+00:00"
         },
         {
             "name": "firebase/php-jwt",
@@ -704,24 +708,24 @@
         },
         {
             "name": "graham-campbell/result-type",
-            "version": "v1.1.2",
+            "version": "v1.1.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/GrahamCampbell/Result-Type.git",
-                "reference": "fbd48bce38f73f8a4ec8583362e732e4095e5862"
+                "reference": "3ba905c11371512af9d9bdd27d99b782216b6945"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/GrahamCampbell/Result-Type/zipball/fbd48bce38f73f8a4ec8583362e732e4095e5862",
-                "reference": "fbd48bce38f73f8a4ec8583362e732e4095e5862",
+                "url": "https://api.github.com/repos/GrahamCampbell/Result-Type/zipball/3ba905c11371512af9d9bdd27d99b782216b6945",
+                "reference": "3ba905c11371512af9d9bdd27d99b782216b6945",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.2.5 || ^8.0",
-                "phpoption/phpoption": "^1.9.2"
+                "phpoption/phpoption": "^1.9.3"
             },
             "require-dev": {
-                "phpunit/phpunit": "^8.5.34 || ^9.6.13 || ^10.4.2"
+                "phpunit/phpunit": "^8.5.39 || ^9.6.20 || ^10.5.28"
             },
             "type": "library",
             "autoload": {
@@ -750,7 +754,7 @@
             ],
             "support": {
                 "issues": "https://github.com/GrahamCampbell/Result-Type/issues",
-                "source": "https://github.com/GrahamCampbell/Result-Type/tree/v1.1.2"
+                "source": "https://github.com/GrahamCampbell/Result-Type/tree/v1.1.3"
             },
             "funding": [
                 {
@@ -762,26 +766,26 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-11-12T22:16:48+00:00"
+            "time": "2024-07-20T21:45:45+00:00"
         },
         {
             "name": "guzzlehttp/guzzle",
-            "version": "7.8.1",
+            "version": "7.9.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/guzzle/guzzle.git",
-                "reference": "41042bc7ab002487b876a0683fc8dce04ddce104"
+                "reference": "7b2f29fe81dc4da0ca0ea7d42107a0845946ea77"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/41042bc7ab002487b876a0683fc8dce04ddce104",
-                "reference": "41042bc7ab002487b876a0683fc8dce04ddce104",
+                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/7b2f29fe81dc4da0ca0ea7d42107a0845946ea77",
+                "reference": "7b2f29fe81dc4da0ca0ea7d42107a0845946ea77",
                 "shasum": ""
             },
             "require": {
                 "ext-json": "*",
-                "guzzlehttp/promises": "^1.5.3 || ^2.0.1",
-                "guzzlehttp/psr7": "^1.9.1 || ^2.5.1",
+                "guzzlehttp/promises": "^1.5.3 || ^2.0.3",
+                "guzzlehttp/psr7": "^2.7.0",
                 "php": "^7.2.5 || ^8.0",
                 "psr/http-client": "^1.0",
                 "symfony/deprecation-contracts": "^2.2 || ^3.0"
@@ -792,9 +796,9 @@
             "require-dev": {
                 "bamarni/composer-bin-plugin": "^1.8.2",
                 "ext-curl": "*",
-                "php-http/client-integration-tests": "dev-master#2c025848417c1135031fdf9c728ee53d0a7ceaee as 3.0.999",
+                "guzzle/client-integration-tests": "3.0.2",
                 "php-http/message-factory": "^1.1",
-                "phpunit/phpunit": "^8.5.36 || ^9.6.15",
+                "phpunit/phpunit": "^8.5.39 || ^9.6.20",
                 "psr/log": "^1.1 || ^2.0 || ^3.0"
             },
             "suggest": {
@@ -872,7 +876,7 @@
             ],
             "support": {
                 "issues": "https://github.com/guzzle/guzzle/issues",
-                "source": "https://github.com/guzzle/guzzle/tree/7.8.1"
+                "source": "https://github.com/guzzle/guzzle/tree/7.9.3"
             },
             "funding": [
                 {
@@ -888,20 +892,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-12-03T20:35:24+00:00"
+            "time": "2025-03-27T13:37:11+00:00"
         },
         {
             "name": "guzzlehttp/promises",
-            "version": "2.0.2",
+            "version": "2.2.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/guzzle/promises.git",
-                "reference": "bbff78d96034045e58e13dedd6ad91b5d1253223"
+                "reference": "7c69f28996b0a6920945dd20b3857e499d9ca96c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/promises/zipball/bbff78d96034045e58e13dedd6ad91b5d1253223",
-                "reference": "bbff78d96034045e58e13dedd6ad91b5d1253223",
+                "url": "https://api.github.com/repos/guzzle/promises/zipball/7c69f28996b0a6920945dd20b3857e499d9ca96c",
+                "reference": "7c69f28996b0a6920945dd20b3857e499d9ca96c",
                 "shasum": ""
             },
             "require": {
@@ -909,7 +913,7 @@
             },
             "require-dev": {
                 "bamarni/composer-bin-plugin": "^1.8.2",
-                "phpunit/phpunit": "^8.5.36 || ^9.6.15"
+                "phpunit/phpunit": "^8.5.39 || ^9.6.20"
             },
             "type": "library",
             "extra": {
@@ -955,7 +959,7 @@
             ],
             "support": {
                 "issues": "https://github.com/guzzle/promises/issues",
-                "source": "https://github.com/guzzle/promises/tree/2.0.2"
+                "source": "https://github.com/guzzle/promises/tree/2.2.0"
             },
             "funding": [
                 {
@@ -971,20 +975,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-12-03T20:19:20+00:00"
+            "time": "2025-03-27T13:27:01+00:00"
         },
         {
             "name": "guzzlehttp/psr7",
-            "version": "2.6.2",
+            "version": "2.7.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/guzzle/psr7.git",
-                "reference": "45b30f99ac27b5ca93cb4831afe16285f57b8221"
+                "reference": "c2270caaabe631b3b44c85f99e5a04bbb8060d16"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/psr7/zipball/45b30f99ac27b5ca93cb4831afe16285f57b8221",
-                "reference": "45b30f99ac27b5ca93cb4831afe16285f57b8221",
+                "url": "https://api.github.com/repos/guzzle/psr7/zipball/c2270caaabe631b3b44c85f99e5a04bbb8060d16",
+                "reference": "c2270caaabe631b3b44c85f99e5a04bbb8060d16",
                 "shasum": ""
             },
             "require": {
@@ -999,8 +1003,8 @@
             },
             "require-dev": {
                 "bamarni/composer-bin-plugin": "^1.8.2",
-                "http-interop/http-factory-tests": "^0.9",
-                "phpunit/phpunit": "^8.5.36 || ^9.6.15"
+                "http-interop/http-factory-tests": "0.9.0",
+                "phpunit/phpunit": "^8.5.39 || ^9.6.20"
             },
             "suggest": {
                 "laminas/laminas-httphandlerrunner": "Emit PSR-7 responses"
@@ -1071,7 +1075,7 @@
             ],
             "support": {
                 "issues": "https://github.com/guzzle/psr7/issues",
-                "source": "https://github.com/guzzle/psr7/tree/2.6.2"
+                "source": "https://github.com/guzzle/psr7/tree/2.7.1"
             },
             "funding": [
                 {
@@ -1087,20 +1091,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-12-03T20:05:35+00:00"
+            "time": "2025-03-27T12:30:47+00:00"
         },
         {
             "name": "guzzlehttp/uri-template",
-            "version": "v1.0.3",
+            "version": "v1.0.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/guzzle/uri-template.git",
-                "reference": "ecea8feef63bd4fef1f037ecb288386999ecc11c"
+                "reference": "30e286560c137526eccd4ce21b2de477ab0676d2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/uri-template/zipball/ecea8feef63bd4fef1f037ecb288386999ecc11c",
-                "reference": "ecea8feef63bd4fef1f037ecb288386999ecc11c",
+                "url": "https://api.github.com/repos/guzzle/uri-template/zipball/30e286560c137526eccd4ce21b2de477ab0676d2",
+                "reference": "30e286560c137526eccd4ce21b2de477ab0676d2",
                 "shasum": ""
             },
             "require": {
@@ -1157,7 +1161,7 @@
             ],
             "support": {
                 "issues": "https://github.com/guzzle/uri-template/issues",
-                "source": "https://github.com/guzzle/uri-template/tree/v1.0.3"
+                "source": "https://github.com/guzzle/uri-template/tree/v1.0.4"
             },
             "funding": [
                 {
@@ -1173,7 +1177,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-12-03T19:50:20+00:00"
+            "time": "2025-02-03T10:55:03+00:00"
         },
         {
             "name": "inertiajs/inertia-laravel",
@@ -1333,16 +1337,16 @@
         },
         {
             "name": "laravel/framework",
-            "version": "v10.48.16",
+            "version": "v10.48.29",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/framework.git",
-                "reference": "f9a3a50fae399d75e125b0eea637dda90c99eae7"
+                "reference": "8f7f9247cb8aad1a769d6b9815a6623d89b46b47"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/framework/zipball/f9a3a50fae399d75e125b0eea637dda90c99eae7",
-                "reference": "f9a3a50fae399d75e125b0eea637dda90c99eae7",
+                "url": "https://api.github.com/repos/laravel/framework/zipball/8f7f9247cb8aad1a769d6b9815a6623d89b46b47",
+                "reference": "8f7f9247cb8aad1a769d6b9815a6623d89b46b47",
                 "shasum": ""
             },
             "require": {
@@ -1449,7 +1453,7 @@
                 "nyholm/psr7": "^1.2",
                 "orchestra/testbench-core": "^8.23.4",
                 "pda/pheanstalk": "^4.0",
-                "phpstan/phpstan": "^1.4.7",
+                "phpstan/phpstan": "~1.11.11",
                 "phpunit/phpunit": "^10.0.7",
                 "predis/predis": "^2.0.2",
                 "symfony/cache": "^6.2",
@@ -1536,20 +1540,20 @@
                 "issues": "https://github.com/laravel/framework/issues",
                 "source": "https://github.com/laravel/framework"
             },
-            "time": "2024-07-09T15:25:22+00:00"
+            "time": "2025-03-12T14:42:01+00:00"
         },
         {
             "name": "laravel/prompts",
-            "version": "v0.1.24",
+            "version": "v0.1.25",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/prompts.git",
-                "reference": "409b0b4305273472f3754826e68f4edbd0150149"
+                "reference": "7b4029a84c37cb2725fc7f011586e2997040bc95"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/prompts/zipball/409b0b4305273472f3754826e68f4edbd0150149",
-                "reference": "409b0b4305273472f3754826e68f4edbd0150149",
+                "url": "https://api.github.com/repos/laravel/prompts/zipball/7b4029a84c37cb2725fc7f011586e2997040bc95",
+                "reference": "7b4029a84c37cb2725fc7f011586e2997040bc95",
                 "shasum": ""
             },
             "require": {
@@ -1592,9 +1596,9 @@
             "description": "Add beautiful and user-friendly forms to your command-line applications.",
             "support": {
                 "issues": "https://github.com/laravel/prompts/issues",
-                "source": "https://github.com/laravel/prompts/tree/v0.1.24"
+                "source": "https://github.com/laravel/prompts/tree/v0.1.25"
             },
-            "time": "2024-06-17T13:58:22+00:00"
+            "time": "2024-08-12T22:06:33+00:00"
         },
         {
             "name": "laravel/sanctum",
@@ -1626,13 +1630,13 @@
             },
             "type": "library",
             "extra": {
-                "branch-alias": {
-                    "dev-master": "3.x-dev"
-                },
                 "laravel": {
                     "providers": [
                         "Laravel\\Sanctum\\SanctumServiceProvider"
                     ]
+                },
+                "branch-alias": {
+                    "dev-master": "3.x-dev"
                 }
             },
             "autoload": {
@@ -1664,26 +1668,27 @@
         },
         {
             "name": "laravel/serializable-closure",
-            "version": "v1.3.3",
+            "version": "v1.3.7",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/serializable-closure.git",
-                "reference": "3dbf8a8e914634c48d389c1234552666b3d43754"
+                "reference": "4f48ade902b94323ca3be7646db16209ec76be3d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/serializable-closure/zipball/3dbf8a8e914634c48d389c1234552666b3d43754",
-                "reference": "3dbf8a8e914634c48d389c1234552666b3d43754",
+                "url": "https://api.github.com/repos/laravel/serializable-closure/zipball/4f48ade902b94323ca3be7646db16209ec76be3d",
+                "reference": "4f48ade902b94323ca3be7646db16209ec76be3d",
                 "shasum": ""
             },
             "require": {
                 "php": "^7.3|^8.0"
             },
             "require-dev": {
-                "nesbot/carbon": "^2.61",
+                "illuminate/support": "^8.0|^9.0|^10.0|^11.0",
+                "nesbot/carbon": "^2.61|^3.0",
                 "pestphp/pest": "^1.21.3",
                 "phpstan/phpstan": "^1.8.2",
-                "symfony/var-dumper": "^5.4.11"
+                "symfony/var-dumper": "^5.4.11|^6.2.0|^7.0.0"
             },
             "type": "library",
             "extra": {
@@ -1720,7 +1725,7 @@
                 "issues": "https://github.com/laravel/serializable-closure/issues",
                 "source": "https://github.com/laravel/serializable-closure"
             },
-            "time": "2023-11-08T14:08:06+00:00"
+            "time": "2024-11-14T18:34:49+00:00"
         },
         {
             "name": "laravel/socialite",
@@ -1796,22 +1801,22 @@
         },
         {
             "name": "laravel/tinker",
-            "version": "v2.9.0",
+            "version": "v2.10.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/tinker.git",
-                "reference": "502e0fe3f0415d06d5db1f83a472f0f3b754bafe"
+                "reference": "22177cc71807d38f2810c6204d8f7183d88a57d3"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/tinker/zipball/502e0fe3f0415d06d5db1f83a472f0f3b754bafe",
-                "reference": "502e0fe3f0415d06d5db1f83a472f0f3b754bafe",
+                "url": "https://api.github.com/repos/laravel/tinker/zipball/22177cc71807d38f2810c6204d8f7183d88a57d3",
+                "reference": "22177cc71807d38f2810c6204d8f7183d88a57d3",
                 "shasum": ""
             },
             "require": {
-                "illuminate/console": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0",
-                "illuminate/contracts": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0",
-                "illuminate/support": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0",
+                "illuminate/console": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0|^12.0",
+                "illuminate/contracts": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0|^12.0",
+                "illuminate/support": "^6.0|^7.0|^8.0|^9.0|^10.0|^11.0|^12.0",
                 "php": "^7.2.5|^8.0",
                 "psy/psysh": "^0.11.1|^0.12.0",
                 "symfony/var-dumper": "^4.3.4|^5.0|^6.0|^7.0"
@@ -1819,10 +1824,10 @@
             "require-dev": {
                 "mockery/mockery": "~1.3.3|^1.4.2",
                 "phpstan/phpstan": "^1.10",
-                "phpunit/phpunit": "^8.5.8|^9.3.3"
+                "phpunit/phpunit": "^8.5.8|^9.3.3|^10.0"
             },
             "suggest": {
-                "illuminate/database": "The Illuminate Database package (^6.0|^7.0|^8.0|^9.0|^10.0|^11.0)."
+                "illuminate/database": "The Illuminate Database package (^6.0|^7.0|^8.0|^9.0|^10.0|^11.0|^12.0)."
             },
             "type": "library",
             "extra": {
@@ -1856,22 +1861,22 @@
             ],
             "support": {
                 "issues": "https://github.com/laravel/tinker/issues",
-                "source": "https://github.com/laravel/tinker/tree/v2.9.0"
+                "source": "https://github.com/laravel/tinker/tree/v2.10.1"
             },
-            "time": "2024-01-04T16:10:04+00:00"
+            "time": "2025-01-27T14:24:01+00:00"
         },
         {
             "name": "league/commonmark",
-            "version": "2.4.2",
+            "version": "2.7.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/thephpleague/commonmark.git",
-                "reference": "91c24291965bd6d7c46c46a12ba7492f83b1cadf"
+                "reference": "6fbb36d44824ed4091adbcf4c7d4a3923cdb3405"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/thephpleague/commonmark/zipball/91c24291965bd6d7c46c46a12ba7492f83b1cadf",
-                "reference": "91c24291965bd6d7c46c46a12ba7492f83b1cadf",
+                "url": "https://api.github.com/repos/thephpleague/commonmark/zipball/6fbb36d44824ed4091adbcf4c7d4a3923cdb3405",
+                "reference": "6fbb36d44824ed4091adbcf4c7d4a3923cdb3405",
                 "shasum": ""
             },
             "require": {
@@ -1884,8 +1889,8 @@
             },
             "require-dev": {
                 "cebe/markdown": "^1.0",
-                "commonmark/cmark": "0.30.3",
-                "commonmark/commonmark.js": "0.30.0",
+                "commonmark/cmark": "0.31.1",
+                "commonmark/commonmark.js": "0.31.1",
                 "composer/package-versions-deprecated": "^1.8",
                 "embed/embed": "^4.4",
                 "erusev/parsedown": "^1.0",
@@ -1896,8 +1901,9 @@
                 "phpstan/phpstan": "^1.8.2",
                 "phpunit/phpunit": "^9.5.21 || ^10.5.9 || ^11.0.0",
                 "scrutinizer/ocular": "^1.8.1",
-                "symfony/finder": "^5.3 | ^6.0 || ^7.0",
-                "symfony/yaml": "^2.3 | ^3.0 | ^4.0 | ^5.0 | ^6.0 || ^7.0",
+                "symfony/finder": "^5.3 | ^6.0 | ^7.0",
+                "symfony/process": "^5.4 | ^6.0 | ^7.0",
+                "symfony/yaml": "^2.3 | ^3.0 | ^4.0 | ^5.0 | ^6.0 | ^7.0",
                 "unleashedtech/php-coding-standard": "^3.1.1",
                 "vimeo/psalm": "^4.24.0 || ^5.0.0"
             },
@@ -1907,7 +1913,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-main": "2.5-dev"
+                    "dev-main": "2.8-dev"
                 }
             },
             "autoload": {
@@ -1964,7 +1970,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-02-02T11:59:32+00:00"
+            "time": "2025-05-05T12:20:28+00:00"
         },
         {
             "name": "league/config",
@@ -2050,16 +2056,16 @@
         },
         {
             "name": "league/csv",
-            "version": "9.16.0",
+            "version": "9.23.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/thephpleague/csv.git",
-                "reference": "998280c6c34bd67d8125fdc8b45bae28d761b440"
+                "reference": "774008ad8a634448e4f8e288905e070e8b317ff3"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/thephpleague/csv/zipball/998280c6c34bd67d8125fdc8b45bae28d761b440",
-                "reference": "998280c6c34bd67d8125fdc8b45bae28d761b440",
+                "url": "https://api.github.com/repos/thephpleague/csv/zipball/774008ad8a634448e4f8e288905e070e8b317ff3",
+                "reference": "774008ad8a634448e4f8e288905e070e8b317ff3",
                 "shasum": ""
             },
             "require": {
@@ -2067,22 +2073,25 @@
                 "php": "^8.1.2"
             },
             "require-dev": {
-                "doctrine/collections": "^2.2.2",
                 "ext-dom": "*",
                 "ext-xdebug": "*",
-                "friendsofphp/php-cs-fixer": "^3.57.1",
-                "phpbench/phpbench": "^1.2.15",
-                "phpstan/phpstan": "^1.11.1",
-                "phpstan/phpstan-deprecation-rules": "^1.2.0",
-                "phpstan/phpstan-phpunit": "^1.4.0",
-                "phpstan/phpstan-strict-rules": "^1.6.0",
-                "phpunit/phpunit": "^10.5.16 || ^11.1.3",
-                "symfony/var-dumper": "^6.4.6 || ^7.0.7"
+                "friendsofphp/php-cs-fixer": "^3.69.0",
+                "phpbench/phpbench": "^1.4.0",
+                "phpstan/phpstan": "^1.12.18",
+                "phpstan/phpstan-deprecation-rules": "^1.2.1",
+                "phpstan/phpstan-phpunit": "^1.4.2",
+                "phpstan/phpstan-strict-rules": "^1.6.2",
+                "phpunit/phpunit": "^10.5.16 || ^11.5.7",
+                "symfony/var-dumper": "^6.4.8 || ^7.2.3"
             },
             "suggest": {
                 "ext-dom": "Required to use the XMLConverter and the HTMLConverter classes",
                 "ext-iconv": "Needed to ease transcoding CSV using iconv stream filters",
-                "ext-mbstring": "Needed to ease transcoding CSV using mb stream filters"
+                "ext-mbstring": "Needed to ease transcoding CSV using mb stream filters",
+                "ext-mysqli": "Requiered to use the package with the MySQLi extension",
+                "ext-pdo": "Required to use the package with the PDO extension",
+                "ext-pgsql": "Requiered to use the package with the PgSQL extension",
+                "ext-sqlite3": "Required to use the package with the SQLite3 extension"
             },
             "type": "library",
             "extra": {
@@ -2134,20 +2143,20 @@
                     "type": "github"
                 }
             ],
-            "time": "2024-05-24T11:04:54+00:00"
+            "time": "2025-03-28T06:52:04+00:00"
         },
         {
             "name": "league/flysystem",
-            "version": "3.28.0",
+            "version": "3.29.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/thephpleague/flysystem.git",
-                "reference": "e611adab2b1ae2e3072fa72d62c62f52c2bf1f0c"
+                "reference": "edc1bb7c86fab0776c3287dbd19b5fa278347319"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/e611adab2b1ae2e3072fa72d62c62f52c2bf1f0c",
-                "reference": "e611adab2b1ae2e3072fa72d62c62f52c2bf1f0c",
+                "url": "https://api.github.com/repos/thephpleague/flysystem/zipball/edc1bb7c86fab0776c3287dbd19b5fa278347319",
+                "reference": "edc1bb7c86fab0776c3287dbd19b5fa278347319",
                 "shasum": ""
             },
             "require": {
@@ -2215,22 +2224,22 @@
             ],
             "support": {
                 "issues": "https://github.com/thephpleague/flysystem/issues",
-                "source": "https://github.com/thephpleague/flysystem/tree/3.28.0"
+                "source": "https://github.com/thephpleague/flysystem/tree/3.29.1"
             },
-            "time": "2024-05-22T10:09:12+00:00"
+            "time": "2024-10-08T08:58:34+00:00"
         },
         {
             "name": "league/flysystem-local",
-            "version": "3.28.0",
+            "version": "3.29.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/thephpleague/flysystem-local.git",
-                "reference": "13f22ea8be526ea58c2ddff9e158ef7c296e4f40"
+                "reference": "e0e8d52ce4b2ed154148453d321e97c8e931bd27"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/thephpleague/flysystem-local/zipball/13f22ea8be526ea58c2ddff9e158ef7c296e4f40",
-                "reference": "13f22ea8be526ea58c2ddff9e158ef7c296e4f40",
+                "url": "https://api.github.com/repos/thephpleague/flysystem-local/zipball/e0e8d52ce4b2ed154148453d321e97c8e931bd27",
+                "reference": "e0e8d52ce4b2ed154148453d321e97c8e931bd27",
                 "shasum": ""
             },
             "require": {
@@ -2264,22 +2273,22 @@
                 "local"
             ],
             "support": {
-                "source": "https://github.com/thephpleague/flysystem-local/tree/3.28.0"
+                "source": "https://github.com/thephpleague/flysystem-local/tree/3.29.0"
             },
-            "time": "2024-05-06T20:05:52+00:00"
+            "time": "2024-08-09T21:24:39+00:00"
         },
         {
             "name": "league/mime-type-detection",
-            "version": "1.15.0",
+            "version": "1.16.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/thephpleague/mime-type-detection.git",
-                "reference": "ce0f4d1e8a6f4eb0ddff33f57c69c50fd09f4301"
+                "reference": "2d6702ff215bf922936ccc1ad31007edc76451b9"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/thephpleague/mime-type-detection/zipball/ce0f4d1e8a6f4eb0ddff33f57c69c50fd09f4301",
-                "reference": "ce0f4d1e8a6f4eb0ddff33f57c69c50fd09f4301",
+                "url": "https://api.github.com/repos/thephpleague/mime-type-detection/zipball/2d6702ff215bf922936ccc1ad31007edc76451b9",
+                "reference": "2d6702ff215bf922936ccc1ad31007edc76451b9",
                 "shasum": ""
             },
             "require": {
@@ -2310,7 +2319,7 @@
             "description": "Mime-type detection for Flysystem",
             "support": {
                 "issues": "https://github.com/thephpleague/mime-type-detection/issues",
-                "source": "https://github.com/thephpleague/mime-type-detection/tree/1.15.0"
+                "source": "https://github.com/thephpleague/mime-type-detection/tree/1.16.0"
             },
             "funding": [
                 {
@@ -2322,7 +2331,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-01-28T23:22:08+00:00"
+            "time": "2024-09-21T08:32:55+00:00"
         },
         {
             "name": "league/oauth1-client",
@@ -2469,41 +2478,45 @@
         },
         {
             "name": "moneyphp/money",
-            "version": "v3.3.3",
+            "version": "v4.7.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/moneyphp/money.git",
-                "reference": "0dc40e3791c67e8793e3aa13fead8cf4661ec9cd"
+                "reference": "af048f0206d3b39b8fad9de6a230cedf765365fa"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/moneyphp/money/zipball/0dc40e3791c67e8793e3aa13fead8cf4661ec9cd",
-                "reference": "0dc40e3791c67e8793e3aa13fead8cf4661ec9cd",
+                "url": "https://api.github.com/repos/moneyphp/money/zipball/af048f0206d3b39b8fad9de6a230cedf765365fa",
+                "reference": "af048f0206d3b39b8fad9de6a230cedf765365fa",
                 "shasum": ""
             },
             "require": {
+                "ext-bcmath": "*",
+                "ext-filter": "*",
                 "ext-json": "*",
-                "php": ">=5.6"
+                "php": "~8.1.0 || ~8.2.0 || ~8.3.0 || ~8.4.0"
             },
             "require-dev": {
-                "cache/taggable-cache": "^0.4.0",
-                "doctrine/instantiator": "^1.0.5",
-                "ext-bcmath": "*",
+                "cache/taggable-cache": "^1.1.0",
+                "doctrine/coding-standard": "^12.0",
+                "doctrine/instantiator": "^1.5.0 || ^2.0",
                 "ext-gmp": "*",
                 "ext-intl": "*",
-                "florianv/exchanger": "^1.0",
-                "florianv/swap": "^3.0",
-                "friends-of-phpspec/phpspec-code-coverage": "^3.1.1 || ^4.3",
-                "moneyphp/iso-currencies": "^3.2.1",
-                "php-http/message": "^1.4",
-                "php-http/mock-client": "^1.0.0",
-                "phpspec/phpspec": "^3.4.3",
-                "phpunit/phpunit": "^5.7.27 || ^6.5.14 || ^7.5.18 || ^8.5",
-                "psr/cache": "^1.0",
-                "symfony/phpunit-bridge": "^4"
+                "florianv/exchanger": "^2.8.1",
+                "florianv/swap": "^4.3.0",
+                "moneyphp/crypto-currencies": "^1.1.0",
+                "moneyphp/iso-currencies": "^3.4",
+                "php-http/message": "^1.16.0",
+                "php-http/mock-client": "^1.6.0",
+                "phpbench/phpbench": "^1.2.5",
+                "phpstan/extension-installer": "^1.4",
+                "phpstan/phpstan": "^2.1.9",
+                "phpstan/phpstan-phpunit": "^2.0",
+                "phpunit/phpunit": "^10.5.9",
+                "psr/cache": "^1.0.1 || ^2.0 || ^3.0",
+                "ticketswap/phpstan-error-formatter": "^1.1"
             },
             "suggest": {
-                "ext-bcmath": "Calculate without integer limits",
                 "ext-gmp": "Calculate without integer limits",
                 "ext-intl": "Format Money objects with intl",
                 "florianv/exchanger": "Exchange rates library for PHP",
@@ -2549,22 +2562,22 @@
             ],
             "support": {
                 "issues": "https://github.com/moneyphp/money/issues",
-                "source": "https://github.com/moneyphp/money/tree/v3.3.3"
+                "source": "https://github.com/moneyphp/money/tree/v4.7.0"
             },
-            "time": "2022-09-21T07:43:36+00:00"
+            "time": "2025-04-03T08:26:36+00:00"
         },
         {
             "name": "monolog/monolog",
-            "version": "3.7.0",
+            "version": "3.9.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/Seldaek/monolog.git",
-                "reference": "f4393b648b78a5408747de94fca38beb5f7e9ef8"
+                "reference": "10d85740180ecba7896c87e06a166e0c95a0e3b6"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/f4393b648b78a5408747de94fca38beb5f7e9ef8",
-                "reference": "f4393b648b78a5408747de94fca38beb5f7e9ef8",
+                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/10d85740180ecba7896c87e06a166e0c95a0e3b6",
+                "reference": "10d85740180ecba7896c87e06a166e0c95a0e3b6",
                 "shasum": ""
             },
             "require": {
@@ -2584,12 +2597,14 @@
                 "guzzlehttp/psr7": "^2.2",
                 "mongodb/mongodb": "^1.8",
                 "php-amqplib/php-amqplib": "~2.4 || ^3",
-                "phpstan/phpstan": "^1.9",
-                "phpstan/phpstan-deprecation-rules": "^1.0",
-                "phpstan/phpstan-strict-rules": "^1.4",
-                "phpunit/phpunit": "^10.5.17",
+                "php-console/php-console": "^3.1.8",
+                "phpstan/phpstan": "^2",
+                "phpstan/phpstan-deprecation-rules": "^2",
+                "phpstan/phpstan-strict-rules": "^2",
+                "phpunit/phpunit": "^10.5.17 || ^11.0.7",
                 "predis/predis": "^1.1 || ^2",
-                "ruflin/elastica": "^7",
+                "rollbar/rollbar": "^4.0",
+                "ruflin/elastica": "^7 || ^8",
                 "symfony/mailer": "^5.4 || ^6",
                 "symfony/mime": "^5.4 || ^6"
             },
@@ -2640,7 +2655,7 @@
             ],
             "support": {
                 "issues": "https://github.com/Seldaek/monolog/issues",
-                "source": "https://github.com/Seldaek/monolog/tree/3.7.0"
+                "source": "https://github.com/Seldaek/monolog/tree/3.9.0"
             },
             "funding": [
                 {
@@ -2652,20 +2667,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-28T09:40:51+00:00"
+            "time": "2025-03-24T10:02:05+00:00"
         },
         {
             "name": "nesbot/carbon",
-            "version": "2.72.5",
+            "version": "2.73.0",
             "source": {
                 "type": "git",
-                "url": "https://github.com/briannesbitt/Carbon.git",
-                "reference": "afd46589c216118ecd48ff2b95d77596af1e57ed"
+                "url": "https://github.com/CarbonPHP/carbon.git",
+                "reference": "9228ce90e1035ff2f0db84b40ec2e023ed802075"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/briannesbitt/Carbon/zipball/afd46589c216118ecd48ff2b95d77596af1e57ed",
-                "reference": "afd46589c216118ecd48ff2b95d77596af1e57ed",
+                "url": "https://api.github.com/repos/CarbonPHP/carbon/zipball/9228ce90e1035ff2f0db84b40ec2e023ed802075",
+                "reference": "9228ce90e1035ff2f0db84b40ec2e023ed802075",
                 "shasum": ""
             },
             "require": {
@@ -2685,7 +2700,7 @@
                 "doctrine/orm": "^2.7 || ^3.0",
                 "friendsofphp/php-cs-fixer": "^3.0",
                 "kylekatarnls/multi-tester": "^2.0",
-                "ondrejmirtes/better-reflection": "*",
+                "ondrejmirtes/better-reflection": "<6",
                 "phpmd/phpmd": "^2.9",
                 "phpstan/extension-installer": "^1.0",
                 "phpstan/phpstan": "^0.12.99 || ^1.7.14",
@@ -2698,10 +2713,6 @@
             ],
             "type": "library",
             "extra": {
-                "branch-alias": {
-                    "dev-master": "3.x-dev",
-                    "dev-2.x": "2.x-dev"
-                },
                 "laravel": {
                     "providers": [
                         "Carbon\\Laravel\\ServiceProvider"
@@ -2711,6 +2722,10 @@
                     "includes": [
                         "extension.neon"
                     ]
+                },
+                "branch-alias": {
+                    "dev-2.x": "2.x-dev",
+                    "dev-master": "3.x-dev"
                 }
             },
             "autoload": {
@@ -2759,28 +2774,28 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-03T19:18:41+00:00"
+            "time": "2025-01-08T20:10:23+00:00"
         },
         {
             "name": "nette/schema",
-            "version": "v1.3.0",
+            "version": "v1.3.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nette/schema.git",
-                "reference": "a6d3a6d1f545f01ef38e60f375d1cf1f4de98188"
+                "reference": "da801d52f0354f70a638673c4a0f04e16529431d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nette/schema/zipball/a6d3a6d1f545f01ef38e60f375d1cf1f4de98188",
-                "reference": "a6d3a6d1f545f01ef38e60f375d1cf1f4de98188",
+                "url": "https://api.github.com/repos/nette/schema/zipball/da801d52f0354f70a638673c4a0f04e16529431d",
+                "reference": "da801d52f0354f70a638673c4a0f04e16529431d",
                 "shasum": ""
             },
             "require": {
                 "nette/utils": "^4.0",
-                "php": "8.1 - 8.3"
+                "php": "8.1 - 8.4"
             },
             "require-dev": {
-                "nette/tester": "^2.4",
+                "nette/tester": "^2.5.2",
                 "phpstan/phpstan-nette": "^1.0",
                 "tracy/tracy": "^2.8"
             },
@@ -2819,26 +2834,26 @@
             ],
             "support": {
                 "issues": "https://github.com/nette/schema/issues",
-                "source": "https://github.com/nette/schema/tree/v1.3.0"
+                "source": "https://github.com/nette/schema/tree/v1.3.2"
             },
-            "time": "2023-12-11T11:54:22+00:00"
+            "time": "2024-10-06T23:10:23+00:00"
         },
         {
             "name": "nette/utils",
-            "version": "v4.0.4",
+            "version": "v4.0.6",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nette/utils.git",
-                "reference": "d3ad0aa3b9f934602cb3e3902ebccf10be34d218"
+                "reference": "ce708655043c7050eb050df361c5e313cf708309"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nette/utils/zipball/d3ad0aa3b9f934602cb3e3902ebccf10be34d218",
-                "reference": "d3ad0aa3b9f934602cb3e3902ebccf10be34d218",
+                "url": "https://api.github.com/repos/nette/utils/zipball/ce708655043c7050eb050df361c5e313cf708309",
+                "reference": "ce708655043c7050eb050df361c5e313cf708309",
                 "shasum": ""
             },
             "require": {
-                "php": ">=8.0 <8.4"
+                "php": "8.0 - 8.4"
             },
             "conflict": {
                 "nette/finder": "<3",
@@ -2905,22 +2920,22 @@
             ],
             "support": {
                 "issues": "https://github.com/nette/utils/issues",
-                "source": "https://github.com/nette/utils/tree/v4.0.4"
+                "source": "https://github.com/nette/utils/tree/v4.0.6"
             },
-            "time": "2024-01-17T16:50:36+00:00"
+            "time": "2025-03-30T21:06:30+00:00"
         },
         {
             "name": "nikic/php-parser",
-            "version": "v5.1.0",
+            "version": "v5.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nikic/PHP-Parser.git",
-                "reference": "683130c2ff8c2739f4822ff7ac5c873ec529abd1"
+                "reference": "447a020a1f875a434d62f2a401f53b82a396e494"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/683130c2ff8c2739f4822ff7ac5c873ec529abd1",
-                "reference": "683130c2ff8c2739f4822ff7ac5c873ec529abd1",
+                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/447a020a1f875a434d62f2a401f53b82a396e494",
+                "reference": "447a020a1f875a434d62f2a401f53b82a396e494",
                 "shasum": ""
             },
             "require": {
@@ -2963,39 +2978,38 @@
             ],
             "support": {
                 "issues": "https://github.com/nikic/PHP-Parser/issues",
-                "source": "https://github.com/nikic/PHP-Parser/tree/v5.1.0"
+                "source": "https://github.com/nikic/PHP-Parser/tree/v5.4.0"
             },
-            "time": "2024-07-01T20:03:41+00:00"
+            "time": "2024-12-30T11:07:19+00:00"
         },
         {
             "name": "nunomaduro/termwind",
-            "version": "v1.15.1",
+            "version": "v1.17.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nunomaduro/termwind.git",
-                "reference": "8ab0b32c8caa4a2e09700ea32925441385e4a5dc"
+                "reference": "5369ef84d8142c1d87e4ec278711d4ece3cbf301"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nunomaduro/termwind/zipball/8ab0b32c8caa4a2e09700ea32925441385e4a5dc",
-                "reference": "8ab0b32c8caa4a2e09700ea32925441385e4a5dc",
+                "url": "https://api.github.com/repos/nunomaduro/termwind/zipball/5369ef84d8142c1d87e4ec278711d4ece3cbf301",
+                "reference": "5369ef84d8142c1d87e4ec278711d4ece3cbf301",
                 "shasum": ""
             },
             "require": {
                 "ext-mbstring": "*",
-                "php": "^8.0",
-                "symfony/console": "^5.3.0|^6.0.0"
+                "php": "^8.1",
+                "symfony/console": "^6.4.15"
             },
             "require-dev": {
-                "ergebnis/phpstan-rules": "^1.0.",
-                "illuminate/console": "^8.0|^9.0",
-                "illuminate/support": "^8.0|^9.0",
-                "laravel/pint": "^1.0.0",
-                "pestphp/pest": "^1.21.0",
-                "pestphp/pest-plugin-mock": "^1.0",
-                "phpstan/phpstan": "^1.4.6",
-                "phpstan/phpstan-strict-rules": "^1.1.0",
-                "symfony/var-dumper": "^5.2.7|^6.0.0",
+                "illuminate/console": "^10.48.24",
+                "illuminate/support": "^10.48.24",
+                "laravel/pint": "^1.18.2",
+                "pestphp/pest": "^2.36.0",
+                "pestphp/pest-plugin-mock": "2.0.0",
+                "phpstan/phpstan": "^1.12.11",
+                "phpstan/phpstan-strict-rules": "^1.6.1",
+                "symfony/var-dumper": "^6.4.15",
                 "thecodingmachine/phpstan-strict-rules": "^1.0.0"
             },
             "type": "library",
@@ -3035,7 +3049,7 @@
             ],
             "support": {
                 "issues": "https://github.com/nunomaduro/termwind/issues",
-                "source": "https://github.com/nunomaduro/termwind/tree/v1.15.1"
+                "source": "https://github.com/nunomaduro/termwind/tree/v1.17.0"
             },
             "funding": [
                 {
@@ -3051,7 +3065,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-02-08T01:06:31+00:00"
+            "time": "2024-11-21T10:36:35+00:00"
         },
         {
             "name": "paragonie/constant_time_encoding",
@@ -3262,16 +3276,16 @@
         },
         {
             "name": "phpoption/phpoption",
-            "version": "1.9.2",
+            "version": "1.9.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/schmittjoh/php-option.git",
-                "reference": "80735db690fe4fc5c76dfa7f9b770634285fa820"
+                "reference": "e3fac8b24f56113f7cb96af14958c0dd16330f54"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/80735db690fe4fc5c76dfa7f9b770634285fa820",
-                "reference": "80735db690fe4fc5c76dfa7f9b770634285fa820",
+                "url": "https://api.github.com/repos/schmittjoh/php-option/zipball/e3fac8b24f56113f7cb96af14958c0dd16330f54",
+                "reference": "e3fac8b24f56113f7cb96af14958c0dd16330f54",
                 "shasum": ""
             },
             "require": {
@@ -3279,13 +3293,13 @@
             },
             "require-dev": {
                 "bamarni/composer-bin-plugin": "^1.8.2",
-                "phpunit/phpunit": "^8.5.34 || ^9.6.13 || ^10.4.2"
+                "phpunit/phpunit": "^8.5.39 || ^9.6.20 || ^10.5.28"
             },
             "type": "library",
             "extra": {
                 "bamarni-bin": {
                     "bin-links": true,
-                    "forward-command": true
+                    "forward-command": false
                 },
                 "branch-alias": {
                     "dev-master": "1.9-dev"
@@ -3321,7 +3335,7 @@
             ],
             "support": {
                 "issues": "https://github.com/schmittjoh/php-option/issues",
-                "source": "https://github.com/schmittjoh/php-option/tree/1.9.2"
+                "source": "https://github.com/schmittjoh/php-option/tree/1.9.3"
             },
             "funding": [
                 {
@@ -3333,7 +3347,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-11-12T21:59:55+00:00"
+            "time": "2024-07-20T21:41:07+00:00"
         },
         {
             "name": "phpseclib/phpseclib",
@@ -3758,16 +3772,16 @@
         },
         {
             "name": "psr/log",
-            "version": "3.0.0",
+            "version": "3.0.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/php-fig/log.git",
-                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001"
+                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/php-fig/log/zipball/fe5ea303b0887d5caefd3d431c3e61ad47037001",
-                "reference": "fe5ea303b0887d5caefd3d431c3e61ad47037001",
+                "url": "https://api.github.com/repos/php-fig/log/zipball/f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
+                "reference": "f16e1d5863e37f8d8c2a01719f5b34baa2b714d3",
                 "shasum": ""
             },
             "require": {
@@ -3802,9 +3816,9 @@
                 "psr-3"
             ],
             "support": {
-                "source": "https://github.com/php-fig/log/tree/3.0.0"
+                "source": "https://github.com/php-fig/log/tree/3.0.2"
             },
-            "time": "2021-07-14T16:46:02+00:00"
+            "time": "2024-09-11T13:17:53+00:00"
         },
         {
             "name": "psr/simple-cache",
@@ -3859,16 +3873,16 @@
         },
         {
             "name": "psy/psysh",
-            "version": "v0.12.4",
+            "version": "v0.12.8",
             "source": {
                 "type": "git",
                 "url": "https://github.com/bobthecow/psysh.git",
-                "reference": "2fd717afa05341b4f8152547f142cd2f130f6818"
+                "reference": "85057ceedee50c49d4f6ecaff73ee96adb3b3625"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/bobthecow/psysh/zipball/2fd717afa05341b4f8152547f142cd2f130f6818",
-                "reference": "2fd717afa05341b4f8152547f142cd2f130f6818",
+                "url": "https://api.github.com/repos/bobthecow/psysh/zipball/85057ceedee50c49d4f6ecaff73ee96adb3b3625",
+                "reference": "85057ceedee50c49d4f6ecaff73ee96adb3b3625",
                 "shasum": ""
             },
             "require": {
@@ -3895,12 +3909,12 @@
             ],
             "type": "library",
             "extra": {
-                "branch-alias": {
-                    "dev-main": "0.12.x-dev"
-                },
                 "bamarni-bin": {
                     "bin-links": false,
                     "forward-command": false
+                },
+                "branch-alias": {
+                    "dev-main": "0.12.x-dev"
                 }
             },
             "autoload": {
@@ -3932,9 +3946,9 @@
             ],
             "support": {
                 "issues": "https://github.com/bobthecow/psysh/issues",
-                "source": "https://github.com/bobthecow/psysh/tree/v0.12.4"
+                "source": "https://github.com/bobthecow/psysh/tree/v0.12.8"
             },
-            "time": "2024-06-10T01:18:23+00:00"
+            "time": "2025-03-16T03:05:19+00:00"
         },
         {
             "name": "ralouphie/getallheaders",
@@ -3982,16 +3996,16 @@
         },
         {
             "name": "ramsey/collection",
-            "version": "2.0.0",
+            "version": "2.1.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/ramsey/collection.git",
-                "reference": "a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5"
+                "reference": "344572933ad0181accbf4ba763e85a0306a8c5e2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/ramsey/collection/zipball/a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5",
-                "reference": "a4b48764bfbb8f3a6a4d1aeb1a35bb5e9ecac4a5",
+                "url": "https://api.github.com/repos/ramsey/collection/zipball/344572933ad0181accbf4ba763e85a0306a8c5e2",
+                "reference": "344572933ad0181accbf4ba763e85a0306a8c5e2",
                 "shasum": ""
             },
             "require": {
@@ -3999,25 +4013,22 @@
             },
             "require-dev": {
                 "captainhook/plugin-composer": "^5.3",
-                "ergebnis/composer-normalize": "^2.28.3",
-                "fakerphp/faker": "^1.21",
+                "ergebnis/composer-normalize": "^2.45",
+                "fakerphp/faker": "^1.24",
                 "hamcrest/hamcrest-php": "^2.0",
-                "jangregor/phpstan-prophecy": "^1.0",
-                "mockery/mockery": "^1.5",
+                "jangregor/phpstan-prophecy": "^2.1",
+                "mockery/mockery": "^1.6",
                 "php-parallel-lint/php-console-highlighter": "^1.0",
-                "php-parallel-lint/php-parallel-lint": "^1.3",
-                "phpcsstandards/phpcsutils": "^1.0.0-rc1",
-                "phpspec/prophecy-phpunit": "^2.0",
-                "phpstan/extension-installer": "^1.2",
-                "phpstan/phpstan": "^1.9",
-                "phpstan/phpstan-mockery": "^1.1",
-                "phpstan/phpstan-phpunit": "^1.3",
-                "phpunit/phpunit": "^9.5",
-                "psalm/plugin-mockery": "^1.1",
-                "psalm/plugin-phpunit": "^0.18.4",
-                "ramsey/coding-standard": "^2.0.3",
-                "ramsey/conventional-commits": "^1.3",
-                "vimeo/psalm": "^5.4"
+                "php-parallel-lint/php-parallel-lint": "^1.4",
+                "phpspec/prophecy-phpunit": "^2.3",
+                "phpstan/extension-installer": "^1.4",
+                "phpstan/phpstan": "^2.1",
+                "phpstan/phpstan-mockery": "^2.0",
+                "phpstan/phpstan-phpunit": "^2.0",
+                "phpunit/phpunit": "^10.5",
+                "ramsey/coding-standard": "^2.3",
+                "ramsey/conventional-commits": "^1.6",
+                "roave/security-advisories": "dev-latest"
             },
             "type": "library",
             "extra": {
@@ -4055,19 +4066,9 @@
             ],
             "support": {
                 "issues": "https://github.com/ramsey/collection/issues",
-                "source": "https://github.com/ramsey/collection/tree/2.0.0"
+                "source": "https://github.com/ramsey/collection/tree/2.1.1"
             },
-            "funding": [
-                {
-                    "url": "https://github.com/ramsey",
-                    "type": "github"
-                },
-                {
-                    "url": "https://tidelift.com/funding/github/packagist/ramsey/collection",
-                    "type": "tidelift"
-                }
-            ],
-            "time": "2022-12-31T21:50:55+00:00"
+            "time": "2025-03-22T05:38:12+00:00"
         },
         {
             "name": "ramsey/uuid",
@@ -4289,16 +4290,16 @@
         },
         {
             "name": "symfony/console",
-            "version": "v6.4.9",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/console.git",
-                "reference": "6edb5363ec0c78ad4d48c5128ebf4d083d89d3a9"
+                "reference": "a3011c7b7adb58d89f6c0d822abb641d7a5f9719"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/console/zipball/6edb5363ec0c78ad4d48c5128ebf4d083d89d3a9",
-                "reference": "6edb5363ec0c78ad4d48c5128ebf4d083d89d3a9",
+                "url": "https://api.github.com/repos/symfony/console/zipball/a3011c7b7adb58d89f6c0d822abb641d7a5f9719",
+                "reference": "a3011c7b7adb58d89f6c0d822abb641d7a5f9719",
                 "shasum": ""
             },
             "require": {
@@ -4363,7 +4364,7 @@
                 "terminal"
             ],
             "support": {
-                "source": "https://github.com/symfony/console/tree/v6.4.9"
+                "source": "https://github.com/symfony/console/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -4379,24 +4380,24 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-28T09:49:33+00:00"
+            "time": "2025-04-07T15:42:41+00:00"
         },
         {
             "name": "symfony/css-selector",
-            "version": "v7.1.1",
+            "version": "v6.4.13",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/css-selector.git",
-                "reference": "1c7cee86c6f812896af54434f8ce29c8d94f9ff4"
+                "reference": "cb23e97813c5837a041b73a6d63a9ddff0778f5e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/css-selector/zipball/1c7cee86c6f812896af54434f8ce29c8d94f9ff4",
-                "reference": "1c7cee86c6f812896af54434f8ce29c8d94f9ff4",
+                "url": "https://api.github.com/repos/symfony/css-selector/zipball/cb23e97813c5837a041b73a6d63a9ddff0778f5e",
+                "reference": "cb23e97813c5837a041b73a6d63a9ddff0778f5e",
                 "shasum": ""
             },
             "require": {
-                "php": ">=8.2"
+                "php": ">=8.1"
             },
             "type": "library",
             "autoload": {
@@ -4428,7 +4429,7 @@
             "description": "Converts CSS selectors to XPath expressions",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/css-selector/tree/v7.1.1"
+                "source": "https://github.com/symfony/css-selector/tree/v6.4.13"
             },
             "funding": [
                 {
@@ -4444,20 +4445,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:57:53+00:00"
+            "time": "2024-09-25T14:18:03+00:00"
         },
         {
             "name": "symfony/deprecation-contracts",
-            "version": "v3.5.0",
+            "version": "v3.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/deprecation-contracts.git",
-                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1"
+                "reference": "74c71c939a79f7d5bf3c1ce9f5ea37ba0114c6f6"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
-                "reference": "0e0d29ce1f20deffb4ab1b016a7257c4f1e789a1",
+                "url": "https://api.github.com/repos/symfony/deprecation-contracts/zipball/74c71c939a79f7d5bf3c1ce9f5ea37ba0114c6f6",
+                "reference": "74c71c939a79f7d5bf3c1ce9f5ea37ba0114c6f6",
                 "shasum": ""
             },
             "require": {
@@ -4465,12 +4466,12 @@
             },
             "type": "library",
             "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/contracts",
+                    "name": "symfony/contracts"
+                },
                 "branch-alias": {
                     "dev-main": "3.5-dev"
-                },
-                "thanks": {
-                    "name": "symfony/contracts",
-                    "url": "https://github.com/symfony/contracts"
                 }
             },
             "autoload": {
@@ -4495,7 +4496,7 @@
             "description": "A generic function and convention to trigger deprecation notices",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.0"
+                "source": "https://github.com/symfony/deprecation-contracts/tree/v3.5.1"
             },
             "funding": [
                 {
@@ -4511,20 +4512,87 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-04-18T09:32:20+00:00"
+            "time": "2024-09-25T14:20:29+00:00"
+        },
+        {
+            "name": "symfony/dom-crawler",
+            "version": "v6.4.19",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/dom-crawler.git",
+                "reference": "19073e3e0bb50cbc1cb286077069b3107085206f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/dom-crawler/zipball/19073e3e0bb50cbc1cb286077069b3107085206f",
+                "reference": "19073e3e0bb50cbc1cb286077069b3107085206f",
+                "shasum": ""
+            },
+            "require": {
+                "masterminds/html5": "^2.6",
+                "php": ">=8.1",
+                "symfony/polyfill-ctype": "~1.8",
+                "symfony/polyfill-mbstring": "~1.0"
+            },
+            "require-dev": {
+                "symfony/css-selector": "^5.4|^6.0|^7.0"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Symfony\\Component\\DomCrawler\\": ""
+                },
+                "exclude-from-classmap": [
+                    "/Tests/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                },
+                {
+                    "name": "Symfony Community",
+                    "homepage": "https://symfony.com/contributors"
+                }
+            ],
+            "description": "Eases DOM navigation for HTML and XML documents",
+            "homepage": "https://symfony.com",
+            "support": {
+                "source": "https://github.com/symfony/dom-crawler/tree/v6.4.19"
+            },
+            "funding": [
+                {
+                    "url": "https://symfony.com/sponsor",
+                    "type": "custom"
+                },
+                {
+                    "url": "https://github.com/fabpot",
+                    "type": "github"
+                },
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2025-02-14T17:58:34+00:00"
         },
         {
             "name": "symfony/error-handler",
-            "version": "v6.4.9",
+            "version": "v6.4.20",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/error-handler.git",
-                "reference": "c9b7cc075b3ab484239855622ca05cb0b99c13ec"
+                "reference": "aa3bcf4f7674719df078e61cc8062e5b7f752031"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/error-handler/zipball/c9b7cc075b3ab484239855622ca05cb0b99c13ec",
-                "reference": "c9b7cc075b3ab484239855622ca05cb0b99c13ec",
+                "url": "https://api.github.com/repos/symfony/error-handler/zipball/aa3bcf4f7674719df078e61cc8062e5b7f752031",
+                "reference": "aa3bcf4f7674719df078e61cc8062e5b7f752031",
                 "shasum": ""
             },
             "require": {
@@ -4570,7 +4638,7 @@
             "description": "Provides tools to manage errors and ease debugging PHP code",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/error-handler/tree/v6.4.9"
+                "source": "https://github.com/symfony/error-handler/tree/v6.4.20"
             },
             "funding": [
                 {
@@ -4586,20 +4654,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-21T16:04:15+00:00"
+            "time": "2025-03-01T13:00:38+00:00"
         },
         {
             "name": "symfony/event-dispatcher",
-            "version": "v7.1.1",
+            "version": "v7.2.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/event-dispatcher.git",
-                "reference": "9fa7f7a21beb22a39a8f3f28618b29e50d7a55a7"
+                "reference": "910c5db85a5356d0fea57680defec4e99eb9c8c1"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/9fa7f7a21beb22a39a8f3f28618b29e50d7a55a7",
-                "reference": "9fa7f7a21beb22a39a8f3f28618b29e50d7a55a7",
+                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/910c5db85a5356d0fea57680defec4e99eb9c8c1",
+                "reference": "910c5db85a5356d0fea57680defec4e99eb9c8c1",
                 "shasum": ""
             },
             "require": {
@@ -4650,7 +4718,7 @@
             "description": "Provides tools that allow your application components to communicate with each other by dispatching events and listening to them",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/event-dispatcher/tree/v7.1.1"
+                "source": "https://github.com/symfony/event-dispatcher/tree/v7.2.0"
             },
             "funding": [
                 {
@@ -4666,20 +4734,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:57:53+00:00"
+            "time": "2024-09-25T14:21:43+00:00"
         },
         {
             "name": "symfony/event-dispatcher-contracts",
-            "version": "v3.5.0",
+            "version": "v3.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/event-dispatcher-contracts.git",
-                "reference": "8f93aec25d41b72493c6ddff14e916177c9efc50"
+                "reference": "7642f5e970b672283b7823222ae8ef8bbc160b9f"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/8f93aec25d41b72493c6ddff14e916177c9efc50",
-                "reference": "8f93aec25d41b72493c6ddff14e916177c9efc50",
+                "url": "https://api.github.com/repos/symfony/event-dispatcher-contracts/zipball/7642f5e970b672283b7823222ae8ef8bbc160b9f",
+                "reference": "7642f5e970b672283b7823222ae8ef8bbc160b9f",
                 "shasum": ""
             },
             "require": {
@@ -4688,12 +4756,12 @@
             },
             "type": "library",
             "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/contracts",
+                    "name": "symfony/contracts"
+                },
                 "branch-alias": {
                     "dev-main": "3.5-dev"
-                },
-                "thanks": {
-                    "name": "symfony/contracts",
-                    "url": "https://github.com/symfony/contracts"
                 }
             },
             "autoload": {
@@ -4726,7 +4794,7 @@
                 "standards"
             ],
             "support": {
-                "source": "https://github.com/symfony/event-dispatcher-contracts/tree/v3.5.0"
+                "source": "https://github.com/symfony/event-dispatcher-contracts/tree/v3.5.1"
             },
             "funding": [
                 {
@@ -4742,20 +4810,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-04-18T09:32:20+00:00"
+            "time": "2024-09-25T14:20:29+00:00"
         },
         {
             "name": "symfony/finder",
-            "version": "v6.4.8",
+            "version": "v6.4.17",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/finder.git",
-                "reference": "3ef977a43883215d560a2cecb82ec8e62131471c"
+                "reference": "1d0e8266248c5d9ab6a87e3789e6dc482af3c9c7"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/finder/zipball/3ef977a43883215d560a2cecb82ec8e62131471c",
-                "reference": "3ef977a43883215d560a2cecb82ec8e62131471c",
+                "url": "https://api.github.com/repos/symfony/finder/zipball/1d0e8266248c5d9ab6a87e3789e6dc482af3c9c7",
+                "reference": "1d0e8266248c5d9ab6a87e3789e6dc482af3c9c7",
                 "shasum": ""
             },
             "require": {
@@ -4790,7 +4858,7 @@
             "description": "Finds files and directories via an intuitive fluent interface",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/finder/tree/v6.4.8"
+                "source": "https://github.com/symfony/finder/tree/v6.4.17"
             },
             "funding": [
                 {
@@ -4806,20 +4874,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:49:08+00:00"
+            "time": "2024-12-29T13:51:37+00:00"
         },
         {
             "name": "symfony/http-foundation",
-            "version": "v6.4.8",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/http-foundation.git",
-                "reference": "27de8cc95e11db7a50b027e71caaab9024545947"
+                "reference": "3f0c7ea41db479383b81d436b836d37168fd5b99"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/27de8cc95e11db7a50b027e71caaab9024545947",
-                "reference": "27de8cc95e11db7a50b027e71caaab9024545947",
+                "url": "https://api.github.com/repos/symfony/http-foundation/zipball/3f0c7ea41db479383b81d436b836d37168fd5b99",
+                "reference": "3f0c7ea41db479383b81d436b836d37168fd5b99",
                 "shasum": ""
             },
             "require": {
@@ -4829,12 +4897,12 @@
                 "symfony/polyfill-php83": "^1.27"
             },
             "conflict": {
-                "symfony/cache": "<6.3"
+                "symfony/cache": "<6.4.12|>=7.0,<7.1.5"
             },
             "require-dev": {
                 "doctrine/dbal": "^2.13.1|^3|^4",
                 "predis/predis": "^1.1|^2.0",
-                "symfony/cache": "^6.3|^7.0",
+                "symfony/cache": "^6.4.12|^7.1.5",
                 "symfony/dependency-injection": "^5.4|^6.0|^7.0",
                 "symfony/expression-language": "^5.4|^6.0|^7.0",
                 "symfony/http-kernel": "^5.4.12|^6.0.12|^6.1.4|^7.0",
@@ -4867,7 +4935,7 @@
             "description": "Defines an object-oriented layer for the HTTP specification",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/http-foundation/tree/v6.4.8"
+                "source": "https://github.com/symfony/http-foundation/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -4883,20 +4951,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:49:08+00:00"
+            "time": "2025-04-27T13:27:38+00:00"
         },
         {
             "name": "symfony/http-kernel",
-            "version": "v6.4.9",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/http-kernel.git",
-                "reference": "cc4a9bec6e1bdd2405f40277a68a6ed1bb393005"
+                "reference": "983ca05eec6623920d24ec0f1005f487d3734a0c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/http-kernel/zipball/cc4a9bec6e1bdd2405f40277a68a6ed1bb393005",
-                "reference": "cc4a9bec6e1bdd2405f40277a68a6ed1bb393005",
+                "url": "https://api.github.com/repos/symfony/http-kernel/zipball/983ca05eec6623920d24ec0f1005f487d3734a0c",
+                "reference": "983ca05eec6623920d24ec0f1005f487d3734a0c",
                 "shasum": ""
             },
             "require": {
@@ -4981,7 +5049,7 @@
             "description": "Provides a structured process for converting a Request into a Response",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/http-kernel/tree/v6.4.9"
+                "source": "https://github.com/symfony/http-kernel/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -4997,20 +5065,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-28T11:48:06+00:00"
+            "time": "2025-05-02T08:46:38+00:00"
         },
         {
             "name": "symfony/mailer",
-            "version": "v6.4.9",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/mailer.git",
-                "reference": "e2d56f180f5b8c5e7c0fbea872bb1f529b6d6d45"
+                "reference": "ada2809ccd4ec27aba9fc344e3efdaec624c6438"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/mailer/zipball/e2d56f180f5b8c5e7c0fbea872bb1f529b6d6d45",
-                "reference": "e2d56f180f5b8c5e7c0fbea872bb1f529b6d6d45",
+                "url": "https://api.github.com/repos/symfony/mailer/zipball/ada2809ccd4ec27aba9fc344e3efdaec624c6438",
+                "reference": "ada2809ccd4ec27aba9fc344e3efdaec624c6438",
                 "shasum": ""
             },
             "require": {
@@ -5061,7 +5129,7 @@
             "description": "Helps sending emails",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/mailer/tree/v6.4.9"
+                "source": "https://github.com/symfony/mailer/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -5077,20 +5145,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-28T07:59:05+00:00"
+            "time": "2025-04-26T23:47:35+00:00"
         },
         {
             "name": "symfony/mime",
-            "version": "v6.4.9",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/mime.git",
-                "reference": "7d048964877324debdcb4e0549becfa064a20d43"
+                "reference": "fec8aa5231f3904754955fad33c2db50594d22d1"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/mime/zipball/7d048964877324debdcb4e0549becfa064a20d43",
-                "reference": "7d048964877324debdcb4e0549becfa064a20d43",
+                "url": "https://api.github.com/repos/symfony/mime/zipball/fec8aa5231f3904754955fad33c2db50594d22d1",
+                "reference": "fec8aa5231f3904754955fad33c2db50594d22d1",
                 "shasum": ""
             },
             "require": {
@@ -5146,7 +5214,7 @@
                 "mime-type"
             ],
             "support": {
-                "source": "https://github.com/symfony/mime/tree/v6.4.9"
+                "source": "https://github.com/symfony/mime/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -5162,24 +5230,24 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-28T09:49:33+00:00"
+            "time": "2025-04-27T13:27:38+00:00"
         },
         {
             "name": "symfony/polyfill-ctype",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-ctype.git",
-                "reference": "0424dff1c58f028c451efff2045f5d92410bd540"
+                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/0424dff1c58f028c451efff2045f5d92410bd540",
-                "reference": "0424dff1c58f028c451efff2045f5d92410bd540",
+                "url": "https://api.github.com/repos/symfony/polyfill-ctype/zipball/a3cc8b044a6ea513310cbd48ef7333b384945638",
+                "reference": "a3cc8b044a6ea513310cbd48ef7333b384945638",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "php": ">=7.2"
             },
             "provide": {
                 "ext-ctype": "*"
@@ -5190,8 +5258,8 @@
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5225,7 +5293,7 @@
                 "portable"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-ctype/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5241,24 +5309,24 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T15:07:36+00:00"
+            "time": "2024-09-09T11:45:10+00:00"
         },
         {
             "name": "symfony/polyfill-intl-grapheme",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-intl-grapheme.git",
-                "reference": "64647a7c30b2283f5d49b874d84a18fc22054b7a"
+                "reference": "b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/64647a7c30b2283f5d49b874d84a18fc22054b7a",
-                "reference": "64647a7c30b2283f5d49b874d84a18fc22054b7a",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-grapheme/zipball/b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe",
+                "reference": "b9123926e3b7bc2f98c02ad54f6a4b02b91a8abe",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "php": ">=7.2"
             },
             "suggest": {
                 "ext-intl": "For best performance"
@@ -5266,8 +5334,8 @@
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5303,7 +5371,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-intl-grapheme/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5319,7 +5387,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T15:07:36+00:00"
+            "time": "2024-09-09T11:45:10+00:00"
         },
         {
             "name": "symfony/polyfill-intl-icu",
@@ -5407,22 +5475,21 @@
         },
         {
             "name": "symfony/polyfill-intl-idn",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-intl-idn.git",
-                "reference": "a6e83bdeb3c84391d1dfe16f42e40727ce524a5c"
+                "reference": "9614ac4d8061dc257ecc64cba1b140873dce8ad3"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/a6e83bdeb3c84391d1dfe16f42e40727ce524a5c",
-                "reference": "a6e83bdeb3c84391d1dfe16f42e40727ce524a5c",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-idn/zipball/9614ac4d8061dc257ecc64cba1b140873dce8ad3",
+                "reference": "9614ac4d8061dc257ecc64cba1b140873dce8ad3",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1",
-                "symfony/polyfill-intl-normalizer": "^1.10",
-                "symfony/polyfill-php72": "^1.10"
+                "php": ">=7.2",
+                "symfony/polyfill-intl-normalizer": "^1.10"
             },
             "suggest": {
                 "ext-intl": "For best performance"
@@ -5430,8 +5497,8 @@
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5471,7 +5538,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-intl-idn/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-intl-idn/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5487,24 +5554,24 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T15:07:36+00:00"
+            "time": "2024-09-10T14:38:51+00:00"
         },
         {
             "name": "symfony/polyfill-intl-normalizer",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-intl-normalizer.git",
-                "reference": "a95281b0be0d9ab48050ebd988b967875cdb9fdb"
+                "reference": "3833d7255cc303546435cb650316bff708a1c75c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/a95281b0be0d9ab48050ebd988b967875cdb9fdb",
-                "reference": "a95281b0be0d9ab48050ebd988b967875cdb9fdb",
+                "url": "https://api.github.com/repos/symfony/polyfill-intl-normalizer/zipball/3833d7255cc303546435cb650316bff708a1c75c",
+                "reference": "3833d7255cc303546435cb650316bff708a1c75c",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "php": ">=7.2"
             },
             "suggest": {
                 "ext-intl": "For best performance"
@@ -5512,8 +5579,8 @@
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5552,7 +5619,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-intl-normalizer/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5568,24 +5635,25 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T15:07:36+00:00"
+            "time": "2024-09-09T11:45:10+00:00"
         },
         {
             "name": "symfony/polyfill-mbstring",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-mbstring.git",
-                "reference": "fd22ab50000ef01661e2a31d850ebaa297f8e03c"
+                "reference": "6d857f4d76bd4b343eac26d6b539585d2bc56493"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/fd22ab50000ef01661e2a31d850ebaa297f8e03c",
-                "reference": "fd22ab50000ef01661e2a31d850ebaa297f8e03c",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/6d857f4d76bd4b343eac26d6b539585d2bc56493",
+                "reference": "6d857f4d76bd4b343eac26d6b539585d2bc56493",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "ext-iconv": "*",
+                "php": ">=7.2"
             },
             "provide": {
                 "ext-mbstring": "*"
@@ -5596,8 +5664,8 @@
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5632,7 +5700,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-mbstring/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5648,103 +5716,30 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-19T12:30:46+00:00"
-        },
-        {
-            "name": "symfony/polyfill-php72",
-            "version": "v1.30.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/polyfill-php72.git",
-                "reference": "10112722600777e02d2745716b70c5db4ca70442"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-php72/zipball/10112722600777e02d2745716b70c5db4ca70442",
-                "reference": "10112722600777e02d2745716b70c5db4ca70442",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=7.1"
-            },
-            "type": "library",
-            "extra": {
-                "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
-                }
-            },
-            "autoload": {
-                "files": [
-                    "bootstrap.php"
-                ],
-                "psr-4": {
-                    "Symfony\\Polyfill\\Php72\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Nicolas Grekas",
-                    "email": "p@tchwork.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "https://symfony.com/contributors"
-                }
-            ],
-            "description": "Symfony polyfill backporting some PHP 7.2+ features to lower PHP versions",
-            "homepage": "https://symfony.com",
-            "keywords": [
-                "compatibility",
-                "polyfill",
-                "portable",
-                "shim"
-            ],
-            "support": {
-                "source": "https://github.com/symfony/polyfill-php72/tree/v1.30.0"
-            },
-            "funding": [
-                {
-                    "url": "https://symfony.com/sponsor",
-                    "type": "custom"
-                },
-                {
-                    "url": "https://github.com/fabpot",
-                    "type": "github"
-                },
-                {
-                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
-                    "type": "tidelift"
-                }
-            ],
-            "time": "2024-06-19T12:30:46+00:00"
+            "time": "2024-12-23T08:48:59+00:00"
         },
         {
             "name": "symfony/polyfill-php80",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-php80.git",
-                "reference": "77fa7995ac1b21ab60769b7323d600a991a90433"
+                "reference": "0cc9dd0f17f61d8131e7df6b84bd344899fe2608"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/77fa7995ac1b21ab60769b7323d600a991a90433",
-                "reference": "77fa7995ac1b21ab60769b7323d600a991a90433",
+                "url": "https://api.github.com/repos/symfony/polyfill-php80/zipball/0cc9dd0f17f61d8131e7df6b84bd344899fe2608",
+                "reference": "0cc9dd0f17f61d8131e7df6b84bd344899fe2608",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "php": ">=7.2"
             },
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5785,7 +5780,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-php80/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-php80/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5801,30 +5796,30 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T15:07:36+00:00"
+            "time": "2025-01-02T08:10:11+00:00"
         },
         {
             "name": "symfony/polyfill-php83",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-php83.git",
-                "reference": "dbdcdf1a4dcc2743591f1079d0c35ab1e2dcbbc9"
+                "reference": "2fb86d65e2d424369ad2905e83b236a8805ba491"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-php83/zipball/dbdcdf1a4dcc2743591f1079d0c35ab1e2dcbbc9",
-                "reference": "dbdcdf1a4dcc2743591f1079d0c35ab1e2dcbbc9",
+                "url": "https://api.github.com/repos/symfony/polyfill-php83/zipball/2fb86d65e2d424369ad2905e83b236a8805ba491",
+                "reference": "2fb86d65e2d424369ad2905e83b236a8805ba491",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "php": ">=7.2"
             },
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5861,7 +5856,7 @@
                 "shim"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-php83/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-php83/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5877,24 +5872,24 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-19T12:35:24+00:00"
+            "time": "2024-09-09T11:45:10+00:00"
         },
         {
             "name": "symfony/polyfill-uuid",
-            "version": "v1.30.0",
+            "version": "v1.32.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-uuid.git",
-                "reference": "2ba1f33797470debcda07fe9dce20a0003df18e9"
+                "reference": "21533be36c24be3f4b1669c4725c7d1d2bab4ae2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-uuid/zipball/2ba1f33797470debcda07fe9dce20a0003df18e9",
-                "reference": "2ba1f33797470debcda07fe9dce20a0003df18e9",
+                "url": "https://api.github.com/repos/symfony/polyfill-uuid/zipball/21533be36c24be3f4b1669c4725c7d1d2bab4ae2",
+                "reference": "21533be36c24be3f4b1669c4725c7d1d2bab4ae2",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.1"
+                "php": ">=7.2"
             },
             "provide": {
                 "ext-uuid": "*"
@@ -5905,8 +5900,8 @@
             "type": "library",
             "extra": {
                 "thanks": {
-                    "name": "symfony/polyfill",
-                    "url": "https://github.com/symfony/polyfill"
+                    "url": "https://github.com/symfony/polyfill",
+                    "name": "symfony/polyfill"
                 }
             },
             "autoload": {
@@ -5940,7 +5935,7 @@
                 "uuid"
             ],
             "support": {
-                "source": "https://github.com/symfony/polyfill-uuid/tree/v1.30.0"
+                "source": "https://github.com/symfony/polyfill-uuid/tree/v1.32.0"
             },
             "funding": [
                 {
@@ -5956,20 +5951,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T15:07:36+00:00"
+            "time": "2024-09-09T11:45:10+00:00"
         },
         {
             "name": "symfony/process",
-            "version": "v6.4.8",
+            "version": "v6.4.20",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/process.git",
-                "reference": "8d92dd79149f29e89ee0f480254db595f6a6a2c5"
+                "reference": "e2a61c16af36c9a07e5c9906498b73e091949a20"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/process/zipball/8d92dd79149f29e89ee0f480254db595f6a6a2c5",
-                "reference": "8d92dd79149f29e89ee0f480254db595f6a6a2c5",
+                "url": "https://api.github.com/repos/symfony/process/zipball/e2a61c16af36c9a07e5c9906498b73e091949a20",
+                "reference": "e2a61c16af36c9a07e5c9906498b73e091949a20",
                 "shasum": ""
             },
             "require": {
@@ -6001,7 +5996,7 @@
             "description": "Executes commands in sub-processes",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/process/tree/v6.4.8"
+                "source": "https://github.com/symfony/process/tree/v6.4.20"
             },
             "funding": [
                 {
@@ -6017,20 +6012,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:49:08+00:00"
+            "time": "2025-03-10T17:11:00+00:00"
         },
         {
             "name": "symfony/routing",
-            "version": "v6.4.8",
+            "version": "v6.4.18",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/routing.git",
-                "reference": "8a40d0f9b01f0fbb80885d3ce0ad6714fb603a58"
+                "reference": "e9bfc94953019089acdfb9be51c1b9142c4afa68"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/routing/zipball/8a40d0f9b01f0fbb80885d3ce0ad6714fb603a58",
-                "reference": "8a40d0f9b01f0fbb80885d3ce0ad6714fb603a58",
+                "url": "https://api.github.com/repos/symfony/routing/zipball/e9bfc94953019089acdfb9be51c1b9142c4afa68",
+                "reference": "e9bfc94953019089acdfb9be51c1b9142c4afa68",
                 "shasum": ""
             },
             "require": {
@@ -6084,7 +6079,7 @@
                 "url"
             ],
             "support": {
-                "source": "https://github.com/symfony/routing/tree/v6.4.8"
+                "source": "https://github.com/symfony/routing/tree/v6.4.18"
             },
             "funding": [
                 {
@@ -6100,20 +6095,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:49:08+00:00"
+            "time": "2025-01-09T08:51:02+00:00"
         },
         {
             "name": "symfony/service-contracts",
-            "version": "v3.5.0",
+            "version": "v3.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/service-contracts.git",
-                "reference": "bd1d9e59a81d8fa4acdcea3f617c581f7475a80f"
+                "reference": "e53260aabf78fb3d63f8d79d69ece59f80d5eda0"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/service-contracts/zipball/bd1d9e59a81d8fa4acdcea3f617c581f7475a80f",
-                "reference": "bd1d9e59a81d8fa4acdcea3f617c581f7475a80f",
+                "url": "https://api.github.com/repos/symfony/service-contracts/zipball/e53260aabf78fb3d63f8d79d69ece59f80d5eda0",
+                "reference": "e53260aabf78fb3d63f8d79d69ece59f80d5eda0",
                 "shasum": ""
             },
             "require": {
@@ -6126,12 +6121,12 @@
             },
             "type": "library",
             "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/contracts",
+                    "name": "symfony/contracts"
+                },
                 "branch-alias": {
                     "dev-main": "3.5-dev"
-                },
-                "thanks": {
-                    "name": "symfony/contracts",
-                    "url": "https://github.com/symfony/contracts"
                 }
             },
             "autoload": {
@@ -6167,7 +6162,7 @@
                 "standards"
             ],
             "support": {
-                "source": "https://github.com/symfony/service-contracts/tree/v3.5.0"
+                "source": "https://github.com/symfony/service-contracts/tree/v3.5.1"
             },
             "funding": [
                 {
@@ -6183,20 +6178,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-04-18T09:32:20+00:00"
+            "time": "2024-09-25T14:20:29+00:00"
         },
         {
             "name": "symfony/string",
-            "version": "v7.1.2",
+            "version": "v7.2.6",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/string.git",
-                "reference": "14221089ac66cf82e3cf3d1c1da65de305587ff8"
+                "reference": "a214fe7d62bd4df2a76447c67c6b26e1d5e74931"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/string/zipball/14221089ac66cf82e3cf3d1c1da65de305587ff8",
-                "reference": "14221089ac66cf82e3cf3d1c1da65de305587ff8",
+                "url": "https://api.github.com/repos/symfony/string/zipball/a214fe7d62bd4df2a76447c67c6b26e1d5e74931",
+                "reference": "a214fe7d62bd4df2a76447c67c6b26e1d5e74931",
                 "shasum": ""
             },
             "require": {
@@ -6254,7 +6249,7 @@
                 "utf8"
             ],
             "support": {
-                "source": "https://github.com/symfony/string/tree/v7.1.2"
+                "source": "https://github.com/symfony/string/tree/v7.2.6"
             },
             "funding": [
                 {
@@ -6270,20 +6265,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-28T09:27:18+00:00"
+            "time": "2025-04-20T20:18:16+00:00"
         },
         {
             "name": "symfony/translation",
-            "version": "v6.4.8",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/translation.git",
-                "reference": "a002933b13989fc4bd0b58e04bf7eec5210e438a"
+                "reference": "bb92ea5588396b319ba43283a5a3087a034cb29c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/translation/zipball/a002933b13989fc4bd0b58e04bf7eec5210e438a",
-                "reference": "a002933b13989fc4bd0b58e04bf7eec5210e438a",
+                "url": "https://api.github.com/repos/symfony/translation/zipball/bb92ea5588396b319ba43283a5a3087a034cb29c",
+                "reference": "bb92ea5588396b319ba43283a5a3087a034cb29c",
                 "shasum": ""
             },
             "require": {
@@ -6349,7 +6344,7 @@
             "description": "Provides tools to internationalize your application",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/translation/tree/v6.4.8"
+                "source": "https://github.com/symfony/translation/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -6365,20 +6360,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:49:08+00:00"
+            "time": "2025-04-07T19:02:30+00:00"
         },
         {
             "name": "symfony/translation-contracts",
-            "version": "v3.5.0",
+            "version": "v3.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/translation-contracts.git",
-                "reference": "b9d2189887bb6b2e0367a9fc7136c5239ab9b05a"
+                "reference": "4667ff3bd513750603a09c8dedbea942487fb07c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/translation-contracts/zipball/b9d2189887bb6b2e0367a9fc7136c5239ab9b05a",
-                "reference": "b9d2189887bb6b2e0367a9fc7136c5239ab9b05a",
+                "url": "https://api.github.com/repos/symfony/translation-contracts/zipball/4667ff3bd513750603a09c8dedbea942487fb07c",
+                "reference": "4667ff3bd513750603a09c8dedbea942487fb07c",
                 "shasum": ""
             },
             "require": {
@@ -6386,12 +6381,12 @@
             },
             "type": "library",
             "extra": {
+                "thanks": {
+                    "url": "https://github.com/symfony/contracts",
+                    "name": "symfony/contracts"
+                },
                 "branch-alias": {
                     "dev-main": "3.5-dev"
-                },
-                "thanks": {
-                    "name": "symfony/contracts",
-                    "url": "https://github.com/symfony/contracts"
                 }
             },
             "autoload": {
@@ -6427,7 +6422,7 @@
                 "standards"
             ],
             "support": {
-                "source": "https://github.com/symfony/translation-contracts/tree/v3.5.0"
+                "source": "https://github.com/symfony/translation-contracts/tree/v3.5.1"
             },
             "funding": [
                 {
@@ -6443,20 +6438,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-04-18T09:32:20+00:00"
+            "time": "2024-09-25T14:20:29+00:00"
         },
         {
             "name": "symfony/uid",
-            "version": "v6.4.8",
+            "version": "v6.4.13",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/uid.git",
-                "reference": "35904eca37a84bb764c560cbfcac9f0ac2bcdbdf"
+                "reference": "18eb207f0436a993fffbdd811b5b8fa35fa5e007"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/uid/zipball/35904eca37a84bb764c560cbfcac9f0ac2bcdbdf",
-                "reference": "35904eca37a84bb764c560cbfcac9f0ac2bcdbdf",
+                "url": "https://api.github.com/repos/symfony/uid/zipball/18eb207f0436a993fffbdd811b5b8fa35fa5e007",
+                "reference": "18eb207f0436a993fffbdd811b5b8fa35fa5e007",
                 "shasum": ""
             },
             "require": {
@@ -6501,7 +6496,7 @@
                 "uuid"
             ],
             "support": {
-                "source": "https://github.com/symfony/uid/tree/v6.4.8"
+                "source": "https://github.com/symfony/uid/tree/v6.4.13"
             },
             "funding": [
                 {
@@ -6517,20 +6512,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-05-31T14:49:08+00:00"
+            "time": "2024-09-25T14:18:03+00:00"
         },
         {
             "name": "symfony/var-dumper",
-            "version": "v6.4.9",
+            "version": "v6.4.21",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/var-dumper.git",
-                "reference": "c31566e4ca944271cc8d8ac6887cbf31b8c6a172"
+                "reference": "22560f80c0c5cd58cc0bcaf73455ffd81eb380d5"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/c31566e4ca944271cc8d8ac6887cbf31b8c6a172",
-                "reference": "c31566e4ca944271cc8d8ac6887cbf31b8c6a172",
+                "url": "https://api.github.com/repos/symfony/var-dumper/zipball/22560f80c0c5cd58cc0bcaf73455ffd81eb380d5",
+                "reference": "22560f80c0c5cd58cc0bcaf73455ffd81eb380d5",
                 "shasum": ""
             },
             "require": {
@@ -6586,7 +6581,7 @@
                 "dump"
             ],
             "support": {
-                "source": "https://github.com/symfony/var-dumper/tree/v6.4.9"
+                "source": "https://github.com/symfony/var-dumper/tree/v6.4.21"
             },
             "funding": [
                 {
@@ -6602,24 +6597,25 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-27T13:23:14+00:00"
+            "time": "2025-04-09T07:34:50+00:00"
         },
         {
             "name": "symfony/yaml",
-            "version": "v7.1.4",
+            "version": "v7.2.6",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/yaml.git",
-                "reference": "92e080b851c1c655c786a2da77f188f2dccd0f4b"
+                "reference": "0feafffb843860624ddfd13478f481f4c3cd8b23"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/yaml/zipball/92e080b851c1c655c786a2da77f188f2dccd0f4b",
-                "reference": "92e080b851c1c655c786a2da77f188f2dccd0f4b",
+                "url": "https://api.github.com/repos/symfony/yaml/zipball/0feafffb843860624ddfd13478f481f4c3cd8b23",
+                "reference": "0feafffb843860624ddfd13478f481f4c3cd8b23",
                 "shasum": ""
             },
             "require": {
                 "php": ">=8.2",
+                "symfony/deprecation-contracts": "^2.5|^3.0",
                 "symfony/polyfill-ctype": "^1.8"
             },
             "conflict": {
@@ -6657,7 +6653,7 @@
             "description": "Loads and dumps YAML files",
             "homepage": "https://symfony.com",
             "support": {
-                "source": "https://github.com/symfony/yaml/tree/v7.1.4"
+                "source": "https://github.com/symfony/yaml/tree/v7.2.6"
             },
             "funding": [
                 {
@@ -6673,7 +6669,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-08-12T09:59:40+00:00"
+            "time": "2025-04-04T10:10:11+00:00"
         },
         {
             "name": "tightenco/ziggy",
@@ -6744,31 +6740,33 @@
         },
         {
             "name": "tijsverkoyen/css-to-inline-styles",
-            "version": "v2.2.7",
+            "version": "v2.3.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/tijsverkoyen/CssToInlineStyles.git",
-                "reference": "83ee6f38df0a63106a9e4536e3060458b74ccedb"
+                "reference": "0d72ac1c00084279c1816675284073c5a337c20d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/83ee6f38df0a63106a9e4536e3060458b74ccedb",
-                "reference": "83ee6f38df0a63106a9e4536e3060458b74ccedb",
+                "url": "https://api.github.com/repos/tijsverkoyen/CssToInlineStyles/zipball/0d72ac1c00084279c1816675284073c5a337c20d",
+                "reference": "0d72ac1c00084279c1816675284073c5a337c20d",
                 "shasum": ""
             },
             "require": {
                 "ext-dom": "*",
                 "ext-libxml": "*",
-                "php": "^5.5 || ^7.0 || ^8.0",
-                "symfony/css-selector": "^2.7 || ^3.0 || ^4.0 || ^5.0 || ^6.0 || ^7.0"
+                "php": "^7.4 || ^8.0",
+                "symfony/css-selector": "^5.4 || ^6.0 || ^7.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0 || ^7.5 || ^8.5.21 || ^9.5.10"
+                "phpstan/phpstan": "^2.0",
+                "phpstan/phpstan-phpunit": "^2.0",
+                "phpunit/phpunit": "^8.5.21 || ^9.5.10"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.2.x-dev"
+                    "dev-master": "2.x-dev"
                 }
             },
             "autoload": {
@@ -6791,29 +6789,29 @@
             "homepage": "https://github.com/tijsverkoyen/CssToInlineStyles",
             "support": {
                 "issues": "https://github.com/tijsverkoyen/CssToInlineStyles/issues",
-                "source": "https://github.com/tijsverkoyen/CssToInlineStyles/tree/v2.2.7"
+                "source": "https://github.com/tijsverkoyen/CssToInlineStyles/tree/v2.3.0"
             },
-            "time": "2023-12-08T13:03:43+00:00"
+            "time": "2024-12-21T16:25:41+00:00"
         },
         {
             "name": "vlucas/phpdotenv",
-            "version": "v5.6.0",
+            "version": "v5.6.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/vlucas/phpdotenv.git",
-                "reference": "2cf9fb6054c2bb1d59d1f3817706ecdb9d2934c4"
+                "reference": "24ac4c74f91ee2c193fa1aaa5c249cb0822809af"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/2cf9fb6054c2bb1d59d1f3817706ecdb9d2934c4",
-                "reference": "2cf9fb6054c2bb1d59d1f3817706ecdb9d2934c4",
+                "url": "https://api.github.com/repos/vlucas/phpdotenv/zipball/24ac4c74f91ee2c193fa1aaa5c249cb0822809af",
+                "reference": "24ac4c74f91ee2c193fa1aaa5c249cb0822809af",
                 "shasum": ""
             },
             "require": {
                 "ext-pcre": "*",
-                "graham-campbell/result-type": "^1.1.2",
+                "graham-campbell/result-type": "^1.1.3",
                 "php": "^7.2.5 || ^8.0",
-                "phpoption/phpoption": "^1.9.2",
+                "phpoption/phpoption": "^1.9.3",
                 "symfony/polyfill-ctype": "^1.24",
                 "symfony/polyfill-mbstring": "^1.24",
                 "symfony/polyfill-php80": "^1.24"
@@ -6830,7 +6828,7 @@
             "extra": {
                 "bamarni-bin": {
                     "bin-links": true,
-                    "forward-command": true
+                    "forward-command": false
                 },
                 "branch-alias": {
                     "dev-master": "5.6-dev"
@@ -6865,7 +6863,7 @@
             ],
             "support": {
                 "issues": "https://github.com/vlucas/phpdotenv/issues",
-                "source": "https://github.com/vlucas/phpdotenv/tree/v5.6.0"
+                "source": "https://github.com/vlucas/phpdotenv/tree/v5.6.2"
             },
             "funding": [
                 {
@@ -6877,20 +6875,20 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-11-12T22:43:29+00:00"
+            "time": "2025-04-30T23:37:27+00:00"
         },
         {
             "name": "voku/portable-ascii",
-            "version": "2.0.1",
+            "version": "2.0.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/voku/portable-ascii.git",
-                "reference": "b56450eed252f6801410d810c8e1727224ae0743"
+                "reference": "b1d923f88091c6bf09699efcd7c8a1b1bfd7351d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/voku/portable-ascii/zipball/b56450eed252f6801410d810c8e1727224ae0743",
-                "reference": "b56450eed252f6801410d810c8e1727224ae0743",
+                "url": "https://api.github.com/repos/voku/portable-ascii/zipball/b1d923f88091c6bf09699efcd7c8a1b1bfd7351d",
+                "reference": "b1d923f88091c6bf09699efcd7c8a1b1bfd7351d",
                 "shasum": ""
             },
             "require": {
@@ -6915,7 +6913,7 @@
             "authors": [
                 {
                     "name": "Lars Moelleken",
-                    "homepage": "http://www.moelleken.org/"
+                    "homepage": "https://www.moelleken.org/"
                 }
             ],
             "description": "Portable ASCII library - performance optimized (ascii) string functions for php.",
@@ -6927,7 +6925,7 @@
             ],
             "support": {
                 "issues": "https://github.com/voku/portable-ascii/issues",
-                "source": "https://github.com/voku/portable-ascii/tree/2.0.1"
+                "source": "https://github.com/voku/portable-ascii/tree/2.0.3"
             },
             "funding": [
                 {
@@ -6951,7 +6949,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2022-03-08T17:03:00+00:00"
+            "time": "2024-11-21T01:49:47+00:00"
         },
         {
             "name": "webmozart/assert",
@@ -7013,16 +7011,16 @@
         },
         {
             "name": "yethee/tiktoken",
-            "version": "0.5.0",
+            "version": "0.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/yethee/tiktoken-php.git",
-                "reference": "ab25c89ac7907b601c533709841d5e43af6ac941"
+                "reference": "94a4ac18ab505198f5a0955948ab29ce659c1697"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/yethee/tiktoken-php/zipball/ab25c89ac7907b601c533709841d5e43af6ac941",
-                "reference": "ab25c89ac7907b601c533709841d5e43af6ac941",
+                "url": "https://api.github.com/repos/yethee/tiktoken-php/zipball/94a4ac18ab505198f5a0955948ab29ce659c1697",
+                "reference": "94a4ac18ab505198f5a0955948ab29ce659c1697",
                 "shasum": ""
             },
             "require": {
@@ -7035,7 +7033,7 @@
                 "phpbench/phpbench": "^1.2",
                 "phpunit/phpunit": "^10.5.20",
                 "psalm/plugin-phpunit": "^0.19.0",
-                "vimeo/psalm": "5.23.1"
+                "vimeo/psalm": "5.25.0"
             },
             "type": "library",
             "autoload": {
@@ -7058,24 +7056,24 @@
             ],
             "support": {
                 "issues": "https://github.com/yethee/tiktoken-php/issues",
-                "source": "https://github.com/yethee/tiktoken-php/tree/0.5.0"
+                "source": "https://github.com/yethee/tiktoken-php/tree/0.5.1"
             },
-            "time": "2024-05-14T11:30:59+00:00"
+            "time": "2024-07-17T10:09:02+00:00"
         }
     ],
     "packages-dev": [
         {
             "name": "fakerphp/faker",
-            "version": "v1.23.1",
+            "version": "v1.24.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/FakerPHP/Faker.git",
-                "reference": "bfb4fe148adbf78eff521199619b93a52ae3554b"
+                "reference": "e0ee18eb1e6dc3cda3ce9fd97e5a0689a88a64b5"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/FakerPHP/Faker/zipball/bfb4fe148adbf78eff521199619b93a52ae3554b",
-                "reference": "bfb4fe148adbf78eff521199619b93a52ae3554b",
+                "url": "https://api.github.com/repos/FakerPHP/Faker/zipball/e0ee18eb1e6dc3cda3ce9fd97e5a0689a88a64b5",
+                "reference": "e0ee18eb1e6dc3cda3ce9fd97e5a0689a88a64b5",
                 "shasum": ""
             },
             "require": {
@@ -7123,32 +7121,32 @@
             ],
             "support": {
                 "issues": "https://github.com/FakerPHP/Faker/issues",
-                "source": "https://github.com/FakerPHP/Faker/tree/v1.23.1"
+                "source": "https://github.com/FakerPHP/Faker/tree/v1.24.1"
             },
-            "time": "2024-01-02T13:46:09+00:00"
+            "time": "2024-11-21T13:46:39+00:00"
         },
         {
             "name": "filp/whoops",
-            "version": "2.15.4",
+            "version": "2.18.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/filp/whoops.git",
-                "reference": "a139776fa3f5985a50b509f2a02ff0f709d2a546"
+                "reference": "a7de6c3c6c3c022f5cfc337f8ede6a14460cf77e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/filp/whoops/zipball/a139776fa3f5985a50b509f2a02ff0f709d2a546",
-                "reference": "a139776fa3f5985a50b509f2a02ff0f709d2a546",
+                "url": "https://api.github.com/repos/filp/whoops/zipball/a7de6c3c6c3c022f5cfc337f8ede6a14460cf77e",
+                "reference": "a7de6c3c6c3c022f5cfc337f8ede6a14460cf77e",
                 "shasum": ""
             },
             "require": {
-                "php": "^5.5.9 || ^7.0 || ^8.0",
+                "php": "^7.1 || ^8.0",
                 "psr/log": "^1.0.1 || ^2.0 || ^3.0"
             },
             "require-dev": {
-                "mockery/mockery": "^0.9 || ^1.0",
-                "phpunit/phpunit": "^4.8.36 || ^5.7.27 || ^6.5.14 || ^7.5.20 || ^8.5.8 || ^9.3.3",
-                "symfony/var-dumper": "^2.6 || ^3.0 || ^4.0 || ^5.0"
+                "mockery/mockery": "^1.0",
+                "phpunit/phpunit": "^7.5.20 || ^8.5.8 || ^9.3.3",
+                "symfony/var-dumper": "^4.0 || ^5.0"
             },
             "suggest": {
                 "symfony/var-dumper": "Pretty print complex values better with var-dumper available",
@@ -7188,7 +7186,7 @@
             ],
             "support": {
                 "issues": "https://github.com/filp/whoops/issues",
-                "source": "https://github.com/filp/whoops/tree/2.15.4"
+                "source": "https://github.com/filp/whoops/tree/2.18.0"
             },
             "funding": [
                 {
@@ -7196,24 +7194,24 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-11-03T12:00:00+00:00"
+            "time": "2025-03-15T12:00:00+00:00"
         },
         {
             "name": "hamcrest/hamcrest-php",
-            "version": "v2.0.1",
+            "version": "v2.1.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/hamcrest/hamcrest-php.git",
-                "reference": "8c3d0a3f6af734494ad8f6fbbee0ba92422859f3"
+                "reference": "f8b1c0173b22fa6ec77a81fe63e5b01eba7e6487"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/8c3d0a3f6af734494ad8f6fbbee0ba92422859f3",
-                "reference": "8c3d0a3f6af734494ad8f6fbbee0ba92422859f3",
+                "url": "https://api.github.com/repos/hamcrest/hamcrest-php/zipball/f8b1c0173b22fa6ec77a81fe63e5b01eba7e6487",
+                "reference": "f8b1c0173b22fa6ec77a81fe63e5b01eba7e6487",
                 "shasum": ""
             },
             "require": {
-                "php": "^5.3|^7.0|^8.0"
+                "php": "^7.4|^8.0"
             },
             "replace": {
                 "cordoval/hamcrest-php": "*",
@@ -7221,8 +7219,8 @@
                 "kodova/hamcrest-php": "*"
             },
             "require-dev": {
-                "phpunit/php-file-iterator": "^1.4 || ^2.0",
-                "phpunit/phpunit": "^4.8.36 || ^5.7 || ^6.5 || ^7.0"
+                "phpunit/php-file-iterator": "^1.4 || ^2.0 || ^3.0",
+                "phpunit/phpunit": "^4.8.36 || ^5.7 || ^6.5 || ^7.0 || ^8.0 || ^9.0"
             },
             "type": "library",
             "extra": {
@@ -7245,9 +7243,9 @@
             ],
             "support": {
                 "issues": "https://github.com/hamcrest/hamcrest-php/issues",
-                "source": "https://github.com/hamcrest/hamcrest-php/tree/v2.0.1"
+                "source": "https://github.com/hamcrest/hamcrest-php/tree/v2.1.1"
             },
-            "time": "2020-07-09T08:09:16+00:00"
+            "time": "2025-04-30T06:54:44+00:00"
         },
         {
             "name": "laravel/breeze",
@@ -7276,13 +7274,13 @@
             },
             "type": "library",
             "extra": {
-                "branch-alias": {
-                    "dev-master": "1.x-dev"
-                },
                 "laravel": {
                     "providers": [
                         "Laravel\\Breeze\\BreezeServiceProvider"
                     ]
+                },
+                "branch-alias": {
+                    "dev-master": "1.x-dev"
                 }
             },
             "autoload": {
@@ -7313,16 +7311,16 @@
         },
         {
             "name": "laravel/pint",
-            "version": "v1.16.2",
+            "version": "v1.22.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/pint.git",
-                "reference": "51f1ba679a6afe0315621ad143d788bd7ded0eca"
+                "reference": "941d1927c5ca420c22710e98420287169c7bcaf7"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/pint/zipball/51f1ba679a6afe0315621ad143d788bd7ded0eca",
-                "reference": "51f1ba679a6afe0315621ad143d788bd7ded0eca",
+                "url": "https://api.github.com/repos/laravel/pint/zipball/941d1927c5ca420c22710e98420287169c7bcaf7",
+                "reference": "941d1927c5ca420c22710e98420287169c7bcaf7",
                 "shasum": ""
             },
             "require": {
@@ -7330,16 +7328,16 @@
                 "ext-mbstring": "*",
                 "ext-tokenizer": "*",
                 "ext-xml": "*",
-                "php": "^8.1.0"
+                "php": "^8.2.0"
             },
             "require-dev": {
-                "friendsofphp/php-cs-fixer": "^3.59.3",
-                "illuminate/view": "^10.48.12",
-                "larastan/larastan": "^2.9.7",
-                "laravel-zero/framework": "^10.4.0",
+                "friendsofphp/php-cs-fixer": "^3.75.0",
+                "illuminate/view": "^11.44.7",
+                "larastan/larastan": "^3.4.0",
+                "laravel-zero/framework": "^11.36.1",
                 "mockery/mockery": "^1.6.12",
-                "nunomaduro/termwind": "^1.15.1",
-                "pestphp/pest": "^2.34.8"
+                "nunomaduro/termwind": "^2.3.1",
+                "pestphp/pest": "^2.36.0"
             },
             "bin": [
                 "builds/pint"
@@ -7375,32 +7373,32 @@
                 "issues": "https://github.com/laravel/pint/issues",
                 "source": "https://github.com/laravel/pint"
             },
-            "time": "2024-07-09T15:58:08+00:00"
+            "time": "2025-05-08T08:38:12+00:00"
         },
         {
             "name": "laravel/sail",
-            "version": "v1.30.2",
+            "version": "v1.43.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/laravel/sail.git",
-                "reference": "f5a9699a1001e15de1aa5e7cb5c9f50a3f63f887"
+                "reference": "71a509b14b2621ce58574274a74290f933c687f7"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/laravel/sail/zipball/f5a9699a1001e15de1aa5e7cb5c9f50a3f63f887",
-                "reference": "f5a9699a1001e15de1aa5e7cb5c9f50a3f63f887",
+                "url": "https://api.github.com/repos/laravel/sail/zipball/71a509b14b2621ce58574274a74290f933c687f7",
+                "reference": "71a509b14b2621ce58574274a74290f933c687f7",
                 "shasum": ""
             },
             "require": {
-                "illuminate/console": "^9.52.16|^10.0|^11.0",
-                "illuminate/contracts": "^9.52.16|^10.0|^11.0",
-                "illuminate/support": "^9.52.16|^10.0|^11.0",
+                "illuminate/console": "^9.52.16|^10.0|^11.0|^12.0",
+                "illuminate/contracts": "^9.52.16|^10.0|^11.0|^12.0",
+                "illuminate/support": "^9.52.16|^10.0|^11.0|^12.0",
                 "php": "^8.0",
                 "symfony/console": "^6.0|^7.0",
                 "symfony/yaml": "^6.0|^7.0"
             },
             "require-dev": {
-                "orchestra/testbench": "^7.0|^8.0|^9.0",
+                "orchestra/testbench": "^7.0|^8.0|^9.0|^10.0",
                 "phpstan/phpstan": "^1.10"
             },
             "bin": [
@@ -7438,7 +7436,7 @@
                 "issues": "https://github.com/laravel/sail/issues",
                 "source": "https://github.com/laravel/sail"
             },
-            "time": "2024-07-05T16:01:51+00:00"
+            "time": "2025-05-13T13:34:34+00:00"
         },
         {
             "name": "mockery/mockery",
@@ -7525,16 +7523,16 @@
         },
         {
             "name": "myclabs/deep-copy",
-            "version": "1.12.0",
+            "version": "1.13.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/myclabs/DeepCopy.git",
-                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c"
+                "reference": "1720ddd719e16cf0db4eb1c6eca108031636d46c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
-                "reference": "3a6b9a42cd8f8771bd4295d13e1423fa7f3d942c",
+                "url": "https://api.github.com/repos/myclabs/DeepCopy/zipball/1720ddd719e16cf0db4eb1c6eca108031636d46c",
+                "reference": "1720ddd719e16cf0db4eb1c6eca108031636d46c",
                 "shasum": ""
             },
             "require": {
@@ -7573,7 +7571,7 @@
             ],
             "support": {
                 "issues": "https://github.com/myclabs/DeepCopy/issues",
-                "source": "https://github.com/myclabs/DeepCopy/tree/1.12.0"
+                "source": "https://github.com/myclabs/DeepCopy/tree/1.13.1"
             },
             "funding": [
                 {
@@ -7581,44 +7579,44 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-06-12T14:39:25+00:00"
+            "time": "2025-04-29T12:36:36+00:00"
         },
         {
             "name": "nunomaduro/collision",
-            "version": "v7.10.0",
+            "version": "v7.12.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nunomaduro/collision.git",
-                "reference": "49ec67fa7b002712da8526678abd651c09f375b2"
+                "reference": "995245421d3d7593a6960822063bdba4f5d7cf1a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nunomaduro/collision/zipball/49ec67fa7b002712da8526678abd651c09f375b2",
-                "reference": "49ec67fa7b002712da8526678abd651c09f375b2",
+                "url": "https://api.github.com/repos/nunomaduro/collision/zipball/995245421d3d7593a6960822063bdba4f5d7cf1a",
+                "reference": "995245421d3d7593a6960822063bdba4f5d7cf1a",
                 "shasum": ""
             },
             "require": {
-                "filp/whoops": "^2.15.3",
-                "nunomaduro/termwind": "^1.15.1",
+                "filp/whoops": "^2.17.0",
+                "nunomaduro/termwind": "^1.17.0",
                 "php": "^8.1.0",
-                "symfony/console": "^6.3.4"
+                "symfony/console": "^6.4.17"
             },
             "conflict": {
                 "laravel/framework": ">=11.0.0"
             },
             "require-dev": {
-                "brianium/paratest": "^7.3.0",
-                "laravel/framework": "^10.28.0",
-                "laravel/pint": "^1.13.3",
-                "laravel/sail": "^1.25.0",
-                "laravel/sanctum": "^3.3.1",
-                "laravel/tinker": "^2.8.2",
-                "nunomaduro/larastan": "^2.6.4",
-                "orchestra/testbench-core": "^8.13.0",
-                "pestphp/pest": "^2.23.2",
-                "phpunit/phpunit": "^10.4.1",
-                "sebastian/environment": "^6.0.1",
-                "spatie/laravel-ignition": "^2.3.1"
+                "brianium/paratest": "^7.4.8",
+                "laravel/framework": "^10.48.29",
+                "laravel/pint": "^1.21.2",
+                "laravel/sail": "^1.41.0",
+                "laravel/sanctum": "^3.3.3",
+                "laravel/tinker": "^2.10.1",
+                "nunomaduro/larastan": "^2.10.0",
+                "orchestra/testbench-core": "^8.35.0",
+                "pestphp/pest": "^2.36.0",
+                "phpunit/phpunit": "^10.5.36",
+                "sebastian/environment": "^6.1.0",
+                "spatie/laravel-ignition": "^2.9.1"
             },
             "type": "library",
             "extra": {
@@ -7677,7 +7675,7 @@
                     "type": "patreon"
                 }
             ],
-            "time": "2023-10-11T15:45:01+00:00"
+            "time": "2025-03-14T22:35:49+00:00"
         },
         {
             "name": "phar-io/manifest",
@@ -7799,32 +7797,32 @@
         },
         {
             "name": "phpunit/php-code-coverage",
-            "version": "10.1.15",
+            "version": "10.1.16",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
-                "reference": "5da8b1728acd1e6ffdf2ff32ffbdfd04307f26ae"
+                "reference": "7e308268858ed6baedc8704a304727d20bc07c77"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/5da8b1728acd1e6ffdf2ff32ffbdfd04307f26ae",
-                "reference": "5da8b1728acd1e6ffdf2ff32ffbdfd04307f26ae",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/7e308268858ed6baedc8704a304727d20bc07c77",
+                "reference": "7e308268858ed6baedc8704a304727d20bc07c77",
                 "shasum": ""
             },
             "require": {
                 "ext-dom": "*",
                 "ext-libxml": "*",
                 "ext-xmlwriter": "*",
-                "nikic/php-parser": "^4.18 || ^5.0",
+                "nikic/php-parser": "^4.19.1 || ^5.1.0",
                 "php": ">=8.1",
-                "phpunit/php-file-iterator": "^4.0",
-                "phpunit/php-text-template": "^3.0",
-                "sebastian/code-unit-reverse-lookup": "^3.0",
-                "sebastian/complexity": "^3.0",
-                "sebastian/environment": "^6.0",
-                "sebastian/lines-of-code": "^2.0",
-                "sebastian/version": "^4.0",
-                "theseer/tokenizer": "^1.2.0"
+                "phpunit/php-file-iterator": "^4.1.0",
+                "phpunit/php-text-template": "^3.0.1",
+                "sebastian/code-unit-reverse-lookup": "^3.0.0",
+                "sebastian/complexity": "^3.2.0",
+                "sebastian/environment": "^6.1.0",
+                "sebastian/lines-of-code": "^2.0.2",
+                "sebastian/version": "^4.0.1",
+                "theseer/tokenizer": "^1.2.3"
             },
             "require-dev": {
                 "phpunit/phpunit": "^10.1"
@@ -7836,7 +7834,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-main": "10.1-dev"
+                    "dev-main": "10.1.x-dev"
                 }
             },
             "autoload": {
@@ -7865,7 +7863,7 @@
             "support": {
                 "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                 "security": "https://github.com/sebastianbergmann/php-code-coverage/security/policy",
-                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/10.1.15"
+                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/10.1.16"
             },
             "funding": [
                 {
@@ -7873,7 +7871,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2024-06-29T08:25:15+00:00"
+            "time": "2024-08-22T04:31:57+00:00"
         },
         {
             "name": "phpunit/php-file-iterator",
@@ -8120,16 +8118,16 @@
         },
         {
             "name": "phpunit/phpunit",
-            "version": "10.5.27",
+            "version": "10.5.46",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/phpunit.git",
-                "reference": "2425f713b2a5350568ccb1a2d3984841a23e83c5"
+                "reference": "8080be387a5be380dda48c6f41cee4a13aadab3d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/2425f713b2a5350568ccb1a2d3984841a23e83c5",
-                "reference": "2425f713b2a5350568ccb1a2d3984841a23e83c5",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/8080be387a5be380dda48c6f41cee4a13aadab3d",
+                "reference": "8080be387a5be380dda48c6f41cee4a13aadab3d",
                 "shasum": ""
             },
             "require": {
@@ -8139,18 +8137,18 @@
                 "ext-mbstring": "*",
                 "ext-xml": "*",
                 "ext-xmlwriter": "*",
-                "myclabs/deep-copy": "^1.12.0",
+                "myclabs/deep-copy": "^1.13.1",
                 "phar-io/manifest": "^2.0.4",
                 "phar-io/version": "^3.2.1",
                 "php": ">=8.1",
-                "phpunit/php-code-coverage": "^10.1.15",
+                "phpunit/php-code-coverage": "^10.1.16",
                 "phpunit/php-file-iterator": "^4.1.0",
                 "phpunit/php-invoker": "^4.0.0",
                 "phpunit/php-text-template": "^3.0.1",
                 "phpunit/php-timer": "^6.0.0",
                 "sebastian/cli-parser": "^2.0.1",
                 "sebastian/code-unit": "^2.0.0",
-                "sebastian/comparator": "^5.0.1",
+                "sebastian/comparator": "^5.0.3",
                 "sebastian/diff": "^5.1.1",
                 "sebastian/environment": "^6.1.0",
                 "sebastian/exporter": "^5.1.2",
@@ -8201,7 +8199,7 @@
             "support": {
                 "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                 "security": "https://github.com/sebastianbergmann/phpunit/security/policy",
-                "source": "https://github.com/sebastianbergmann/phpunit/tree/10.5.27"
+                "source": "https://github.com/sebastianbergmann/phpunit/tree/10.5.46"
             },
             "funding": [
                 {
@@ -8212,12 +8210,20 @@
                     "url": "https://github.com/sebastianbergmann",
                     "type": "github"
                 },
+                {
+                    "url": "https://liberapay.com/sebastianbergmann",
+                    "type": "liberapay"
+                },
+                {
+                    "url": "https://thanks.dev/u/gh/sebastianbergmann",
+                    "type": "thanks_dev"
+                },
                 {
                     "url": "https://tidelift.com/funding/github/packagist/phpunit/phpunit",
                     "type": "tidelift"
                 }
             ],
-            "time": "2024-07-10T11:48:06+00:00"
+            "time": "2025-05-02T06:46:24+00:00"
         },
         {
             "name": "sebastian/cli-parser",
@@ -8389,16 +8395,16 @@
         },
         {
             "name": "sebastian/comparator",
-            "version": "5.0.1",
+            "version": "5.0.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/comparator.git",
-                "reference": "2db5010a484d53ebf536087a70b4a5423c102372"
+                "reference": "a18251eb0b7a2dcd2f7aa3d6078b18545ef0558e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/2db5010a484d53ebf536087a70b4a5423c102372",
-                "reference": "2db5010a484d53ebf536087a70b4a5423c102372",
+                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/a18251eb0b7a2dcd2f7aa3d6078b18545ef0558e",
+                "reference": "a18251eb0b7a2dcd2f7aa3d6078b18545ef0558e",
                 "shasum": ""
             },
             "require": {
@@ -8409,7 +8415,7 @@
                 "sebastian/exporter": "^5.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "^10.3"
+                "phpunit/phpunit": "^10.5"
             },
             "type": "library",
             "extra": {
@@ -8454,7 +8460,7 @@
             "support": {
                 "issues": "https://github.com/sebastianbergmann/comparator/issues",
                 "security": "https://github.com/sebastianbergmann/comparator/security/policy",
-                "source": "https://github.com/sebastianbergmann/comparator/tree/5.0.1"
+                "source": "https://github.com/sebastianbergmann/comparator/tree/5.0.3"
             },
             "funding": [
                 {
@@ -8462,7 +8468,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-08-14T13:18:12+00:00"
+            "time": "2024-10-18T14:56:07+00:00"
         },
         {
             "name": "sebastian/complexity",
@@ -9137,27 +9143,27 @@
         },
         {
             "name": "spatie/backtrace",
-            "version": "1.6.1",
+            "version": "1.7.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/spatie/backtrace.git",
-                "reference": "8373b9d51638292e3bfd736a9c19a654111b4a23"
+                "reference": "cd37a49fce7137359ac30ecc44ef3e16404cccbe"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/spatie/backtrace/zipball/8373b9d51638292e3bfd736a9c19a654111b4a23",
-                "reference": "8373b9d51638292e3bfd736a9c19a654111b4a23",
+                "url": "https://api.github.com/repos/spatie/backtrace/zipball/cd37a49fce7137359ac30ecc44ef3e16404cccbe",
+                "reference": "cd37a49fce7137359ac30ecc44ef3e16404cccbe",
                 "shasum": ""
             },
             "require": {
-                "php": "^7.3|^8.0"
+                "php": "^7.3 || ^8.0"
             },
             "require-dev": {
                 "ext-json": "*",
-                "laravel/serializable-closure": "^1.3",
-                "phpunit/phpunit": "^9.3",
-                "spatie/phpunit-snapshot-assertions": "^4.2",
-                "symfony/var-dumper": "^5.1"
+                "laravel/serializable-closure": "^1.3 || ^2.0",
+                "phpunit/phpunit": "^9.3 || ^11.4.3",
+                "spatie/phpunit-snapshot-assertions": "^4.2 || ^5.1.6",
+                "symfony/var-dumper": "^5.1 || ^6.0 || ^7.0"
             },
             "type": "library",
             "autoload": {
@@ -9184,7 +9190,7 @@
                 "spatie"
             ],
             "support": {
-                "source": "https://github.com/spatie/backtrace/tree/1.6.1"
+                "source": "https://github.com/spatie/backtrace/tree/1.7.4"
             },
             "funding": [
                 {
@@ -9196,34 +9202,34 @@
                     "type": "other"
                 }
             ],
-            "time": "2024-04-24T13:22:11+00:00"
+            "time": "2025-05-08T15:41:09+00:00"
         },
         {
             "name": "spatie/error-solutions",
-            "version": "1.0.5",
+            "version": "1.1.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/spatie/error-solutions.git",
-                "reference": "4bb6c734dc992b2db3e26df1ef021c75d2218b13"
+                "reference": "e495d7178ca524f2dd0fe6a1d99a1e608e1c9936"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/spatie/error-solutions/zipball/4bb6c734dc992b2db3e26df1ef021c75d2218b13",
-                "reference": "4bb6c734dc992b2db3e26df1ef021c75d2218b13",
+                "url": "https://api.github.com/repos/spatie/error-solutions/zipball/e495d7178ca524f2dd0fe6a1d99a1e608e1c9936",
+                "reference": "e495d7178ca524f2dd0fe6a1d99a1e608e1c9936",
                 "shasum": ""
             },
             "require": {
                 "php": "^8.0"
             },
             "require-dev": {
-                "illuminate/broadcasting": "^10.0|^11.0",
-                "illuminate/cache": "^10.0|^11.0",
-                "illuminate/support": "^10.0|^11.0",
-                "livewire/livewire": "^2.11|^3.3.5",
+                "illuminate/broadcasting": "^10.0|^11.0|^12.0",
+                "illuminate/cache": "^10.0|^11.0|^12.0",
+                "illuminate/support": "^10.0|^11.0|^12.0",
+                "livewire/livewire": "^2.11|^3.5.20",
                 "openai-php/client": "^0.10.1",
-                "orchestra/testbench": "^7.0|8.22.3|^9.0",
-                "pestphp/pest": "^2.20",
-                "phpstan/phpstan": "^1.11",
+                "orchestra/testbench": "8.22.3|^9.0|^10.0",
+                "pestphp/pest": "^2.20|^3.0",
+                "phpstan/phpstan": "^2.1",
                 "psr/simple-cache": "^3.0",
                 "psr/simple-cache-implementation": "^3.0",
                 "spatie/ray": "^1.28",
@@ -9262,7 +9268,7 @@
             ],
             "support": {
                 "issues": "https://github.com/spatie/error-solutions/issues",
-                "source": "https://github.com/spatie/error-solutions/tree/1.0.5"
+                "source": "https://github.com/spatie/error-solutions/tree/1.1.3"
             },
             "funding": [
                 {
@@ -9270,24 +9276,24 @@
                     "type": "github"
                 }
             ],
-            "time": "2024-07-09T12:13:32+00:00"
+            "time": "2025-02-14T12:29:50+00:00"
         },
         {
             "name": "spatie/flare-client-php",
-            "version": "1.7.0",
+            "version": "1.10.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/spatie/flare-client-php.git",
-                "reference": "097040ff51e660e0f6fc863684ac4b02c93fa234"
+                "reference": "bf1716eb98bd689451b071548ae9e70738dce62f"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/spatie/flare-client-php/zipball/097040ff51e660e0f6fc863684ac4b02c93fa234",
-                "reference": "097040ff51e660e0f6fc863684ac4b02c93fa234",
+                "url": "https://api.github.com/repos/spatie/flare-client-php/zipball/bf1716eb98bd689451b071548ae9e70738dce62f",
+                "reference": "bf1716eb98bd689451b071548ae9e70738dce62f",
                 "shasum": ""
             },
             "require": {
-                "illuminate/pipeline": "^8.0|^9.0|^10.0|^11.0",
+                "illuminate/pipeline": "^8.0|^9.0|^10.0|^11.0|^12.0",
                 "php": "^8.0",
                 "spatie/backtrace": "^1.6.1",
                 "symfony/http-foundation": "^5.2|^6.0|^7.0",
@@ -9301,7 +9307,7 @@
                 "phpstan/extension-installer": "^1.1",
                 "phpstan/phpstan-deprecation-rules": "^1.0",
                 "phpstan/phpstan-phpunit": "^1.0",
-                "spatie/phpunit-snapshot-assertions": "^4.0|^5.0"
+                "spatie/pest-plugin-snapshots": "^1.0|^2.0"
             },
             "type": "library",
             "extra": {
@@ -9331,7 +9337,7 @@
             ],
             "support": {
                 "issues": "https://github.com/spatie/flare-client-php/issues",
-                "source": "https://github.com/spatie/flare-client-php/tree/1.7.0"
+                "source": "https://github.com/spatie/flare-client-php/tree/1.10.1"
             },
             "funding": [
                 {
@@ -9339,20 +9345,20 @@
                     "type": "github"
                 }
             ],
-            "time": "2024-06-12T14:39:14+00:00"
+            "time": "2025-02-14T13:42:06+00:00"
         },
         {
             "name": "spatie/ignition",
-            "version": "1.15.0",
+            "version": "1.15.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/spatie/ignition.git",
-                "reference": "e3a68e137371e1eb9edc7f78ffa733f3b98991d2"
+                "reference": "31f314153020aee5af3537e507fef892ffbf8c85"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/spatie/ignition/zipball/e3a68e137371e1eb9edc7f78ffa733f3b98991d2",
-                "reference": "e3a68e137371e1eb9edc7f78ffa733f3b98991d2",
+                "url": "https://api.github.com/repos/spatie/ignition/zipball/31f314153020aee5af3537e507fef892ffbf8c85",
+                "reference": "31f314153020aee5af3537e507fef892ffbf8c85",
                 "shasum": ""
             },
             "require": {
@@ -9365,7 +9371,7 @@
                 "symfony/var-dumper": "^5.4|^6.0|^7.0"
             },
             "require-dev": {
-                "illuminate/cache": "^9.52|^10.0|^11.0",
+                "illuminate/cache": "^9.52|^10.0|^11.0|^12.0",
                 "mockery/mockery": "^1.4",
                 "pestphp/pest": "^1.20|^2.0",
                 "phpstan/extension-installer": "^1.1",
@@ -9422,27 +9428,27 @@
                     "type": "github"
                 }
             ],
-            "time": "2024-06-12T14:55:22+00:00"
+            "time": "2025-02-21T14:31:39+00:00"
         },
         {
             "name": "spatie/laravel-ignition",
-            "version": "2.8.0",
+            "version": "2.9.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/spatie/laravel-ignition.git",
-                "reference": "3c067b75bfb50574db8f7e2c3978c65eed71126c"
+                "reference": "1baee07216d6748ebd3a65ba97381b051838707a"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/spatie/laravel-ignition/zipball/3c067b75bfb50574db8f7e2c3978c65eed71126c",
-                "reference": "3c067b75bfb50574db8f7e2c3978c65eed71126c",
+                "url": "https://api.github.com/repos/spatie/laravel-ignition/zipball/1baee07216d6748ebd3a65ba97381b051838707a",
+                "reference": "1baee07216d6748ebd3a65ba97381b051838707a",
                 "shasum": ""
             },
             "require": {
                 "ext-curl": "*",
                 "ext-json": "*",
                 "ext-mbstring": "*",
-                "illuminate/support": "^10.0|^11.0",
+                "illuminate/support": "^10.0|^11.0|^12.0",
                 "php": "^8.1",
                 "spatie/ignition": "^1.15",
                 "symfony/console": "^6.2.3|^7.0",
@@ -9451,12 +9457,12 @@
             "require-dev": {
                 "livewire/livewire": "^2.11|^3.3.5",
                 "mockery/mockery": "^1.5.1",
-                "openai-php/client": "^0.8.1",
-                "orchestra/testbench": "8.22.3|^9.0",
-                "pestphp/pest": "^2.34",
+                "openai-php/client": "^0.8.1|^0.10",
+                "orchestra/testbench": "8.22.3|^9.0|^10.0",
+                "pestphp/pest": "^2.34|^3.7",
                 "phpstan/extension-installer": "^1.3.1",
-                "phpstan/phpstan-deprecation-rules": "^1.1.1",
-                "phpstan/phpstan-phpunit": "^1.3.16",
+                "phpstan/phpstan-deprecation-rules": "^1.1.1|^2.0",
+                "phpstan/phpstan-phpunit": "^1.3.16|^2.0",
                 "vlucas/phpdotenv": "^5.5"
             },
             "suggest": {
@@ -9466,12 +9472,12 @@
             "type": "library",
             "extra": {
                 "laravel": {
-                    "providers": [
-                        "Spatie\\LaravelIgnition\\IgnitionServiceProvider"
-                    ],
                     "aliases": {
                         "Flare": "Spatie\\LaravelIgnition\\Facades\\Flare"
-                    }
+                    },
+                    "providers": [
+                        "Spatie\\LaravelIgnition\\IgnitionServiceProvider"
+                    ]
                 }
             },
             "autoload": {
@@ -9513,7 +9519,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2024-06-12T15:01:18+00:00"
+            "time": "2025-02-20T13:13:55+00:00"
         },
         {
             "name": "theseer/tokenizer",
@@ -9568,12 +9574,12 @@
     ],
     "aliases": [],
     "minimum-stability": "stable",
-    "stability-flags": [],
+    "stability-flags": {},
     "prefer-stable": true,
     "prefer-lowest": false,
     "platform": {
         "php": "^8.1"
     },
-    "platform-dev": [],
+    "platform-dev": {},
     "plugin-api-version": "2.6.0"
 }
diff --git a/config/boston_datasets.php b/config/boston_datasets.php
new file mode 100644
index 0000000..4e18e1c
--- /dev/null
+++ b/config/boston_datasets.php
@@ -0,0 +1,44 @@
+<?php
+
+return [
+    'base_url' => 'http://data.boston.gov/datastore/dump',
+    'datasets' => [
+        [
+            //311 Service Requests 2024 (assuming this was the original name, adjust if needed)
+            'name' => '311-service-requests-2025', // Or original '311-service-requests-2024'
+            'resource_id' => '9d7c2214-4709-478a-a2e8-fb2020a5bb94',
+            'format' => 'csv',
+        ],
+        [
+            'name' => 'construction-off-hours',
+            'resource_id' => 'c66524ea-36f5-43b1-aa9c-da36d7cb8744',
+            'format' => 'csv',
+        ],
+        [
+            'name' => 'building-permits',
+            'resource_id' => '6ddcd912-32a0-43df-9908-63574f8c7e77',
+            'format' => 'csv',
+        ],
+        [
+            'name' => 'crime-incident-reports',
+            'resource_id' => 'b973d8cb-eeb2-4e7e-99da-c92938efc9c0',
+            'format' => 'csv',
+        ],
+        [
+            'name' => 'trash-schedules-by-address',
+            'resource_id' => 'fee8ee07-b8b5-4ee5-b540-5162590ba5c1',
+            'format' => 'csv',
+        ],
+        [
+            'name' => 'property-violations',
+            'resource_id' => '800a2663-1d6a-46e7-9356-bedb70f5332c',
+            'format' => 'csv',
+        ],
+        [
+            'name' => 'food-inspections',
+            'resource_id' => '4582bec6-2b4f-4f9e-bc55-cbaa73117f4c',
+            'format' => 'csv',
+        ],
+        // Add more Boston datasets as needed, following this original structure
+    ],
+];
diff --git a/config/datasets.php b/config/datasets.php
index e274625..dbd3f57 100644
--- a/config/datasets.php
+++ b/config/datasets.php
@@ -1,42 +1,88 @@
 <?php
 
 return [
-    'base_url' => 'http://data.boston.gov/datastore/dump',
+    // This file is for datasets using the newer, more flexible configuration
+    // (e.g., multiple cities, varied URL patterns).
+    // Boston datasets are now in config/boston_datasets.php
     'datasets' => [
+        // Add the Cambridge dataset (or other non-Boston datasets) 
         [
-            //311 Service Requests 2024
-            'name' => '311-service-requests-2025',
-            'resource_id' => '9d7c2214-4709-478a-a2e8-fb2020a5bb94',
+            'name' => 'cambridge-311-service-requests',
+            'city' => 'cambridge',
+            'base_url' => 'https://data.cambridgema.gov/resource', // Base URL for Cambridge Socrata API
+            'resource_id' => '2z9k-mv9g', // Resource ID from the URL
             'format' => 'csv',
-        ],
-        // Add more datasets as needed
-        
+            'url_pattern_type' => 'extension', // Cambridge uses /resource_id.format
+            'pagination_type' => 'socrata_offset', // Indicates Socrata-style pagination
+            'page_size' => 10000, // Number of records to fetch per page (max 50000 for SODA 2.0)
+            'order_by_field' => ':id', // Field to ensure stable ordering for pagination
+        ], 
         [
-            'name' => 'construction-off-hours',
-            'resource_id' => 'c66524ea-36f5-43b1-aa9c-da36d7cb8744',
+            'name' => 'cambridge-building-permits',
+            'city' => 'cambridge', // This will be used to create the 'datasets/cambridge/' subdirectory
+            'base_url' => 'https://data.cambridgema.gov/resource',
+            'resource_id' => 'qu2z-8suj',
             'format' => 'csv',
+            'url_pattern_type' => 'extension',
+            'pagination_type' => 'socrata_offset',
+            'page_size' => 10000,
+            'order_by_field' => ':id', // Or ':id' if 'permit_num' isn't reliable for ordering
         ],
-        
         [
-            'name' => 'building-permits',
-            'resource_id' => '6ddcd912-32a0-43df-9908-63574f8c7e77',
+            'name' => 'cambridge-sanitary-inspections',
+            'city' => 'cambridge',
+            'base_url' => 'https://data.cambridgema.gov/resource',
+            'resource_id' => 'ryb9-qzmw',
             'format' => 'csv',
-        ],
+            'url_pattern_type' => 'extension',
+            'pagination_type' => 'socrata_offset',
+            'page_size' => 10000,
+            'order_by_field' => ':id',
+        ], 
+        [
+            'name' => 'cambridge-housing-code-violations',
+            'city' => 'cambridge',
+            'base_url' => 'https://data.cambridgema.gov/resource',
+            'resource_id' => 'f8su-kv88',
+            'format' => 'csv',
+            'url_pattern_type' => 'extension',
+            'pagination_type' => 'socrata_offset',
+            'page_size' => 10000,
+            'order_by_field' => ':id',
+        ], 
         [
-            'name' => 'crime-incident-reports',
-            'resource_id' => 'b973d8cb-eeb2-4e7e-99da-c92938efc9c0',
+            'name' => 'cambridge-crime-reports',
+            'city' => 'cambridge',
+            'base_url' => 'https://data.cambridgema.gov/resource',
+            'resource_id' => 'xuad-73uj',
             'format' => 'csv',
+            'url_pattern_type' => 'extension',
+            'pagination_type' => 'socrata_offset',
+            'page_size' => 10000,
+            'order_by_field' => ':id',
         ],
         [
-            'name' => 'trash-schedules-by-address',
-            'resource_id' => 'fee8ee07-b8b5-4ee5-b540-5162590ba5c1',
+            'name' => 'cambridge-master-addresses-list',
+            'city' => 'cambridge',
+            'base_url' => 'https://data.cambridgema.gov/resource',
+            'resource_id' => 'vup6-kpwv',
             'format' => 'csv',
+            'url_pattern_type' => 'extension',
+            'pagination_type' => 'socrata_offset',
+            'page_size' => 10000,
+            'order_by_field' => ':id',
         ],
-        // Add a dataset for property violations
         [
-            'name' => 'property-violations',
-            'resource_id' => '800a2663-1d6a-46e7-9356-bedb70f5332c',
+            'name' => 'cambridge-master-intersections-list',
+            'city' => 'cambridge',
+            'base_url' => 'https://data.cambridgema.gov/resource',
+            'resource_id' => '7g3f-rtpe',
             'format' => 'csv',
+            'url_pattern_type' => 'extension',
+            'pagination_type' => 'socrata_offset',
+            'page_size' => 10000,
+            'order_by_field' => ':id',
         ],
+        // Add more datasets from Cambridge or other cities (not Boston) as needed
     ],
 ];
diff --git a/config/everett_datasets.php b/config/everett_datasets.php
new file mode 100644
index 0000000..6e0587a
--- /dev/null
+++ b/config/everett_datasets.php
@@ -0,0 +1,9 @@
+<?php
+
+return [
+    'arrest_log_page_url'      => 'https://www.everettpolicema.com/arrest_log_2025/arrest_log.php',
+    'daily_log_page_url'       => 'https://www.everettpolicema.com/daily_log_2025/daily_log.php',
+    'pdfs_directory'           => 'pdfs',
+    'markdown_output_directory'=> 'markdown_output',
+    'html_pages_directory'     => 'html_pages',
+];
diff --git a/config/model_metadata_suggestions.php b/config/model_metadata_suggestions.php
new file mode 100644
index 0000000..097dcd3
--- /dev/null
+++ b/config/model_metadata_suggestions.php
@@ -0,0 +1,3489 @@
+<?php
+
+return [
+    'App\\Models\\PropertyViolation' => [
+        'filterableFieldsDescription' => [
+            0 => [
+                'name' => 'search_term',
+                'label' => 'General Search',
+                'type' => 'text',
+                'placeholder' => 'Search across all fields...',
+            ],
+            1 => [
+                'name' => 'case_no',
+                'label' => 'Case No',
+                'type' => 'text',
+                'placeholder' => 'Enter Case No',
+            ],
+            2 => [
+                'name' => 'ap_case_defn_key',
+                'label' => 'Ap Case Defn Key',
+                'type' => 'text',
+                'placeholder' => 'Enter Ap Case Defn Key',
+            ],
+            3 => [
+                'name' => 'status',
+                'label' => 'Status',
+                'type' => 'select',
+                'placeholder' => 'Select Status',
+                'options' => [
+                    0 => [
+                        'value' => 'Closed',
+                        'label' => 'Closed',
+                    ],
+                    1 => [
+                        'value' => 'Open',
+                        'label' => 'Open',
+                    ],
+                    2 => [
+                        'value' => 'Void',
+                        'label' => 'Void',
+                    ],
+                ],
+            ],
+            4 => [
+                'name' => 'code',
+                'label' => 'Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Code',
+            ],
+            5 => [
+                'name' => 'value',
+                'label' => 'Value',
+                'type' => 'text',
+                'placeholder' => 'Enter Value',
+            ],
+            6 => [
+                'name' => 'description',
+                'label' => 'Description',
+                'type' => 'text',
+                'placeholder' => 'Enter Description',
+            ],
+            7 => [
+                'name' => 'violation_stno',
+                'label' => 'Violation Stno',
+                'type' => 'text',
+                'placeholder' => 'Enter Violation Stno',
+            ],
+            8 => [
+                'name' => 'violation_sthigh',
+                'label' => 'Violation Sthigh',
+                'type' => 'text',
+                'placeholder' => 'Enter Violation Sthigh',
+            ],
+            9 => [
+                'name' => 'violation_street',
+                'label' => 'Violation Street',
+                'type' => 'text',
+                'placeholder' => 'Enter Violation Street',
+            ],
+            10 => [
+                'name' => 'violation_suffix',
+                'label' => 'Violation Suffix',
+                'type' => 'select',
+                'placeholder' => 'Select Violation Suffix',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => 'AV',
+                        'label' => 'AV',
+                    ],
+                    2 => [
+                        'value' => 'AVE',
+                        'label' => 'AVE',
+                    ],
+                    3 => [
+                        'value' => 'BL',
+                        'label' => 'BL',
+                    ],
+                    4 => [
+                        'value' => 'BLVD',
+                        'label' => 'BLVD',
+                    ],
+                    5 => [
+                        'value' => 'CC',
+                        'label' => 'CC',
+                    ],
+                    6 => [
+                        'value' => 'CI',
+                        'label' => 'CI',
+                    ],
+                    7 => [
+                        'value' => 'CIR',
+                        'label' => 'CIR',
+                    ],
+                    8 => [
+                        'value' => 'CT',
+                        'label' => 'CT',
+                    ],
+                    9 => [
+                        'value' => 'DR',
+                        'label' => 'DR',
+                    ],
+                    10 => [
+                        'value' => 'GRN',
+                        'label' => 'GRN',
+                    ],
+                    11 => [
+                        'value' => 'HW',
+                        'label' => 'HW',
+                    ],
+                    12 => [
+                        'value' => 'LN',
+                        'label' => 'LN',
+                    ],
+                    13 => [
+                        'value' => 'PARK',
+                        'label' => 'PARK',
+                    ],
+                    14 => [
+                        'value' => 'PK',
+                        'label' => 'PK',
+                    ],
+                    15 => [
+                        'value' => 'PL',
+                        'label' => 'PL',
+                    ],
+                    16 => [
+                        'value' => 'PW',
+                        'label' => 'PW',
+                    ],
+                    17 => [
+                        'value' => 'PZ',
+                        'label' => 'PZ',
+                    ],
+                    18 => [
+                        'value' => 'RD',
+                        'label' => 'RD',
+                    ],
+                    19 => [
+                        'value' => 'RO',
+                        'label' => 'RO',
+                    ],
+                    20 => [
+                        'value' => 'SQ',
+                        'label' => 'SQ',
+                    ],
+                    21 => [
+                        'value' => 'ST',
+                        'label' => 'ST',
+                    ],
+                    22 => [
+                        'value' => 'TE',
+                        'label' => 'TE',
+                    ],
+                    23 => [
+                        'value' => 'TER',
+                        'label' => 'TER',
+                    ],
+                    24 => [
+                        'value' => 'WAY',
+                        'label' => 'WAY',
+                    ],
+                    25 => [
+                        'value' => 'WH',
+                        'label' => 'WH',
+                    ],
+                    26 => [
+                        'value' => 'WY',
+                        'label' => 'WY',
+                    ],
+                ],
+            ],
+            11 => [
+                'name' => 'violation_city',
+                'label' => 'Violation City',
+                'type' => 'select',
+                'placeholder' => 'Select Violation City',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => 'Allston',
+                        'label' => 'Allston',
+                    ],
+                    2 => [
+                        'value' => 'Allston/Boston',
+                        'label' => 'Allston/Boston',
+                    ],
+                    3 => [
+                        'value' => 'Back Bay/',
+                        'label' => 'Back Bay/',
+                    ],
+                    4 => [
+                        'value' => 'Boston',
+                        'label' => 'Boston',
+                    ],
+                    5 => [
+                        'value' => 'Boston/West End',
+                        'label' => 'Boston/West End',
+                    ],
+                    6 => [
+                        'value' => 'Brighton',
+                        'label' => 'Brighton',
+                    ],
+                    7 => [
+                        'value' => 'Brighton/',
+                        'label' => 'Brighton/',
+                    ],
+                    8 => [
+                        'value' => 'Charlestown',
+                        'label' => 'Charlestown',
+                    ],
+                    9 => [
+                        'value' => 'Charlestown/',
+                        'label' => 'Charlestown/',
+                    ],
+                    10 => [
+                        'value' => 'Charlestown666',
+                        'label' => 'Charlestown666',
+                    ],
+                    11 => [
+                        'value' => 'Chestnut Hill',
+                        'label' => 'Chestnut Hill',
+                    ],
+                    12 => [
+                        'value' => 'Chinatown',
+                        'label' => 'Chinatown',
+                    ],
+                    13 => [
+                        'value' => 'Dorchester',
+                        'label' => 'Dorchester',
+                    ],
+                    14 => [
+                        'value' => 'Dorchester (Lower Mills)',
+                        'label' => 'Dorchester (Lower Mills)',
+                    ],
+                    15 => [
+                        'value' => 'Dorchester Center',
+                        'label' => 'Dorchester Center',
+                    ],
+                    16 => [
+                        'value' => 'Dorchester/',
+                        'label' => 'Dorchester/',
+                    ],
+                    17 => [
+                        'value' => 'East Boston',
+                        'label' => 'East Boston',
+                    ],
+                    18 => [
+                        'value' => 'East Boston/',
+                        'label' => 'East Boston/',
+                    ],
+                    19 => [
+                        'value' => 'East Boston//',
+                        'label' => 'East Boston//',
+                    ],
+                    20 => [
+                        'value' => 'Fenway/',
+                        'label' => 'Fenway/',
+                    ],
+                    21 => [
+                        'value' => 'Financial District',
+                        'label' => 'Financial District',
+                    ],
+                    22 => [
+                        'value' => 'Financial District/',
+                        'label' => 'Financial District/',
+                    ],
+                    23 => [
+                        'value' => 'Hyde Park',
+                        'label' => 'Hyde Park',
+                    ],
+                    24 => [
+                        'value' => 'Hyde Park/',
+                        'label' => 'Hyde Park/',
+                    ],
+                    25 => [
+                        'value' => 'Jamaica Plain',
+                        'label' => 'Jamaica Plain',
+                    ],
+                    26 => [
+                        'value' => 'Jamaica Plain/',
+                        'label' => 'Jamaica Plain/',
+                    ],
+                    27 => [
+                        'value' => 'Kenmore/fenway',
+                        'label' => 'Kenmore/fenway',
+                    ],
+                    28 => [
+                        'value' => 'Mattapan',
+                        'label' => 'Mattapan',
+                    ],
+                    29 => [
+                        'value' => 'Mattapan/',
+                        'label' => 'Mattapan/',
+                    ],
+                    30 => [
+                        'value' => 'Mission Hill',
+                        'label' => 'Mission Hill',
+                    ],
+                    31 => [
+                        'value' => 'Mission Hill/',
+                        'label' => 'Mission Hill/',
+                    ],
+                    32 => [
+                        'value' => 'NorthEnd',
+                        'label' => 'NorthEnd',
+                    ],
+                    33 => [
+                        'value' => 'NorthEnd/',
+                        'label' => 'NorthEnd/',
+                    ],
+                    34 => [
+                        'value' => 'Roslindale',
+                        'label' => 'Roslindale',
+                    ],
+                    35 => [
+                        'value' => 'Roslindale/',
+                        'label' => 'Roslindale/',
+                    ],
+                    36 => [
+                        'value' => 'Roxbury',
+                        'label' => 'Roxbury',
+                    ],
+                    37 => [
+                        'value' => 'ROXBURY CROSSIN',
+                        'label' => 'ROXBURY CROSSIN',
+                    ],
+                    38 => [
+                        'value' => 'Roxbury/',
+                        'label' => 'Roxbury/',
+                    ],
+                    39 => [
+                        'value' => 'South Boston',
+                        'label' => 'South Boston',
+                    ],
+                    40 => [
+                        'value' => 'South End',
+                        'label' => 'South End',
+                    ],
+                    41 => [
+                        'value' => 'Theater District',
+                        'label' => 'Theater District',
+                    ],
+                    42 => [
+                        'value' => 'West End',
+                        'label' => 'West End',
+                    ],
+                    43 => [
+                        'value' => 'West Roxbury',
+                        'label' => 'West Roxbury',
+                    ],
+                    44 => [
+                        'value' => 'West Roxbury/',
+                        'label' => 'West Roxbury/',
+                    ],
+                ],
+            ],
+            12 => [
+                'name' => 'violation_state',
+                'label' => 'Violation State',
+                'type' => 'text',
+                'placeholder' => 'Enter Violation State',
+            ],
+            13 => [
+                'name' => 'violation_zip',
+                'label' => 'Violation Zip',
+                'type' => 'select',
+                'placeholder' => 'Select Violation Zip',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => '02108',
+                        'label' => '02108',
+                    ],
+                    2 => [
+                        'value' => '02109',
+                        'label' => '02109',
+                    ],
+                    3 => [
+                        'value' => '02110',
+                        'label' => '02110',
+                    ],
+                    4 => [
+                        'value' => '02111',
+                        'label' => '02111',
+                    ],
+                    5 => [
+                        'value' => '02113',
+                        'label' => '02113',
+                    ],
+                    6 => [
+                        'value' => '02114',
+                        'label' => '02114',
+                    ],
+                    7 => [
+                        'value' => '02115',
+                        'label' => '02115',
+                    ],
+                    8 => [
+                        'value' => '02116',
+                        'label' => '02116',
+                    ],
+                    9 => [
+                        'value' => '02118',
+                        'label' => '02118',
+                    ],
+                    10 => [
+                        'value' => '02119',
+                        'label' => '02119',
+                    ],
+                    11 => [
+                        'value' => '02120',
+                        'label' => '02120',
+                    ],
+                    12 => [
+                        'value' => '02121',
+                        'label' => '02121',
+                    ],
+                    13 => [
+                        'value' => '02122',
+                        'label' => '02122',
+                    ],
+                    14 => [
+                        'value' => '02123',
+                        'label' => '02123',
+                    ],
+                    15 => [
+                        'value' => '02124',
+                        'label' => '02124',
+                    ],
+                    16 => [
+                        'value' => '02125',
+                        'label' => '02125',
+                    ],
+                    17 => [
+                        'value' => '02126',
+                        'label' => '02126',
+                    ],
+                    18 => [
+                        'value' => '02126-1616',
+                        'label' => '02126-1616',
+                    ],
+                    19 => [
+                        'value' => '02127',
+                        'label' => '02127',
+                    ],
+                    20 => [
+                        'value' => '02128',
+                        'label' => '02128',
+                    ],
+                    21 => [
+                        'value' => '02129',
+                        'label' => '02129',
+                    ],
+                    22 => [
+                        'value' => '02130',
+                        'label' => '02130',
+                    ],
+                    23 => [
+                        'value' => '02131',
+                        'label' => '02131',
+                    ],
+                    24 => [
+                        'value' => '02132',
+                        'label' => '02132',
+                    ],
+                    25 => [
+                        'value' => '02134',
+                        'label' => '02134',
+                    ],
+                    26 => [
+                        'value' => '02135',
+                        'label' => '02135',
+                    ],
+                    27 => [
+                        'value' => '02136',
+                        'label' => '02136',
+                    ],
+                    28 => [
+                        'value' => '02199',
+                        'label' => '02199',
+                    ],
+                    29 => [
+                        'value' => '02210',
+                        'label' => '02210',
+                    ],
+                    30 => [
+                        'value' => '02215',
+                        'label' => '02215',
+                    ],
+                    31 => [
+                        'value' => '02446',
+                        'label' => '02446',
+                    ],
+                    32 => [
+                        'value' => '02467',
+                        'label' => '02467',
+                    ],
+                ],
+            ],
+            14 => [
+                'name' => 'ward',
+                'label' => 'Ward',
+                'type' => 'select',
+                'placeholder' => 'Select Ward',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => '01',
+                        'label' => '01',
+                    ],
+                    2 => [
+                        'value' => '02',
+                        'label' => '02',
+                    ],
+                    3 => [
+                        'value' => '03',
+                        'label' => '03',
+                    ],
+                    4 => [
+                        'value' => '04',
+                        'label' => '04',
+                    ],
+                    5 => [
+                        'value' => '05',
+                        'label' => '05',
+                    ],
+                    6 => [
+                        'value' => '06',
+                        'label' => '06',
+                    ],
+                    7 => [
+                        'value' => '07',
+                        'label' => '07',
+                    ],
+                    8 => [
+                        'value' => '08',
+                        'label' => '08',
+                    ],
+                    9 => [
+                        'value' => '09',
+                        'label' => '09',
+                    ],
+                    10 => [
+                        'value' => '10',
+                        'label' => '10',
+                    ],
+                    11 => [
+                        'value' => '11',
+                        'label' => '11',
+                    ],
+                    12 => [
+                        'value' => '12',
+                        'label' => '12',
+                    ],
+                    13 => [
+                        'value' => '13',
+                        'label' => '13',
+                    ],
+                    14 => [
+                        'value' => '14',
+                        'label' => '14',
+                    ],
+                    15 => [
+                        'value' => '15',
+                        'label' => '15',
+                    ],
+                    16 => [
+                        'value' => '16',
+                        'label' => '16',
+                    ],
+                    17 => [
+                        'value' => '17',
+                        'label' => '17',
+                    ],
+                    18 => [
+                        'value' => '18',
+                        'label' => '18',
+                    ],
+                    19 => [
+                        'value' => '19',
+                        'label' => '19',
+                    ],
+                    20 => [
+                        'value' => '20',
+                        'label' => '20',
+                    ],
+                    21 => [
+                        'value' => '21',
+                        'label' => '21',
+                    ],
+                    22 => [
+                        'value' => '22',
+                        'label' => '22',
+                    ],
+                ],
+            ],
+            15 => [
+                'name' => 'contact_addr1',
+                'label' => 'Contact Addr1',
+                'type' => 'text',
+                'placeholder' => 'Enter Contact Addr1',
+            ],
+            16 => [
+                'name' => 'contact_addr2',
+                'label' => 'Contact Addr2',
+                'type' => 'text',
+                'placeholder' => 'Enter Contact Addr2',
+            ],
+            17 => [
+                'name' => 'contact_city',
+                'label' => 'Contact City',
+                'type' => 'text',
+                'placeholder' => 'Enter Contact City',
+            ],
+            18 => [
+                'name' => 'contact_state',
+                'label' => 'Contact State',
+                'type' => 'text',
+                'placeholder' => 'Enter Contact State',
+            ],
+            19 => [
+                'name' => 'contact_zip',
+                'label' => 'Contact Zip',
+                'type' => 'text',
+                'placeholder' => 'Enter Contact Zip',
+            ],
+            20 => [
+                'name' => 'sam_id',
+                'label' => 'Sam Id',
+                'type' => 'text',
+                'placeholder' => 'Enter Sam Id',
+            ],
+            21 => [
+                'name' => 'latitude_min',
+                'label' => 'Latitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Latitude',
+            ],
+            22 => [
+                'name' => 'latitude_max',
+                'label' => 'Latitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Latitude',
+            ],
+            23 => [
+                'name' => 'longitude_min',
+                'label' => 'Longitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Longitude',
+            ],
+            24 => [
+                'name' => 'longitude_max',
+                'label' => 'Longitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Longitude',
+            ],
+            25 => [
+                'name' => 'location',
+                'label' => 'Location',
+                'type' => 'text',
+                'placeholder' => 'Enter Location',
+            ],
+            26 => [
+                'name' => 'language_code',
+                'label' => 'Language Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Language Code',
+            ],
+        ],
+        'contextData' => 'Dataset of Property Violations. Filter by attributes like case no, ap case defn key, date (Status Dttm), status.',
+        'searchableColumns' => [
+            0 => 'case_no',
+            1 => 'status',
+            2 => 'code',
+            3 => 'description',
+            4 => 'violation_stno',
+            5 => 'violation_street',
+            6 => 'violation_zip',
+            7 => 'ward',
+            8 => 'contact_city',
+            9 => 'contact_state',
+            10 => 'sam_id',
+            11 => 'latitude',
+            12 => 'longitude',
+            13 => 'language_code',
+        ],
+        'gptSchemaProperties' => [
+            'search_term' => [
+                'type' => 'string',
+                'description' => 'A general search term to query across multiple text fields.',
+            ],
+            'start_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for \'status_dttm\' (YYYY-MM-DD)',
+            ],
+            'end_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for \'status_dttm\' (YYYY-MM-DD)',
+            ],
+            'limit' => [
+                'type' => 'integer',
+                'description' => 'Limit the number of records. Default is 1000, max 5000.',
+            ],
+            'case_no' => [
+                'type' => 'string',
+                'description' => 'Filter by Case No.',
+            ],
+            'ap_case_defn_key' => [
+                'type' => 'string',
+                'description' => 'Filter by Ap Case Defn Key.',
+            ],
+            'status' => [
+                'type' => 'string',
+                'description' => 'Filter by Status. Possible values: Closed, Open, Void.',
+            ],
+            'code' => [
+                'type' => 'string',
+                'description' => 'Filter by Code.',
+            ],
+            'value' => [
+                'type' => 'string',
+                'description' => 'Filter by Value.',
+            ],
+            'description' => [
+                'type' => 'string',
+                'description' => 'Filter by Description.',
+            ],
+            'violation_stno' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation Stno.',
+            ],
+            'violation_sthigh' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation Sthigh.',
+            ],
+            'violation_street' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation Street.',
+            ],
+            'violation_suffix' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation Suffix. Possible values:  , AV, AVE, BL, BLVD, CC, CI, CIR, CT, DR, GRN, HW, LN, PARK, PK, PL, PW, PZ, RD, RO, SQ, ST, TE, TER, WAY, WH, WY.',
+            ],
+            'violation_city' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation City. Possible values:  , Allston, Allston/Boston, Back Bay/, Boston, Boston/West End, Brighton, Brighton/, Charlestown, Charlestown/, Charlestown666, Chestnut Hill, Chinatown, Dorchester, Dorchester (Lower Mills), Dorchester Center, Dorchester/, East Boston, East Boston/, East Boston//, Fenway/, Financial District, Financial District/, Hyde Park, Hyde Park/, Jamaica Plain, Jamaica Plain/, Kenmore/fenway, Mattapan, Mattapan/, Mission Hill, Mission Hill/, NorthEnd, NorthEnd/, Roslindale, Roslindale/, Roxbury, ROXBURY CROSSIN, Roxbury/, South Boston, South End, Theater District, West End, West Roxbury, West Roxbury/.',
+            ],
+            'violation_state' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation State.',
+            ],
+            'violation_zip' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation Zip. Possible values:  , 02108, 02109, 02110, 02111, 02113, 02114, 02115, 02116, 02118, 02119, 02120, 02121, 02122, 02123, 02124, 02125, 02126, 02126-1616, 02127, 02128, 02129, 02130, 02131, 02132, 02134, 02135, 02136, 02199, 02210, 02215, 02446, 02467.',
+            ],
+            'ward' => [
+                'type' => 'string',
+                'description' => 'Filter by Ward. Possible values:  , 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22.',
+            ],
+            'contact_addr1' => [
+                'type' => 'string',
+                'description' => 'Filter by Contact Addr1.',
+            ],
+            'contact_addr2' => [
+                'type' => 'string',
+                'description' => 'Filter by Contact Addr2.',
+            ],
+            'contact_city' => [
+                'type' => 'string',
+                'description' => 'Filter by Contact City.',
+            ],
+            'contact_state' => [
+                'type' => 'string',
+                'description' => 'Filter by Contact State.',
+            ],
+            'contact_zip' => [
+                'type' => 'string',
+                'description' => 'Filter by Contact Zip.',
+            ],
+            'sam_id' => [
+                'type' => 'string',
+                'description' => 'Filter by Sam Id.',
+            ],
+            'latitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Latitude.',
+            ],
+            'latitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Latitude.',
+            ],
+            'longitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Longitude.',
+            ],
+            'longitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Longitude.',
+            ],
+            'location' => [
+                'type' => 'string',
+                'description' => 'Filter by Location.',
+            ],
+            'language_code' => [
+                'type' => 'string',
+                'description' => 'Filter by Language Code.',
+            ],
+        ],
+    ],
+    'App\\Models\\FoodInspection' => [
+        'filterableFieldsDescription' => [
+            0 => [
+                'name' => 'search_term',
+                'label' => 'General Search',
+                'type' => 'text',
+                'placeholder' => 'Search across all fields...',
+            ],
+            1 => [
+                'name' => 'external_id_min',
+                'label' => 'External Id Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for External Id',
+            ],
+            2 => [
+                'name' => 'external_id_max',
+                'label' => 'External Id Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for External Id',
+            ],
+            3 => [
+                'name' => 'businessname',
+                'label' => 'Businessname',
+                'type' => 'text',
+                'placeholder' => 'Enter Businessname',
+            ],
+            4 => [
+                'name' => 'dbaname',
+                'label' => 'Dbaname',
+                'type' => 'text',
+                'placeholder' => 'Enter Dbaname',
+            ],
+            5 => [
+                'name' => 'legalowner',
+                'label' => 'Legalowner',
+                'type' => 'text',
+                'placeholder' => 'Enter Legalowner',
+            ],
+            6 => [
+                'name' => 'namelast',
+                'label' => 'Namelast',
+                'type' => 'text',
+                'placeholder' => 'Enter Namelast',
+            ],
+            7 => [
+                'name' => 'namefirst',
+                'label' => 'Namefirst',
+                'type' => 'text',
+                'placeholder' => 'Enter Namefirst',
+            ],
+            8 => [
+                'name' => 'licenseno',
+                'label' => 'Licenseno',
+                'type' => 'text',
+                'placeholder' => 'Enter Licenseno',
+            ],
+            9 => [
+                'name' => 'issdttm_start',
+                'label' => 'Issdttm Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Issdttm',
+            ],
+            10 => [
+                'name' => 'issdttm_end',
+                'label' => 'Issdttm End',
+                'type' => 'date',
+                'placeholder' => 'End date for Issdttm',
+            ],
+            11 => [
+                'name' => 'expdttm_start',
+                'label' => 'Expdttm Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Expdttm',
+            ],
+            12 => [
+                'name' => 'expdttm_end',
+                'label' => 'Expdttm End',
+                'type' => 'date',
+                'placeholder' => 'End date for Expdttm',
+            ],
+            13 => [
+                'name' => 'licstatus',
+                'label' => 'Licstatus',
+                'type' => 'select',
+                'placeholder' => 'Select Licstatus',
+                'options' => [
+                    0 => [
+                        'value' => 'Active',
+                        'label' => 'Active',
+                    ],
+                    1 => [
+                        'value' => 'Deleted',
+                        'label' => 'Deleted',
+                    ],
+                    2 => [
+                        'value' => 'Inactive',
+                        'label' => 'Inactive',
+                    ],
+                ],
+            ],
+            14 => [
+                'name' => 'licensecat',
+                'label' => 'Licensecat',
+                'type' => 'select',
+                'placeholder' => 'Select Licensecat',
+                'options' => [
+                    0 => [
+                        'value' => 'FS',
+                        'label' => 'FS',
+                    ],
+                    1 => [
+                        'value' => 'FT',
+                        'label' => 'FT',
+                    ],
+                    2 => [
+                        'value' => 'MFW',
+                        'label' => 'MFW',
+                    ],
+                    3 => [
+                        'value' => 'RF',
+                        'label' => 'RF',
+                    ],
+                ],
+            ],
+            15 => [
+                'name' => 'descript',
+                'label' => 'Descript',
+                'type' => 'text',
+                'placeholder' => 'Enter Descript',
+            ],
+            16 => [
+                'name' => 'result',
+                'label' => 'Result',
+                'type' => 'select',
+                'placeholder' => 'Select Result',
+                'options' => [
+                    0 => [
+                        'value' => 'Closed',
+                        'label' => 'Closed',
+                    ],
+                    1 => [
+                        'value' => 'DATAERR',
+                        'label' => 'DATAERR',
+                    ],
+                    2 => [
+                        'value' => 'Fail',
+                        'label' => 'Fail',
+                    ],
+                    3 => [
+                        'value' => 'Failed',
+                        'label' => 'Failed',
+                    ],
+                    4 => [
+                        'value' => 'HE_Closure',
+                        'label' => 'HE_Closure',
+                    ],
+                    5 => [
+                        'value' => 'HE_Fail',
+                        'label' => 'HE_Fail',
+                    ],
+                    6 => [
+                        'value' => 'HE_FailExt',
+                        'label' => 'HE_FailExt',
+                    ],
+                    7 => [
+                        'value' => 'HE_FAILNOR',
+                        'label' => 'HE_FAILNOR',
+                    ],
+                    8 => [
+                        'value' => 'HE_Filed',
+                        'label' => 'HE_Filed',
+                    ],
+                    9 => [
+                        'value' => 'HE_Hearing',
+                        'label' => 'HE_Hearing',
+                    ],
+                    10 => [
+                        'value' => 'HE_Hold',
+                        'label' => 'HE_Hold',
+                    ],
+                    11 => [
+                        'value' => 'HE_Misc',
+                        'label' => 'HE_Misc',
+                    ],
+                    12 => [
+                        'value' => 'HE_NotReq',
+                        'label' => 'HE_NotReq',
+                    ],
+                    13 => [
+                        'value' => 'HE_OutBus',
+                        'label' => 'HE_OutBus',
+                    ],
+                    14 => [
+                        'value' => 'HE_Pass',
+                        'label' => 'HE_Pass',
+                    ],
+                    15 => [
+                        'value' => 'HE_TSOP',
+                        'label' => 'HE_TSOP',
+                    ],
+                    16 => [
+                        'value' => 'HE_VolClos',
+                        'label' => 'HE_VolClos',
+                    ],
+                    17 => [
+                        'value' => 'NoViol',
+                        'label' => 'NoViol',
+                    ],
+                    18 => [
+                        'value' => 'Pass',
+                        'label' => 'Pass',
+                    ],
+                    19 => [
+                        'value' => 'PassViol',
+                        'label' => 'PassViol',
+                    ],
+                ],
+            ],
+            17 => [
+                'name' => 'violation',
+                'label' => 'Violation',
+                'type' => 'text',
+                'placeholder' => 'Enter Violation',
+            ],
+            18 => [
+                'name' => 'viol_level',
+                'label' => 'Viol Level',
+                'type' => 'select',
+                'placeholder' => 'Select Viol Level',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => '-',
+                        'label' => '-',
+                    ],
+                    2 => [
+                        'value' => '*',
+                        'label' => '*',
+                    ],
+                    3 => [
+                        'value' => '**',
+                        'label' => '**',
+                    ],
+                    4 => [
+                        'value' => '***',
+                        'label' => '***',
+                    ],
+                    5 => [
+                        'value' => '1919',
+                        'label' => '1919',
+                    ],
+                ],
+            ],
+            19 => [
+                'name' => 'violdesc',
+                'label' => 'Violdesc',
+                'type' => 'text',
+                'placeholder' => 'Enter Violdesc',
+            ],
+            20 => [
+                'name' => 'violdttm_start',
+                'label' => 'Violdttm Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Violdttm',
+            ],
+            21 => [
+                'name' => 'violdttm_end',
+                'label' => 'Violdttm End',
+                'type' => 'date',
+                'placeholder' => 'End date for Violdttm',
+            ],
+            22 => [
+                'name' => 'viol_status',
+                'label' => 'Viol Status',
+                'type' => 'select',
+                'placeholder' => 'Select Viol Status',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => 'Fail',
+                        'label' => 'Fail',
+                    ],
+                    2 => [
+                        'value' => 'Pass',
+                        'label' => 'Pass',
+                    ],
+                ],
+            ],
+            23 => [
+                'name' => 'status_date_start',
+                'label' => 'Status Date Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Status Date',
+            ],
+            24 => [
+                'name' => 'status_date_end',
+                'label' => 'Status Date End',
+                'type' => 'date',
+                'placeholder' => 'End date for Status Date',
+            ],
+            25 => [
+                'name' => 'comments',
+                'label' => 'Comments',
+                'type' => 'text',
+                'placeholder' => 'Enter Comments',
+            ],
+            26 => [
+                'name' => 'address',
+                'label' => 'Address',
+                'type' => 'text',
+                'placeholder' => 'Enter Address',
+            ],
+            27 => [
+                'name' => 'city',
+                'label' => 'City',
+                'type' => 'select',
+                'placeholder' => 'Select City',
+                'options' => [
+                    0 => [
+                        'value' => ' ',
+                        'label' => ' ',
+                    ],
+                    1 => [
+                        'value' => 'ALLSTON',
+                        'label' => 'ALLSTON',
+                    ],
+                    2 => [
+                        'value' => 'BACK BAY/',
+                        'label' => 'BACK BAY/',
+                    ],
+                    3 => [
+                        'value' => 'BOSTON',
+                        'label' => 'BOSTON',
+                    ],
+                    4 => [
+                        'value' => 'BOSTON/CHINATOWN',
+                        'label' => 'BOSTON/CHINATOWN',
+                    ],
+                    5 => [
+                        'value' => 'BOSTON/WEST END',
+                        'label' => 'BOSTON/WEST END',
+                    ],
+                    6 => [
+                        'value' => 'BRIGHTON',
+                        'label' => 'BRIGHTON',
+                    ],
+                    7 => [
+                        'value' => 'BRIGHTON/',
+                        'label' => 'BRIGHTON/',
+                    ],
+                    8 => [
+                        'value' => 'CHARLESTOWN',
+                        'label' => 'CHARLESTOWN',
+                    ],
+                    9 => [
+                        'value' => 'CHARLESTOWN/',
+                        'label' => 'CHARLESTOWN/',
+                    ],
+                    10 => [
+                        'value' => 'CHESTNUT HILL',
+                        'label' => 'CHESTNUT HILL',
+                    ],
+                    11 => [
+                        'value' => 'DORCHESTER',
+                        'label' => 'DORCHESTER',
+                    ],
+                    12 => [
+                        'value' => 'DORCHESTER CENTER',
+                        'label' => 'DORCHESTER CENTER',
+                    ],
+                    13 => [
+                        'value' => 'DORCHESTER CENTER/',
+                        'label' => 'DORCHESTER CENTER/',
+                    ],
+                    14 => [
+                        'value' => 'DORCHESTER/',
+                        'label' => 'DORCHESTER/',
+                    ],
+                    15 => [
+                        'value' => 'DOWNTOWN/FINANCIAL DISTRICT',
+                        'label' => 'DOWNTOWN/FINANCIAL DISTRICT',
+                    ],
+                    16 => [
+                        'value' => 'EAST BOSTON',
+                        'label' => 'EAST BOSTON',
+                    ],
+                    17 => [
+                        'value' => 'FENWAY',
+                        'label' => 'FENWAY',
+                    ],
+                    18 => [
+                        'value' => 'FENWAY/',
+                        'label' => 'FENWAY/',
+                    ],
+                    19 => [
+                        'value' => 'FINANCIAL DISTRICT',
+                        'label' => 'FINANCIAL DISTRICT',
+                    ],
+                    20 => [
+                        'value' => 'FINANCIAL DISTRICT/',
+                        'label' => 'FINANCIAL DISTRICT/',
+                    ],
+                    21 => [
+                        'value' => 'HYDE PARK',
+                        'label' => 'HYDE PARK',
+                    ],
+                    22 => [
+                        'value' => 'JAMAICA PLAIN',
+                        'label' => 'JAMAICA PLAIN',
+                    ],
+                    23 => [
+                        'value' => 'MATTAPAN',
+                        'label' => 'MATTAPAN',
+                    ],
+                    24 => [
+                        'value' => 'MATTAPAN/',
+                        'label' => 'MATTAPAN/',
+                    ],
+                    25 => [
+                        'value' => 'MISSION HILL',
+                        'label' => 'MISSION HILL',
+                    ],
+                    26 => [
+                        'value' => 'MISSION HILL/',
+                        'label' => 'MISSION HILL/',
+                    ],
+                    27 => [
+                        'value' => 'ROSLINDALE',
+                        'label' => 'ROSLINDALE',
+                    ],
+                    28 => [
+                        'value' => 'ROSLINDALE/',
+                        'label' => 'ROSLINDALE/',
+                    ],
+                    29 => [
+                        'value' => 'ROXBURY',
+                        'label' => 'ROXBURY',
+                    ],
+                    30 => [
+                        'value' => 'ROXBURY CROSSIN',
+                        'label' => 'ROXBURY CROSSIN',
+                    ],
+                    31 => [
+                        'value' => 'ROXBURY/BOSTON',
+                        'label' => 'ROXBURY/BOSTON',
+                    ],
+                    32 => [
+                        'value' => 'SOUTH BOSTON',
+                        'label' => 'SOUTH BOSTON',
+                    ],
+                    33 => [
+                        'value' => 'SOUTH BOSTON/',
+                        'label' => 'SOUTH BOSTON/',
+                    ],
+                    34 => [
+                        'value' => 'SOUTH END/',
+                        'label' => 'SOUTH END/',
+                    ],
+                    35 => [
+                        'value' => 'WEST ROXBURY',
+                        'label' => 'WEST ROXBURY',
+                    ],
+                    36 => [
+                        'value' => 'WEST ROXBURY//',
+                        'label' => 'WEST ROXBURY//',
+                    ],
+                ],
+            ],
+            28 => [
+                'name' => 'state',
+                'label' => 'State',
+                'type' => 'text',
+                'placeholder' => 'Enter State',
+            ],
+            29 => [
+                'name' => 'zip',
+                'label' => 'Zip',
+                'type' => 'select',
+                'placeholder' => 'Select Zip',
+                'options' => [
+                    0 => [
+                        'value' => '00000',
+                        'label' => '00000',
+                    ],
+                    1 => [
+                        'value' => '02050',
+                        'label' => '02050',
+                    ],
+                    2 => [
+                        'value' => '02108',
+                        'label' => '02108',
+                    ],
+                    3 => [
+                        'value' => '02109',
+                        'label' => '02109',
+                    ],
+                    4 => [
+                        'value' => '02110',
+                        'label' => '02110',
+                    ],
+                    5 => [
+                        'value' => '02111',
+                        'label' => '02111',
+                    ],
+                    6 => [
+                        'value' => '02113',
+                        'label' => '02113',
+                    ],
+                    7 => [
+                        'value' => '02114',
+                        'label' => '02114',
+                    ],
+                    8 => [
+                        'value' => '02115',
+                        'label' => '02115',
+                    ],
+                    9 => [
+                        'value' => '02116',
+                        'label' => '02116',
+                    ],
+                    10 => [
+                        'value' => '02118',
+                        'label' => '02118',
+                    ],
+                    11 => [
+                        'value' => '02119',
+                        'label' => '02119',
+                    ],
+                    12 => [
+                        'value' => '02119-3212',
+                        'label' => '02119-3212',
+                    ],
+                    13 => [
+                        'value' => '02120',
+                        'label' => '02120',
+                    ],
+                    14 => [
+                        'value' => '02121',
+                        'label' => '02121',
+                    ],
+                    15 => [
+                        'value' => '02122',
+                        'label' => '02122',
+                    ],
+                    16 => [
+                        'value' => '02124',
+                        'label' => '02124',
+                    ],
+                    17 => [
+                        'value' => '02125',
+                        'label' => '02125',
+                    ],
+                    18 => [
+                        'value' => '02125-1663',
+                        'label' => '02125-1663',
+                    ],
+                    19 => [
+                        'value' => '02126',
+                        'label' => '02126',
+                    ],
+                    20 => [
+                        'value' => '02127',
+                        'label' => '02127',
+                    ],
+                    21 => [
+                        'value' => '02128',
+                        'label' => '02128',
+                    ],
+                    22 => [
+                        'value' => '02129',
+                        'label' => '02129',
+                    ],
+                    23 => [
+                        'value' => '02130',
+                        'label' => '02130',
+                    ],
+                    24 => [
+                        'value' => '02131',
+                        'label' => '02131',
+                    ],
+                    25 => [
+                        'value' => '02132',
+                        'label' => '02132',
+                    ],
+                    26 => [
+                        'value' => '02134',
+                        'label' => '02134',
+                    ],
+                    27 => [
+                        'value' => '02135',
+                        'label' => '02135',
+                    ],
+                    28 => [
+                        'value' => '02136',
+                        'label' => '02136',
+                    ],
+                    29 => [
+                        'value' => '02145',
+                        'label' => '02145',
+                    ],
+                    30 => [
+                        'value' => '02148',
+                        'label' => '02148',
+                    ],
+                    31 => [
+                        'value' => '02163',
+                        'label' => '02163',
+                    ],
+                    32 => [
+                        'value' => '02188',
+                        'label' => '02188',
+                    ],
+                    33 => [
+                        'value' => '02199',
+                        'label' => '02199',
+                    ],
+                    34 => [
+                        'value' => '02201',
+                        'label' => '02201',
+                    ],
+                    35 => [
+                        'value' => '02205',
+                        'label' => '02205',
+                    ],
+                    36 => [
+                        'value' => '02210',
+                        'label' => '02210',
+                    ],
+                    37 => [
+                        'value' => '02215',
+                        'label' => '02215',
+                    ],
+                    38 => [
+                        'value' => '02446',
+                        'label' => '02446',
+                    ],
+                    39 => [
+                        'value' => '02467',
+                        'label' => '02467',
+                    ],
+                ],
+            ],
+            30 => [
+                'name' => 'property_id',
+                'label' => 'Property Id',
+                'type' => 'text',
+                'placeholder' => 'Enter Property Id',
+            ],
+            31 => [
+                'name' => 'latitude_min',
+                'label' => 'Latitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Latitude',
+            ],
+            32 => [
+                'name' => 'latitude_max',
+                'label' => 'Latitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Latitude',
+            ],
+            33 => [
+                'name' => 'longitude_min',
+                'label' => 'Longitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Longitude',
+            ],
+            34 => [
+                'name' => 'longitude_max',
+                'label' => 'Longitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Longitude',
+            ],
+            35 => [
+                'name' => 'language_code',
+                'label' => 'Language Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Language Code',
+            ],
+        ],
+        'contextData' => 'Dataset of Food Inspections. Filter by attributes like businessname, dbaname, legalowner.',
+        'searchableColumns' => [
+            0 => 'external_id',
+            1 => 'businessname',
+            2 => 'dbaname',
+            3 => 'licenseno',
+            4 => 'licstatus',
+            5 => 'licensecat',
+            6 => 'result',
+            7 => 'viol_level',
+            8 => 'viol_status',
+            9 => 'address',
+            10 => 'city',
+            11 => 'zip',
+            12 => 'property_id',
+            13 => 'language_code',
+        ],
+        'gptSchemaProperties' => [
+            'search_term' => [
+                'type' => 'string',
+                'description' => 'A general search term to query across multiple text fields.',
+            ],
+            'start_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for \'resultdttm\' (YYYY-MM-DD)',
+            ],
+            'end_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for \'resultdttm\' (YYYY-MM-DD)',
+            ],
+            'limit' => [
+                'type' => 'integer',
+                'description' => 'Limit the number of records. Default is 1000, max 5000.',
+            ],
+            'external_id_min' => [
+                'type' => 'integer',
+                'description' => 'Minimum value for External Id.',
+            ],
+            'external_id_max' => [
+                'type' => 'integer',
+                'description' => 'Maximum value for External Id.',
+            ],
+            'businessname' => [
+                'type' => 'string',
+                'description' => 'Filter by Businessname.',
+            ],
+            'dbaname' => [
+                'type' => 'string',
+                'description' => 'Filter by Dbaname.',
+            ],
+            'legalowner' => [
+                'type' => 'string',
+                'description' => 'Filter by Legalowner.',
+            ],
+            'namelast' => [
+                'type' => 'string',
+                'description' => 'Filter by Namelast.',
+            ],
+            'namefirst' => [
+                'type' => 'string',
+                'description' => 'Filter by Namefirst.',
+            ],
+            'licenseno' => [
+                'type' => 'string',
+                'description' => 'Filter by Licenseno.',
+            ],
+            'issdttm_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Issdttm (YYYY-MM-DD)',
+            ],
+            'issdttm_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Issdttm (YYYY-MM-DD)',
+            ],
+            'expdttm_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Expdttm (YYYY-MM-DD)',
+            ],
+            'expdttm_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Expdttm (YYYY-MM-DD)',
+            ],
+            'licstatus' => [
+                'type' => 'string',
+                'description' => 'Filter by Licstatus. Possible values: Active, Deleted, Inactive.',
+            ],
+            'licensecat' => [
+                'type' => 'string',
+                'description' => 'Filter by Licensecat. Possible values: FS, FT, MFW, RF.',
+            ],
+            'descript' => [
+                'type' => 'string',
+                'description' => 'Filter by Descript.',
+            ],
+            'result' => [
+                'type' => 'string',
+                'description' => 'Filter by Result. Possible values: Closed, DATAERR, Fail, Failed, HE_Closure, HE_Fail, HE_FailExt, HE_FAILNOR, HE_Filed, HE_Hearing, HE_Hold, HE_Misc, HE_NotReq, HE_OutBus, HE_Pass, HE_TSOP, HE_VolClos, NoViol, Pass, PassViol.',
+            ],
+            'violation' => [
+                'type' => 'string',
+                'description' => 'Filter by Violation.',
+            ],
+            'viol_level' => [
+                'type' => 'string',
+                'description' => 'Filter by Viol Level. Possible values:  , -, *, **, ***, 1919.',
+            ],
+            'violdesc' => [
+                'type' => 'string',
+                'description' => 'Filter by Violdesc.',
+            ],
+            'violdttm_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Violdttm (YYYY-MM-DD)',
+            ],
+            'violdttm_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Violdttm (YYYY-MM-DD)',
+            ],
+            'viol_status' => [
+                'type' => 'string',
+                'description' => 'Filter by Viol Status. Possible values:  , Fail, Pass.',
+            ],
+            'status_date_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Status Date (YYYY-MM-DD)',
+            ],
+            'status_date_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Status Date (YYYY-MM-DD)',
+            ],
+            'comments' => [
+                'type' => 'string',
+                'description' => 'Filter by Comments.',
+            ],
+            'address' => [
+                'type' => 'string',
+                'description' => 'Filter by Address.',
+            ],
+            'city' => [
+                'type' => 'string',
+                'description' => 'Filter by City. Possible values:  , ALLSTON, BACK BAY/, BOSTON, BOSTON/CHINATOWN, BOSTON/WEST END, BRIGHTON, BRIGHTON/, CHARLESTOWN, CHARLESTOWN/, CHESTNUT HILL, DORCHESTER, DORCHESTER CENTER, DORCHESTER CENTER/, DORCHESTER/, DOWNTOWN/FINANCIAL DISTRICT, EAST BOSTON, FENWAY, FENWAY/, FINANCIAL DISTRICT, FINANCIAL DISTRICT/, HYDE PARK, JAMAICA PLAIN, MATTAPAN, MATTAPAN/, MISSION HILL, MISSION HILL/, ROSLINDALE, ROSLINDALE/, ROXBURY, ROXBURY CROSSIN, ROXBURY/BOSTON, SOUTH BOSTON, SOUTH BOSTON/, SOUTH END/, WEST ROXBURY, WEST ROXBURY//.',
+            ],
+            'state' => [
+                'type' => 'string',
+                'description' => 'Filter by State.',
+            ],
+            'zip' => [
+                'type' => 'string',
+                'description' => 'Filter by Zip. Possible values: 00000, 02050, 02108, 02109, 02110, 02111, 02113, 02114, 02115, 02116, 02118, 02119, 02119-3212, 02120, 02121, 02122, 02124, 02125, 02125-1663, 02126, 02127, 02128, 02129, 02130, 02131, 02132, 02134, 02135, 02136, 02145, 02148, 02163, 02188, 02199, 02201, 02205, 02210, 02215, 02446, 02467.',
+            ],
+            'property_id' => [
+                'type' => 'string',
+                'description' => 'Filter by Property Id.',
+            ],
+            'latitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Latitude.',
+            ],
+            'latitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Latitude.',
+            ],
+            'longitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Longitude.',
+            ],
+            'longitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Longitude.',
+            ],
+            'language_code' => [
+                'type' => 'string',
+                'description' => 'Filter by Language Code.',
+            ],
+        ],
+    ],
+    'App\\Models\\BuildingPermit' => [
+        'filterableFieldsDescription' => [
+            0 => [
+                'name' => 'search_term',
+                'label' => 'General Search',
+                'type' => 'text',
+                'placeholder' => 'Search across all fields...',
+            ],
+            1 => [
+                'name' => 'permitnumber',
+                'label' => 'Permitnumber',
+                'type' => 'text',
+                'placeholder' => 'Enter Permitnumber',
+            ],
+            2 => [
+                'name' => 'worktype',
+                'label' => 'Worktype',
+                'type' => 'text',
+                'placeholder' => 'Enter Worktype',
+            ],
+            3 => [
+                'name' => 'permittypedescr',
+                'label' => 'Permittypedescr',
+                'type' => 'select',
+                'placeholder' => 'Select Permittypedescr',
+                'options' => [
+                    0 => [
+                        'value' => 'Amendment to a Long Form',
+                        'label' => 'Amendment to a Long Form',
+                    ],
+                    1 => [
+                        'value' => 'Certificate of Occupancy',
+                        'label' => 'Certificate of Occupancy',
+                    ],
+                    2 => [
+                        'value' => 'Electrical Fire Alarms',
+                        'label' => 'Electrical Fire Alarms',
+                    ],
+                    3 => [
+                        'value' => 'Electrical Low Voltage',
+                        'label' => 'Electrical Low Voltage',
+                    ],
+                    4 => [
+                        'value' => 'Electrical Permit',
+                        'label' => 'Electrical Permit',
+                    ],
+                    5 => [
+                        'value' => 'Electrical Temporary Service',
+                        'label' => 'Electrical Temporary Service',
+                    ],
+                    6 => [
+                        'value' => 'Erect/New Construction',
+                        'label' => 'Erect/New Construction',
+                    ],
+                    7 => [
+                        'value' => 'Foundation Permit',
+                        'label' => 'Foundation Permit',
+                    ],
+                    8 => [
+                        'value' => 'Gas Permit',
+                        'label' => 'Gas Permit',
+                    ],
+                    9 => [
+                        'value' => 'Long Form/Alteration Permit',
+                        'label' => 'Long Form/Alteration Permit',
+                    ],
+                    10 => [
+                        'value' => 'Plumbing Permit',
+                        'label' => 'Plumbing Permit',
+                    ],
+                    11 => [
+                        'value' => 'Short Form Bldg Permit',
+                        'label' => 'Short Form Bldg Permit',
+                    ],
+                    12 => [
+                        'value' => 'Use of Premises',
+                        'label' => 'Use of Premises',
+                    ],
+                ],
+            ],
+            4 => [
+                'name' => 'description',
+                'label' => 'Description',
+                'type' => 'text',
+                'placeholder' => 'Enter Description',
+            ],
+            5 => [
+                'name' => 'comments',
+                'label' => 'Comments',
+                'type' => 'text',
+                'placeholder' => 'Enter Comments',
+            ],
+            6 => [
+                'name' => 'applicant',
+                'label' => 'Applicant',
+                'type' => 'text',
+                'placeholder' => 'Enter Applicant',
+            ],
+            7 => [
+                'name' => 'declared_valuation',
+                'label' => 'Declared Valuation',
+                'type' => 'text',
+                'placeholder' => 'Enter Declared Valuation',
+            ],
+            8 => [
+                'name' => 'total_fees',
+                'label' => 'Total Fees',
+                'type' => 'text',
+                'placeholder' => 'Enter Total Fees',
+            ],
+            9 => [
+                'name' => 'expiration_date_start',
+                'label' => 'Expiration Date Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Expiration Date',
+            ],
+            10 => [
+                'name' => 'expiration_date_end',
+                'label' => 'Expiration Date End',
+                'type' => 'date',
+                'placeholder' => 'End date for Expiration Date',
+            ],
+            11 => [
+                'name' => 'status',
+                'label' => 'Status',
+                'type' => 'select',
+                'placeholder' => 'Select Status',
+                'options' => [
+                    0 => [
+                        'value' => 'Closed',
+                        'label' => 'Closed',
+                    ],
+                    1 => [
+                        'value' => 'Issued',
+                        'label' => 'Issued',
+                    ],
+                    2 => [
+                        'value' => 'Open',
+                        'label' => 'Open',
+                    ],
+                    3 => [
+                        'value' => 'Stop Work',
+                        'label' => 'Stop Work',
+                    ],
+                ],
+            ],
+            12 => [
+                'name' => 'language_code',
+                'label' => 'Language Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Language Code',
+            ],
+            13 => [
+                'name' => 'occupancytype',
+                'label' => 'Occupancytype',
+                'type' => 'select',
+                'placeholder' => 'Select Occupancytype',
+                'options' => [
+                    0 => [
+                        'value' => '1-2FAM',
+                        'label' => '1-2FAM',
+                    ],
+                    1 => [
+                        'value' => '1-3FAM',
+                        'label' => '1-3FAM',
+                    ],
+                    2 => [
+                        'value' => '1-4FAM',
+                        'label' => '1-4FAM',
+                    ],
+                    3 => [
+                        'value' => '1-7FAM',
+                        'label' => '1-7FAM',
+                    ],
+                    4 => [
+                        'value' => '1Unit',
+                        'label' => '1Unit',
+                    ],
+                    5 => [
+                        'value' => '2unit',
+                        'label' => '2unit',
+                    ],
+                    6 => [
+                        'value' => '3unit',
+                        'label' => '3unit',
+                    ],
+                    7 => [
+                        'value' => '4unit',
+                        'label' => '4unit',
+                    ],
+                    8 => [
+                        'value' => '5unit',
+                        'label' => '5unit',
+                    ],
+                    9 => [
+                        'value' => '6unit',
+                        'label' => '6unit',
+                    ],
+                    10 => [
+                        'value' => '7More',
+                        'label' => '7More',
+                    ],
+                    11 => [
+                        'value' => '7unit',
+                        'label' => '7unit',
+                    ],
+                    12 => [
+                        'value' => 'Comm',
+                        'label' => 'Comm',
+                    ],
+                    13 => [
+                        'value' => 'Mixed',
+                        'label' => 'Mixed',
+                    ],
+                    14 => [
+                        'value' => 'Multi',
+                        'label' => 'Multi',
+                    ],
+                    15 => [
+                        'value' => 'Other',
+                        'label' => 'Other',
+                    ],
+                    16 => [
+                        'value' => 'VacLd',
+                        'label' => 'VacLd',
+                    ],
+                ],
+            ],
+            14 => [
+                'name' => 'sq_feet_min',
+                'label' => 'Sq Feet Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Sq Feet',
+            ],
+            15 => [
+                'name' => 'sq_feet_max',
+                'label' => 'Sq Feet Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Sq Feet',
+            ],
+            16 => [
+                'name' => 'address',
+                'label' => 'Address',
+                'type' => 'text',
+                'placeholder' => 'Enter Address',
+            ],
+            17 => [
+                'name' => 'city',
+                'label' => 'City',
+                'type' => 'text',
+                'placeholder' => 'Enter City',
+            ],
+            18 => [
+                'name' => 'state',
+                'label' => 'State',
+                'type' => 'text',
+                'placeholder' => 'Enter State',
+            ],
+            19 => [
+                'name' => 'zip',
+                'label' => 'Zip',
+                'type' => 'text',
+                'placeholder' => 'Enter Zip',
+            ],
+            20 => [
+                'name' => 'property_id',
+                'label' => 'Property Id',
+                'type' => 'text',
+                'placeholder' => 'Enter Property Id',
+            ],
+            21 => [
+                'name' => 'parcel_id',
+                'label' => 'Parcel Id',
+                'type' => 'text',
+                'placeholder' => 'Enter Parcel Id',
+            ],
+            22 => [
+                'name' => 'gpsy_min',
+                'label' => 'Gpsy Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Gpsy',
+            ],
+            23 => [
+                'name' => 'gpsy_max',
+                'label' => 'Gpsy Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Gpsy',
+            ],
+            24 => [
+                'name' => 'gpsx_min',
+                'label' => 'Gpsx Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Gpsx',
+            ],
+            25 => [
+                'name' => 'gpsx_max',
+                'label' => 'Gpsx Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Gpsx',
+            ],
+            26 => [
+                'name' => 'y_latitude_min',
+                'label' => 'Y Latitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Y Latitude',
+            ],
+            27 => [
+                'name' => 'y_latitude_max',
+                'label' => 'Y Latitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Y Latitude',
+            ],
+            28 => [
+                'name' => 'x_longitude_min',
+                'label' => 'X Longitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for X Longitude',
+            ],
+            29 => [
+                'name' => 'x_longitude_max',
+                'label' => 'X Longitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for X Longitude',
+            ],
+        ],
+        'contextData' => 'Dataset of Building Permits. Filter by attributes like permitnumber, worktype, permittypedescr.',
+        'searchableColumns' => [
+            0 => 'permitnumber',
+            1 => 'worktype',
+            2 => 'permittypedescr',
+            3 => 'status',
+            4 => 'occupancytype',
+            5 => 'address',
+            6 => 'city',
+            7 => 'state',
+            8 => 'zip',
+            9 => 'property_id',
+            10 => 'parcel_id',
+            11 => 'language_code',
+        ],
+        'gptSchemaProperties' => [
+            'search_term' => [
+                'type' => 'string',
+                'description' => 'A general search term to query across multiple text fields.',
+            ],
+            'start_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for \'issued_date\' (YYYY-MM-DD)',
+            ],
+            'end_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for \'issued_date\' (YYYY-MM-DD)',
+            ],
+            'limit' => [
+                'type' => 'integer',
+                'description' => 'Limit the number of records. Default is 1000, max 5000.',
+            ],
+            'permitnumber' => [
+                'type' => 'string',
+                'description' => 'Filter by Permitnumber.',
+            ],
+            'worktype' => [
+                'type' => 'string',
+                'description' => 'Filter by Worktype.',
+            ],
+            'permittypedescr' => [
+                'type' => 'string',
+                'description' => 'Filter by Permittypedescr. Possible values: Amendment to a Long Form, Certificate of Occupancy, Electrical Fire Alarms, Electrical Low Voltage, Electrical Permit, Electrical Temporary Service, Erect/New Construction, Foundation Permit, Gas Permit, Long Form/Alteration Permit, Plumbing Permit, Short Form Bldg Permit, Use of Premises.',
+            ],
+            'description' => [
+                'type' => 'string',
+                'description' => 'Filter by Description.',
+            ],
+            'comments' => [
+                'type' => 'string',
+                'description' => 'Filter by Comments.',
+            ],
+            'applicant' => [
+                'type' => 'string',
+                'description' => 'Filter by Applicant.',
+            ],
+            'declared_valuation' => [
+                'type' => 'string',
+                'description' => 'Filter by Declared Valuation.',
+            ],
+            'total_fees' => [
+                'type' => 'string',
+                'description' => 'Filter by Total Fees.',
+            ],
+            'expiration_date_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Expiration Date (YYYY-MM-DD)',
+            ],
+            'expiration_date_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Expiration Date (YYYY-MM-DD)',
+            ],
+            'status' => [
+                'type' => 'string',
+                'description' => 'Filter by Status. Possible values: Closed, Issued, Open, Stop Work.',
+            ],
+            'language_code' => [
+                'type' => 'string',
+                'description' => 'Filter by Language Code.',
+            ],
+            'occupancytype' => [
+                'type' => 'string',
+                'description' => 'Filter by Occupancytype. Possible values: 1-2FAM, 1-3FAM, 1-4FAM, 1-7FAM, 1Unit, 2unit, 3unit, 4unit, 5unit, 6unit, 7More, 7unit, Comm, Mixed, Multi, Other, VacLd.',
+            ],
+            'sq_feet_min' => [
+                'type' => 'integer',
+                'description' => 'Minimum value for Sq Feet.',
+            ],
+            'sq_feet_max' => [
+                'type' => 'integer',
+                'description' => 'Maximum value for Sq Feet.',
+            ],
+            'address' => [
+                'type' => 'string',
+                'description' => 'Filter by Address.',
+            ],
+            'city' => [
+                'type' => 'string',
+                'description' => 'Filter by City.',
+            ],
+            'state' => [
+                'type' => 'string',
+                'description' => 'Filter by State.',
+            ],
+            'zip' => [
+                'type' => 'string',
+                'description' => 'Filter by Zip.',
+            ],
+            'property_id' => [
+                'type' => 'string',
+                'description' => 'Filter by Property Id.',
+            ],
+            'parcel_id' => [
+                'type' => 'string',
+                'description' => 'Filter by Parcel Id.',
+            ],
+            'gpsy_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Gpsy.',
+            ],
+            'gpsy_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Gpsy.',
+            ],
+            'gpsx_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Gpsx.',
+            ],
+            'gpsx_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Gpsx.',
+            ],
+            'y_latitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Y Latitude.',
+            ],
+            'y_latitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Y Latitude.',
+            ],
+            'x_longitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for X Longitude.',
+            ],
+            'x_longitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for X Longitude.',
+            ],
+        ],
+    ],
+    'App\\Models\\ConstructionOffHour' => [
+        'filterableFieldsDescription' => [
+            0 => [
+                'name' => 'search_term',
+                'label' => 'General Search',
+                'type' => 'text',
+                'placeholder' => 'Search across all fields...',
+            ],
+            1 => [
+                'name' => 'app_no',
+                'label' => 'App No',
+                'type' => 'text',
+                'placeholder' => 'Enter App No',
+            ],
+            2 => [
+                'name' => 'stop_datetime_start',
+                'label' => 'Stop Datetime Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Stop Datetime',
+            ],
+            3 => [
+                'name' => 'stop_datetime_end',
+                'label' => 'Stop Datetime End',
+                'type' => 'date',
+                'placeholder' => 'End date for Stop Datetime',
+            ],
+            4 => [
+                'name' => 'address',
+                'label' => 'Address',
+                'type' => 'text',
+                'placeholder' => 'Enter Address',
+            ],
+            5 => [
+                'name' => 'ward',
+                'label' => 'Ward',
+                'type' => 'select',
+                'placeholder' => 'Select Ward',
+                'options' => [
+                    0 => [
+                        'value' => '01',
+                        'label' => '01',
+                    ],
+                    1 => [
+                        'value' => '02',
+                        'label' => '02',
+                    ],
+                    2 => [
+                        'value' => '03',
+                        'label' => '03',
+                    ],
+                    3 => [
+                        'value' => '04',
+                        'label' => '04',
+                    ],
+                    4 => [
+                        'value' => '05',
+                        'label' => '05',
+                    ],
+                    5 => [
+                        'value' => '06',
+                        'label' => '06',
+                    ],
+                    6 => [
+                        'value' => '07',
+                        'label' => '07',
+                    ],
+                    7 => [
+                        'value' => '08',
+                        'label' => '08',
+                    ],
+                    8 => [
+                        'value' => '09',
+                        'label' => '09',
+                    ],
+                    9 => [
+                        'value' => '10',
+                        'label' => '10',
+                    ],
+                    10 => [
+                        'value' => '11',
+                        'label' => '11',
+                    ],
+                    11 => [
+                        'value' => '12',
+                        'label' => '12',
+                    ],
+                    12 => [
+                        'value' => '13',
+                        'label' => '13',
+                    ],
+                    13 => [
+                        'value' => '14',
+                        'label' => '14',
+                    ],
+                    14 => [
+                        'value' => '15',
+                        'label' => '15',
+                    ],
+                    15 => [
+                        'value' => '16',
+                        'label' => '16',
+                    ],
+                    16 => [
+                        'value' => '17',
+                        'label' => '17',
+                    ],
+                    17 => [
+                        'value' => '18',
+                        'label' => '18',
+                    ],
+                    18 => [
+                        'value' => '19',
+                        'label' => '19',
+                    ],
+                    19 => [
+                        'value' => '20',
+                        'label' => '20',
+                    ],
+                    20 => [
+                        'value' => '21',
+                        'label' => '21',
+                    ],
+                    21 => [
+                        'value' => '22',
+                        'label' => '22',
+                    ],
+                ],
+            ],
+            6 => [
+                'name' => 'language_code',
+                'label' => 'Language Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Language Code',
+            ],
+            7 => [
+                'name' => 'latitude_min',
+                'label' => 'Latitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Latitude',
+            ],
+            8 => [
+                'name' => 'latitude_max',
+                'label' => 'Latitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Latitude',
+            ],
+            9 => [
+                'name' => 'longitude_min',
+                'label' => 'Longitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Longitude',
+            ],
+            10 => [
+                'name' => 'longitude_max',
+                'label' => 'Longitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Longitude',
+            ],
+        ],
+        'contextData' => 'Dataset of Construction Off Hours. Filter by attributes like app no, date (Start Datetime), address.',
+        'searchableColumns' => [
+            0 => 'app_no',
+            1 => 'address',
+            2 => 'ward',
+            3 => 'latitude',
+            4 => 'longitude',
+            5 => 'language_code',
+        ],
+        'gptSchemaProperties' => [
+            'search_term' => [
+                'type' => 'string',
+                'description' => 'A general search term to query across multiple text fields.',
+            ],
+            'start_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for \'start_datetime\' (YYYY-MM-DD)',
+            ],
+            'end_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for \'start_datetime\' (YYYY-MM-DD)',
+            ],
+            'limit' => [
+                'type' => 'integer',
+                'description' => 'Limit the number of records. Default is 1000, max 5000.',
+            ],
+            'app_no' => [
+                'type' => 'string',
+                'description' => 'Filter by App No.',
+            ],
+            'stop_datetime_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Stop Datetime (YYYY-MM-DD)',
+            ],
+            'stop_datetime_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Stop Datetime (YYYY-MM-DD)',
+            ],
+            'address' => [
+                'type' => 'string',
+                'description' => 'Filter by Address.',
+            ],
+            'ward' => [
+                'type' => 'string',
+                'description' => 'Filter by Ward. Possible values: 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22.',
+            ],
+            'language_code' => [
+                'type' => 'string',
+                'description' => 'Filter by Language Code.',
+            ],
+            'latitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Latitude.',
+            ],
+            'latitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Latitude.',
+            ],
+            'longitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Longitude.',
+            ],
+            'longitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Longitude.',
+            ],
+        ],
+    ],
+    'App\\Models\\CrimeData' => [
+        'filterableFieldsDescription' => [
+            0 => [
+                'name' => 'search_term',
+                'label' => 'General Search',
+                'type' => 'text',
+                'placeholder' => 'Search across all fields...',
+            ],
+            1 => [
+                'name' => 'incident_number',
+                'label' => 'Incident Number',
+                'type' => 'text',
+                'placeholder' => 'Enter Incident Number',
+            ],
+            2 => [
+                'name' => 'offense_code_min',
+                'label' => 'Offense Code Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Offense Code',
+            ],
+            3 => [
+                'name' => 'offense_code_max',
+                'label' => 'Offense Code Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Offense Code',
+            ],
+            4 => [
+                'name' => 'language_code',
+                'label' => 'Language Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Language Code',
+            ],
+            5 => [
+                'name' => 'offense_code_group',
+                'label' => 'Offense Code Group',
+                'type' => 'text',
+                'placeholder' => 'Enter Offense Code Group',
+            ],
+            6 => [
+                'name' => 'offense_description',
+                'label' => 'Offense Description',
+                'type' => 'text',
+                'placeholder' => 'Enter Offense Description',
+            ],
+            7 => [
+                'name' => 'district',
+                'label' => 'District',
+                'type' => 'select',
+                'placeholder' => 'Select District',
+                'options' => [
+                    0 => [
+                        'value' => 'A1',
+                        'label' => 'A1',
+                    ],
+                    1 => [
+                        'value' => 'A15',
+                        'label' => 'A15',
+                    ],
+                    2 => [
+                        'value' => 'A7',
+                        'label' => 'A7',
+                    ],
+                    3 => [
+                        'value' => 'B2',
+                        'label' => 'B2',
+                    ],
+                    4 => [
+                        'value' => 'B3',
+                        'label' => 'B3',
+                    ],
+                    5 => [
+                        'value' => 'C11',
+                        'label' => 'C11',
+                    ],
+                    6 => [
+                        'value' => 'C6',
+                        'label' => 'C6',
+                    ],
+                    7 => [
+                        'value' => 'D14',
+                        'label' => 'D14',
+                    ],
+                    8 => [
+                        'value' => 'D4',
+                        'label' => 'D4',
+                    ],
+                    9 => [
+                        'value' => 'E13',
+                        'label' => 'E13',
+                    ],
+                    10 => [
+                        'value' => 'E18',
+                        'label' => 'E18',
+                    ],
+                    11 => [
+                        'value' => 'E5',
+                        'label' => 'E5',
+                    ],
+                    12 => [
+                        'value' => 'External',
+                        'label' => 'External',
+                    ],
+                    13 => [
+                        'value' => 'Outside of',
+                        'label' => 'Outside of',
+                    ],
+                ],
+            ],
+            8 => [
+                'name' => 'reporting_area',
+                'label' => 'Reporting Area',
+                'type' => 'text',
+                'placeholder' => 'Enter Reporting Area',
+            ],
+            9 => [
+                'name' => 'shooting_min',
+                'label' => 'Shooting Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Shooting',
+            ],
+            10 => [
+                'name' => 'shooting_max',
+                'label' => 'Shooting Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Shooting',
+            ],
+            11 => [
+                'name' => 'year',
+                'label' => 'Year',
+                'type' => 'select',
+                'placeholder' => 'Select Year',
+                'options' => [
+                    0 => [
+                        'value' => '2023',
+                        'label' => '2023',
+                    ],
+                    1 => [
+                        'value' => '2024',
+                        'label' => '2024',
+                    ],
+                    2 => [
+                        'value' => '2025',
+                        'label' => '2025',
+                    ],
+                ],
+            ],
+            12 => [
+                'name' => 'month',
+                'label' => 'Month',
+                'type' => 'select',
+                'placeholder' => 'Select Month',
+                'options' => [
+                    0 => [
+                        'value' => '1',
+                        'label' => '1',
+                    ],
+                    1 => [
+                        'value' => '2',
+                        'label' => '2',
+                    ],
+                    2 => [
+                        'value' => '3',
+                        'label' => '3',
+                    ],
+                    3 => [
+                        'value' => '4',
+                        'label' => '4',
+                    ],
+                    4 => [
+                        'value' => '5',
+                        'label' => '5',
+                    ],
+                    5 => [
+                        'value' => '6',
+                        'label' => '6',
+                    ],
+                    6 => [
+                        'value' => '7',
+                        'label' => '7',
+                    ],
+                    7 => [
+                        'value' => '8',
+                        'label' => '8',
+                    ],
+                    8 => [
+                        'value' => '9',
+                        'label' => '9',
+                    ],
+                    9 => [
+                        'value' => '10',
+                        'label' => '10',
+                    ],
+                    10 => [
+                        'value' => '11',
+                        'label' => '11',
+                    ],
+                    11 => [
+                        'value' => '12',
+                        'label' => '12',
+                    ],
+                ],
+            ],
+            13 => [
+                'name' => 'day_of_week',
+                'label' => 'Day Of Week',
+                'type' => 'select',
+                'placeholder' => 'Select Day Of Week',
+                'options' => [
+                    0 => [
+                        'value' => 'Friday   ',
+                        'label' => 'Friday   ',
+                    ],
+                    1 => [
+                        'value' => 'Monday   ',
+                        'label' => 'Monday   ',
+                    ],
+                    2 => [
+                        'value' => 'Saturday ',
+                        'label' => 'Saturday ',
+                    ],
+                    3 => [
+                        'value' => 'Sunday   ',
+                        'label' => 'Sunday   ',
+                    ],
+                    4 => [
+                        'value' => 'Thursday ',
+                        'label' => 'Thursday ',
+                    ],
+                    5 => [
+                        'value' => 'Tuesday  ',
+                        'label' => 'Tuesday  ',
+                    ],
+                    6 => [
+                        'value' => 'Wednesday',
+                        'label' => 'Wednesday',
+                    ],
+                ],
+            ],
+            14 => [
+                'name' => 'hour',
+                'label' => 'Hour',
+                'type' => 'select',
+                'placeholder' => 'Select Hour',
+                'options' => [
+                    0 => [
+                        'value' => '0',
+                        'label' => '0',
+                    ],
+                    1 => [
+                        'value' => '1',
+                        'label' => '1',
+                    ],
+                    2 => [
+                        'value' => '2',
+                        'label' => '2',
+                    ],
+                    3 => [
+                        'value' => '3',
+                        'label' => '3',
+                    ],
+                    4 => [
+                        'value' => '4',
+                        'label' => '4',
+                    ],
+                    5 => [
+                        'value' => '5',
+                        'label' => '5',
+                    ],
+                    6 => [
+                        'value' => '6',
+                        'label' => '6',
+                    ],
+                    7 => [
+                        'value' => '7',
+                        'label' => '7',
+                    ],
+                    8 => [
+                        'value' => '8',
+                        'label' => '8',
+                    ],
+                    9 => [
+                        'value' => '9',
+                        'label' => '9',
+                    ],
+                    10 => [
+                        'value' => '10',
+                        'label' => '10',
+                    ],
+                    11 => [
+                        'value' => '11',
+                        'label' => '11',
+                    ],
+                    12 => [
+                        'value' => '12',
+                        'label' => '12',
+                    ],
+                    13 => [
+                        'value' => '13',
+                        'label' => '13',
+                    ],
+                    14 => [
+                        'value' => '14',
+                        'label' => '14',
+                    ],
+                    15 => [
+                        'value' => '15',
+                        'label' => '15',
+                    ],
+                    16 => [
+                        'value' => '16',
+                        'label' => '16',
+                    ],
+                    17 => [
+                        'value' => '17',
+                        'label' => '17',
+                    ],
+                    18 => [
+                        'value' => '18',
+                        'label' => '18',
+                    ],
+                    19 => [
+                        'value' => '19',
+                        'label' => '19',
+                    ],
+                    20 => [
+                        'value' => '20',
+                        'label' => '20',
+                    ],
+                    21 => [
+                        'value' => '21',
+                        'label' => '21',
+                    ],
+                    22 => [
+                        'value' => '22',
+                        'label' => '22',
+                    ],
+                    23 => [
+                        'value' => '23',
+                        'label' => '23',
+                    ],
+                ],
+            ],
+            15 => [
+                'name' => 'ucr_part',
+                'label' => 'Ucr Part',
+                'type' => 'text',
+                'placeholder' => 'Enter Ucr Part',
+            ],
+            16 => [
+                'name' => 'street',
+                'label' => 'Street',
+                'type' => 'text',
+                'placeholder' => 'Enter Street',
+            ],
+            17 => [
+                'name' => 'lat_min',
+                'label' => 'Lat Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Lat',
+            ],
+            18 => [
+                'name' => 'lat_max',
+                'label' => 'Lat Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Lat',
+            ],
+            19 => [
+                'name' => 'long_min',
+                'label' => 'Long Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Long',
+            ],
+            20 => [
+                'name' => 'long_max',
+                'label' => 'Long Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Long',
+            ],
+            21 => [
+                'name' => 'location',
+                'label' => 'Location',
+                'type' => 'text',
+                'placeholder' => 'Enter Location',
+            ],
+        ],
+        'contextData' => 'Dataset of Crime Datas. Filter by attributes like incident number, language code, offense code group.',
+        'searchableColumns' => [
+            0 => 'incident_number',
+            1 => 'offense_code',
+            2 => 'offense_code_group',
+            3 => 'offense_description',
+            4 => 'district',
+            5 => 'reporting_area',
+            6 => 'shooting',
+            7 => 'year',
+            8 => 'month',
+            9 => 'day_of_week',
+            10 => 'hour',
+            11 => 'ucr_part',
+            12 => 'street',
+            13 => 'location',
+            14 => 'language_code',
+        ],
+        'gptSchemaProperties' => [
+            'search_term' => [
+                'type' => 'string',
+                'description' => 'A general search term to query across multiple text fields.',
+            ],
+            'start_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for \'occurred_on_date\' (YYYY-MM-DD)',
+            ],
+            'end_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for \'occurred_on_date\' (YYYY-MM-DD)',
+            ],
+            'limit' => [
+                'type' => 'integer',
+                'description' => 'Limit the number of records. Default is 1000, max 5000.',
+            ],
+            'incident_number' => [
+                'type' => 'string',
+                'description' => 'Filter by Incident Number.',
+            ],
+            'offense_code_min' => [
+                'type' => 'integer',
+                'description' => 'Minimum value for Offense Code.',
+            ],
+            'offense_code_max' => [
+                'type' => 'integer',
+                'description' => 'Maximum value for Offense Code.',
+            ],
+            'language_code' => [
+                'type' => 'string',
+                'description' => 'Filter by Language Code.',
+            ],
+            'offense_code_group' => [
+                'type' => 'string',
+                'description' => 'Filter by Offense Code Group.',
+            ],
+            'offense_description' => [
+                'type' => 'string',
+                'description' => 'Filter by Offense Description.',
+            ],
+            'district' => [
+                'type' => 'string',
+                'description' => 'Filter by District. Possible values: A1, A15, A7, B2, B3, C11, C6, D14, D4, E13, E18, E5, External, Outside of.',
+            ],
+            'reporting_area' => [
+                'type' => 'string',
+                'description' => 'Filter by Reporting Area.',
+            ],
+            'shooting_min' => [
+                'type' => 'integer',
+                'description' => 'Minimum value for Shooting.',
+            ],
+            'shooting_max' => [
+                'type' => 'integer',
+                'description' => 'Maximum value for Shooting.',
+            ],
+            'year' => [
+                'type' => 'string',
+                'description' => 'Filter by Year. Possible values: 2023, 2024, 2025.',
+            ],
+            'month' => [
+                'type' => 'string',
+                'description' => 'Filter by Month. Possible values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.',
+            ],
+            'day_of_week' => [
+                'type' => 'string',
+                'description' => 'Filter by Day Of Week. Possible values: Friday   , Monday   , Saturday , Sunday   , Thursday , Tuesday  , Wednesday.',
+            ],
+            'hour' => [
+                'type' => 'string',
+                'description' => 'Filter by Hour. Possible values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23.',
+            ],
+            'ucr_part' => [
+                'type' => 'string',
+                'description' => 'Filter by Ucr Part.',
+            ],
+            'street' => [
+                'type' => 'string',
+                'description' => 'Filter by Street.',
+            ],
+            'lat_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Lat.',
+            ],
+            'lat_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Lat.',
+            ],
+            'long_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Long.',
+            ],
+            'long_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Long.',
+            ],
+            'location' => [
+                'type' => 'string',
+                'description' => 'Filter by Location.',
+            ],
+        ],
+    ],
+    'App\\Models\\ThreeOneOneCase' => [
+        'filterableFieldsDescription' => [
+            0 => [
+                'name' => 'search_term',
+                'label' => 'General Search',
+                'type' => 'text',
+                'placeholder' => 'Search across all fields...',
+            ],
+            1 => [
+                'name' => 'case_enquiry_id_min',
+                'label' => 'Case Enquiry Id Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Case Enquiry Id',
+            ],
+            2 => [
+                'name' => 'case_enquiry_id_max',
+                'label' => 'Case Enquiry Id Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Case Enquiry Id',
+            ],
+            3 => [
+                'name' => 'sla_target_dt',
+                'label' => 'Sla Target Dt',
+                'type' => 'text',
+                'placeholder' => 'Enter Sla Target Dt',
+            ],
+            4 => [
+                'name' => 'closed_dt_start',
+                'label' => 'Closed Dt Start',
+                'type' => 'date',
+                'placeholder' => 'Start date for Closed Dt',
+            ],
+            5 => [
+                'name' => 'closed_dt_end',
+                'label' => 'Closed Dt End',
+                'type' => 'date',
+                'placeholder' => 'End date for Closed Dt',
+            ],
+            6 => [
+                'name' => 'on_time',
+                'label' => 'On Time',
+                'type' => 'text',
+                'placeholder' => 'Enter On Time',
+            ],
+            7 => [
+                'name' => 'case_status',
+                'label' => 'Case Status',
+                'type' => 'text',
+                'placeholder' => 'Enter Case Status',
+            ],
+            8 => [
+                'name' => 'closure_reason',
+                'label' => 'Closure Reason',
+                'type' => 'text',
+                'placeholder' => 'Enter Closure Reason',
+            ],
+            9 => [
+                'name' => 'case_title',
+                'label' => 'Case Title',
+                'type' => 'text',
+                'placeholder' => 'Enter Case Title',
+            ],
+            10 => [
+                'name' => 'subject',
+                'label' => 'Subject',
+                'type' => 'text',
+                'placeholder' => 'Enter Subject',
+            ],
+            11 => [
+                'name' => 'reason',
+                'label' => 'Reason',
+                'type' => 'text',
+                'placeholder' => 'Enter Reason',
+            ],
+            12 => [
+                'name' => 'type',
+                'label' => 'Type',
+                'type' => 'text',
+                'placeholder' => 'Enter Type',
+            ],
+            13 => [
+                'name' => 'queue',
+                'label' => 'Queue',
+                'type' => 'text',
+                'placeholder' => 'Enter Queue',
+            ],
+            14 => [
+                'name' => 'department',
+                'label' => 'Department',
+                'type' => 'text',
+                'placeholder' => 'Enter Department',
+            ],
+            15 => [
+                'name' => 'submitted_photo',
+                'label' => 'Submitted Photo',
+                'type' => 'text',
+                'placeholder' => 'Enter Submitted Photo',
+            ],
+            16 => [
+                'name' => 'closed_photo',
+                'label' => 'Closed Photo',
+                'type' => 'text',
+                'placeholder' => 'Enter Closed Photo',
+            ],
+            17 => [
+                'name' => 'location',
+                'label' => 'Location',
+                'type' => 'text',
+                'placeholder' => 'Enter Location',
+            ],
+            18 => [
+                'name' => 'fire_district',
+                'label' => 'Fire District',
+                'type' => 'text',
+                'placeholder' => 'Enter Fire District',
+            ],
+            19 => [
+                'name' => 'pwd_district',
+                'label' => 'Pwd District',
+                'type' => 'text',
+                'placeholder' => 'Enter Pwd District',
+            ],
+            20 => [
+                'name' => 'city_council_district',
+                'label' => 'City Council District',
+                'type' => 'text',
+                'placeholder' => 'Enter City Council District',
+            ],
+            21 => [
+                'name' => 'police_district',
+                'label' => 'Police District',
+                'type' => 'text',
+                'placeholder' => 'Enter Police District',
+            ],
+            22 => [
+                'name' => 'neighborhood',
+                'label' => 'Neighborhood',
+                'type' => 'text',
+                'placeholder' => 'Enter Neighborhood',
+            ],
+            23 => [
+                'name' => 'neighborhood_services_district',
+                'label' => 'Neighborhood Services District',
+                'type' => 'text',
+                'placeholder' => 'Enter Neighborhood Services District',
+            ],
+            24 => [
+                'name' => 'ward',
+                'label' => 'Ward',
+                'type' => 'text',
+                'placeholder' => 'Enter Ward',
+            ],
+            25 => [
+                'name' => 'precinct',
+                'label' => 'Precinct',
+                'type' => 'text',
+                'placeholder' => 'Enter Precinct',
+            ],
+            26 => [
+                'name' => 'location_street_name',
+                'label' => 'Location Street Name',
+                'type' => 'text',
+                'placeholder' => 'Enter Location Street Name',
+            ],
+            27 => [
+                'name' => 'location_zipcode',
+                'label' => 'Location Zipcode',
+                'type' => 'select',
+                'placeholder' => 'Select Location Zipcode',
+                'options' => [
+                    0 => [
+                        'value' => '2108',
+                        'label' => '2108',
+                    ],
+                    1 => [
+                        'value' => '2109',
+                        'label' => '2109',
+                    ],
+                    2 => [
+                        'value' => '2110',
+                        'label' => '2110',
+                    ],
+                    3 => [
+                        'value' => '2111',
+                        'label' => '2111',
+                    ],
+                    4 => [
+                        'value' => '2113',
+                        'label' => '2113',
+                    ],
+                    5 => [
+                        'value' => '2114',
+                        'label' => '2114',
+                    ],
+                    6 => [
+                        'value' => '2115',
+                        'label' => '2115',
+                    ],
+                    7 => [
+                        'value' => '2116',
+                        'label' => '2116',
+                    ],
+                    8 => [
+                        'value' => '2118',
+                        'label' => '2118',
+                    ],
+                    9 => [
+                        'value' => '2119',
+                        'label' => '2119',
+                    ],
+                    10 => [
+                        'value' => '2120',
+                        'label' => '2120',
+                    ],
+                    11 => [
+                        'value' => '2121',
+                        'label' => '2121',
+                    ],
+                    12 => [
+                        'value' => '2122',
+                        'label' => '2122',
+                    ],
+                    13 => [
+                        'value' => '2124',
+                        'label' => '2124',
+                    ],
+                    14 => [
+                        'value' => '2125',
+                        'label' => '2125',
+                    ],
+                    15 => [
+                        'value' => '2126',
+                        'label' => '2126',
+                    ],
+                    16 => [
+                        'value' => '2127',
+                        'label' => '2127',
+                    ],
+                    17 => [
+                        'value' => '2128',
+                        'label' => '2128',
+                    ],
+                    18 => [
+                        'value' => '2129',
+                        'label' => '2129',
+                    ],
+                    19 => [
+                        'value' => '2130',
+                        'label' => '2130',
+                    ],
+                    20 => [
+                        'value' => '2131',
+                        'label' => '2131',
+                    ],
+                    21 => [
+                        'value' => '2132',
+                        'label' => '2132',
+                    ],
+                    22 => [
+                        'value' => '2133',
+                        'label' => '2133',
+                    ],
+                    23 => [
+                        'value' => '2134',
+                        'label' => '2134',
+                    ],
+                    24 => [
+                        'value' => '2135',
+                        'label' => '2135',
+                    ],
+                    25 => [
+                        'value' => '2136',
+                        'label' => '2136',
+                    ],
+                    26 => [
+                        'value' => '2163',
+                        'label' => '2163',
+                    ],
+                    27 => [
+                        'value' => '2199',
+                        'label' => '2199',
+                    ],
+                    28 => [
+                        'value' => '2201',
+                        'label' => '2201',
+                    ],
+                    29 => [
+                        'value' => '2203',
+                        'label' => '2203',
+                    ],
+                    30 => [
+                        'value' => '2210',
+                        'label' => '2210',
+                    ],
+                    31 => [
+                        'value' => '2215',
+                        'label' => '2215',
+                    ],
+                    32 => [
+                        'value' => '2446',
+                        'label' => '2446',
+                    ],
+                    33 => [
+                        'value' => '2467',
+                        'label' => '2467',
+                    ],
+                ],
+            ],
+            28 => [
+                'name' => 'latitude_min',
+                'label' => 'Latitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Latitude',
+            ],
+            29 => [
+                'name' => 'latitude_max',
+                'label' => 'Latitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Latitude',
+            ],
+            30 => [
+                'name' => 'longitude_min',
+                'label' => 'Longitude Min',
+                'type' => 'number',
+                'placeholder' => 'Min value for Longitude',
+            ],
+            31 => [
+                'name' => 'longitude_max',
+                'label' => 'Longitude Max',
+                'type' => 'number',
+                'placeholder' => 'Max value for Longitude',
+            ],
+            32 => [
+                'name' => 'source',
+                'label' => 'Source',
+                'type' => 'text',
+                'placeholder' => 'Enter Source',
+            ],
+            33 => [
+                'name' => 'checksum',
+                'label' => 'Checksum',
+                'type' => 'text',
+                'placeholder' => 'Enter Checksum',
+            ],
+            34 => [
+                'name' => 'language_code',
+                'label' => 'Language Code',
+                'type' => 'text',
+                'placeholder' => 'Enter Language Code',
+            ],
+            35 => [
+                'name' => 'ward_number',
+                'label' => 'Ward Number',
+                'type' => 'text',
+                'placeholder' => 'Enter Ward Number',
+            ],
+        ],
+        'contextData' => 'Dataset of Three One One Cases. Filter by attributes like date (Open Dt), sla target dt, on time.',
+        'searchableColumns' => [
+            0 => 'id',
+            1 => 'case_enquiry_id',
+            2 => 'open_dt',
+            3 => 'sla_target_dt',
+            4 => 'closed_dt',
+            5 => 'on_time',
+            6 => 'case_status',
+            7 => 'closure_reason',
+            8 => 'case_title',
+            9 => 'subject',
+            10 => 'reason',
+            11 => 'type',
+            12 => 'queue',
+            13 => 'department',
+            14 => 'submitted_photo',
+            15 => 'closed_photo',
+            16 => 'location',
+            17 => 'fire_district',
+            18 => 'pwd_district',
+            19 => 'city_council_district',
+            20 => 'police_district',
+            21 => 'neighborhood',
+            22 => 'neighborhood_services_district',
+            23 => 'ward',
+            24 => 'precinct',
+            25 => 'location_street_name',
+            26 => 'location_zipcode',
+            27 => 'latitude',
+            28 => 'longitude',
+            29 => 'source',
+            30 => 'ward_number',
+            31 => 'language_code',
+        ],
+        'gptSchemaProperties' => [
+            'search_term' => [
+                'type' => 'string',
+                'description' => 'A general search term to query across multiple text fields.',
+            ],
+            'start_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for \'open_dt\' (YYYY-MM-DD)',
+            ],
+            'end_date' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for \'open_dt\' (YYYY-MM-DD)',
+            ],
+            'limit' => [
+                'type' => 'integer',
+                'description' => 'Limit the number of records. Default is 1000, max 5000.',
+            ],
+            'case_enquiry_id_min' => [
+                'type' => 'integer',
+                'description' => 'Minimum value for Case Enquiry Id.',
+            ],
+            'case_enquiry_id_max' => [
+                'type' => 'integer',
+                'description' => 'Maximum value for Case Enquiry Id.',
+            ],
+            'sla_target_dt' => [
+                'type' => 'string',
+                'description' => 'Filter by Sla Target Dt.',
+            ],
+            'closed_dt_start' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'Start date for Closed Dt (YYYY-MM-DD)',
+            ],
+            'closed_dt_end' => [
+                'type' => 'string',
+                'format' => 'date',
+                'description' => 'End date for Closed Dt (YYYY-MM-DD)',
+            ],
+            'on_time' => [
+                'type' => 'string',
+                'description' => 'Filter by On Time.',
+            ],
+            'case_status' => [
+                'type' => 'string',
+                'description' => 'Filter by Case Status.',
+            ],
+            'closure_reason' => [
+                'type' => 'string',
+                'description' => 'Filter by Closure Reason.',
+            ],
+            'case_title' => [
+                'type' => 'string',
+                'description' => 'Filter by Case Title.',
+            ],
+            'subject' => [
+                'type' => 'string',
+                'description' => 'Filter by Subject.',
+            ],
+            'reason' => [
+                'type' => 'string',
+                'description' => 'Filter by Reason.',
+            ],
+            'type' => [
+                'type' => 'string',
+                'description' => 'Filter by Type.',
+            ],
+            'queue' => [
+                'type' => 'string',
+                'description' => 'Filter by Queue.',
+            ],
+            'department' => [
+                'type' => 'string',
+                'description' => 'Filter by Department.',
+            ],
+            'submitted_photo' => [
+                'type' => 'string',
+                'description' => 'Filter by Submitted Photo.',
+            ],
+            'closed_photo' => [
+                'type' => 'string',
+                'description' => 'Filter by Closed Photo.',
+            ],
+            'location' => [
+                'type' => 'string',
+                'description' => 'Filter by Location.',
+            ],
+            'fire_district' => [
+                'type' => 'string',
+                'description' => 'Filter by Fire District.',
+            ],
+            'pwd_district' => [
+                'type' => 'string',
+                'description' => 'Filter by Pwd District.',
+            ],
+            'city_council_district' => [
+                'type' => 'string',
+                'description' => 'Filter by City Council District.',
+            ],
+            'police_district' => [
+                'type' => 'string',
+                'description' => 'Filter by Police District.',
+            ],
+            'neighborhood' => [
+                'type' => 'string',
+                'description' => 'Filter by Neighborhood.',
+            ],
+            'neighborhood_services_district' => [
+                'type' => 'string',
+                'description' => 'Filter by Neighborhood Services District.',
+            ],
+            'ward' => [
+                'type' => 'string',
+                'description' => 'Filter by Ward.',
+            ],
+            'precinct' => [
+                'type' => 'string',
+                'description' => 'Filter by Precinct.',
+            ],
+            'location_street_name' => [
+                'type' => 'string',
+                'description' => 'Filter by Location Street Name.',
+            ],
+            'location_zipcode' => [
+                'type' => 'string',
+                'description' => 'Filter by Location Zipcode. Possible values: 2108, 2109, 2110, 2111, 2113, 2114, 2115, 2116, 2118, 2119, 2120, 2121, 2122, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2163, 2199, 2201, 2203, 2210, 2215, 2446, 2467.',
+            ],
+            'latitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Latitude.',
+            ],
+            'latitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Latitude.',
+            ],
+            'longitude_min' => [
+                'type' => 'number',
+                'description' => 'Minimum value for Longitude.',
+            ],
+            'longitude_max' => [
+                'type' => 'number',
+                'description' => 'Maximum value for Longitude.',
+            ],
+            'source' => [
+                'type' => 'string',
+                'description' => 'Filter by Source.',
+            ],
+            'checksum' => [
+                'type' => 'string',
+                'description' => 'Filter by Checksum.',
+            ],
+            'language_code' => [
+                'type' => 'string',
+                'description' => 'Filter by Language Code.',
+            ],
+            'ward_number' => [
+                'type' => 'string',
+                'description' => 'Filter by Ward Number.',
+            ],
+        ],
+    ],
+];
diff --git a/config/services.php b/config/services.php
index 642ad6f..51c99de 100644
--- a/config/services.php
+++ b/config/services.php
@@ -53,4 +53,12 @@
         'client_secret' => env('GOOGLE_CLIENT_SECRET'),
         'redirect' => env('GOOGLE_REDIRECT_URI'),
     ],
+
+    'scraper_service' => [
+        'base_url' => env('SCRAPER_API_BASE_URL', 'http://localhost:8000'),
+        'user_id' => env('SCRAPER_X_USER_ID', '1'),
+        'user_name' => env('SCRAPER_X_USER_NAME', 'Guest'),
+        'user_role' => env('SCRAPER_X_USER_ROLE', 'guest'),
+        'wait_seconds' => env('SCRAPER_WAIT_SECONDS', '5'),
+    ],
 ];
diff --git a/crimelog.txt b/crimelog.txt
new file mode 100644
index 0000000..e69de29
diff --git a/database/migrations/2025_05_15_144854_add_unique_constraint_to_data_points_table.php b/database/migrations/2025_05_15_144854_add_unique_constraint_to_data_points_table.php
new file mode 100644
index 0000000..96f8b92
--- /dev/null
+++ b/database/migrations/2025_05_15_144854_add_unique_constraint_to_data_points_table.php
@@ -0,0 +1,30 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class AddUniqueConstraintToDataPointsTable extends Migration
+{
+    public function up()
+    {
+        Schema::table('data_points', function (Blueprint $table) {
+            // Add the new generic_foreign_id column
+            $table->unsignedBigInteger('generic_foreign_id')->nullable()->after('type');
+
+            // Add a unique constraint on type and generic_foreign_id
+            $table->unique(['type', 'generic_foreign_id'], 'unique_type_generic_foreign_id');
+        });
+    }
+
+    public function down()
+    {
+        Schema::table('data_points', function (Blueprint $table) {
+            // Drop the unique constraint added in the new 'up' method
+            $table->dropUnique('unique_type_generic_foreign_id');
+            // Drop the column added in the new 'up' method
+            $table->dropColumn('generic_foreign_id');
+
+        });
+    }
+}
\ No newline at end of file
diff --git a/database/migrations/2025_05_16_000000_create_food_inspections_table.php b/database/migrations/2025_05_16_000000_create_food_inspections_table.php
new file mode 100644
index 0000000..405f1e6
--- /dev/null
+++ b/database/migrations/2025_05_16_000000_create_food_inspections_table.php
@@ -0,0 +1,72 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class CreateFoodInspectionsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('food_inspections', function (Blueprint $table) {
+            $table->id();
+            $table->bigInteger('external_id')->unique()->comment('From CSV _id');
+            $table->string('businessname')->nullable();
+            $table->string('dbaname')->nullable();
+            $table->string('legalowner')->nullable();
+            $table->string('namelast')->nullable();
+            $table->string('namefirst')->nullable();
+            $table->string('licenseno')->nullable();
+            $table->timestamp('issdttm')->nullable();
+            $table->timestamp('expdttm')->nullable();
+            $table->string('licstatus')->nullable();
+            $table->string('licensecat')->nullable();
+            $table->text('descript')->nullable();
+            $table->string('result')->nullable();
+            $table->timestamp('resultdttm')->nullable();
+            $table->string('violation')->nullable();
+            $table->string('viol_level')->nullable();
+            $table->text('violdesc')->nullable();
+            $table->timestamp('violdttm')->nullable();
+            $table->string('viol_status')->nullable();
+            $table->timestamp('status_date')->nullable();
+            $table->text('comments')->nullable();
+            $table->string('address')->nullable();
+            $table->string('city')->nullable();
+            $table->string('state')->nullable();
+            $table->string('zip')->nullable();
+            $table->string('property_id')->nullable();
+            $table->decimal('latitude', 10, 8)->nullable();
+            $table->decimal('longitude', 11, 8)->nullable();
+            $table->string('language_code')->nullable();
+            $table->timestamps();
+        });
+
+        Schema::table('data_points', function (Blueprint $table) {
+            $table->unsignedBigInteger('food_inspection_id')->nullable()->after('building_permit_id');
+            $table->foreign('food_inspection_id')
+                  ->references('id')
+                  ->on('food_inspections')
+                  ->onDelete('cascade'); // Or set null if appropriate
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::table('data_points', function (Blueprint $table) {
+            $table->dropForeign(['food_inspection_id']);
+            $table->dropColumn('food_inspection_id');
+        });
+        Schema::dropIfExists('food_inspections');
+    }
+}
diff --git a/database/migrations/2025_05_20_000000_add_alcivartech_date_to_data_points_table.php b/database/migrations/2025_05_20_000000_add_alcivartech_date_to_data_points_table.php
new file mode 100644
index 0000000..e8d5720
--- /dev/null
+++ b/database/migrations/2025_05_20_000000_add_alcivartech_date_to_data_points_table.php
@@ -0,0 +1,40 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class AddAlcivartechDateToDataPointsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::table('data_points', function (Blueprint $table) {
+            $table->timestamp('alcivartech_date')->nullable()->after('location');
+            
+            // Add indexes for faster querying
+            $table->index('alcivartech_date');
+            $table->index('type'); // Index on type if frequently queried
+            $table->index(['type', 'alcivartech_date']); // Composite index
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::table('data_points', function (Blueprint $table) {
+            $table->dropIndex(['type', 'alcivartech_date']);
+            $table->dropIndex(['type']);
+            $table->dropIndex(['alcivartech_date']);
+            $table->dropColumn('alcivartech_date');
+        });
+    }
+}
diff --git a/database/migrations/2025_05_20_100000_create_all_time_data_points_table.php b/database/migrations/2025_05_20_100000_create_all_time_data_points_table.php
new file mode 100644
index 0000000..1242a40
--- /dev/null
+++ b/database/migrations/2025_05_20_100000_create_all_time_data_points_table.php
@@ -0,0 +1,61 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class CreateAllTimeDataPointsTable extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up()
+    {
+        Schema::create('all_time_data_points', function (Blueprint $table) {
+            $table->id();
+            $table->string('type'); // To differentiate between datasets
+            $table->unsignedBigInteger('generic_foreign_id')->nullable();
+            $table->point('location'); // Spatial point for lat/lng
+            $table->timestamp('alcivartech_date')->nullable();
+            $table->timestamps();
+
+            // Foreign keys to different datasets - these ensure data integrity if the source records are deleted.
+            // However, for an "all_time" table, you might reconsider if cascading deletes from source tables are desired.
+            // If source data can be deleted, these FKs might cause issues or lead to data loss in all_time_data_points.
+            // For now, keeping them consistent with data_points.
+            $table->unsignedBigInteger('crime_data_id')->nullable();
+            $table->unsignedBigInteger('three_one_one_case_id')->nullable();
+            $table->unsignedBigInteger('property_violation_id')->nullable();
+            $table->unsignedBigInteger('construction_off_hour_id')->nullable();
+            $table->unsignedBigInteger('building_permit_id')->nullable();
+            $table->unsignedBigInteger('food_inspection_id')->nullable(); // Assuming this was added via food_inspections migration
+
+            // Foreign key constraints (consider implications of onDelete for an all-time table)
+            $table->foreign('crime_data_id')->references('id')->on('crime_data')->onDelete('cascade');
+            $table->foreign('three_one_one_case_id')->references('id')->on('three_one_one_cases')->onDelete('cascade');
+            $table->foreign('property_violation_id')->references('id')->on('property_violations')->onDelete('cascade');
+            $table->foreign('construction_off_hour_id')->references('id')->on('construction_off_hours')->onDelete('cascade');
+            $table->foreign('building_permit_id')->references('id')->on('building_permits')->onDelete('cascade');
+            $table->foreign('food_inspection_id')->references('id')->on('food_inspections')->onDelete('cascade');
+
+            // Indexes
+            $table->spatialIndex('location');
+            $table->unique(['type', 'generic_foreign_id'], 'all_time_unique_type_generic_foreign_id');
+            $table->index('alcivartech_date');
+            $table->index('type');
+            $table->index(['type', 'alcivartech_date'], 'all_time_type_alcivartech_date_index');
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down()
+    {
+        Schema::dropIfExists('all_time_data_points');
+    }
+}
diff --git a/database/migrations/2025_05_21_110000_create_reports_table.php b/database/migrations/2025_05_21_110000_create_reports_table.php
new file mode 100644
index 0000000..2b47abd
--- /dev/null
+++ b/database/migrations/2025_05_21_110000_create_reports_table.php
@@ -0,0 +1,32 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::create('reports', function (Blueprint $table) {
+            $table->id();
+            $table->foreignId('user_id')->constrained()->onDelete('cascade');
+            $table->foreignId('location_id')->nullable()->constrained()->onDelete('set null'); // Modified
+            $table->string('title');
+            $table->longText('content');
+            $table->timestamp('generated_at')->useCurrent();
+            $table->timestamps();
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::dropIfExists('reports');
+    }
+};
diff --git a/database/migrations/2025_05_22_000000_add_description_and_source_city_to_three_one_one_cases_table.php b/database/migrations/2025_05_22_000000_add_description_and_source_city_to_three_one_one_cases_table.php
new file mode 100644
index 0000000..19a8560
--- /dev/null
+++ b/database/migrations/2025_05_22_000000_add_description_and_source_city_to_three_one_one_cases_table.php
@@ -0,0 +1,34 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     *
+     * @return void
+     */
+    public function up(): void
+    {
+        Schema::table('three_one_one_cases', function (Blueprint $table) {
+            $table->text('threeoneonedescription')->nullable()->after('ward_number'); // Or after another relevant column
+            $table->string('source_city', 100)->nullable()->after('threeoneonedescription');
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     *
+     * @return void
+     */
+    public function down(): void
+    {
+        Schema::table('three_one_one_cases', function (Blueprint $table) {
+            $table->dropColumn('threeoneonedescription');
+            $table->dropColumn('source_city');
+        });
+    }
+};
diff --git a/database/migrations/2025_05_23_140000_create_cambridge_addresses_and_intersections_tables.php b/database/migrations/2025_05_23_140000_create_cambridge_addresses_and_intersections_tables.php
new file mode 100644
index 0000000..bf615b5
--- /dev/null
+++ b/database/migrations/2025_05_23_140000_create_cambridge_addresses_and_intersections_tables.php
@@ -0,0 +1,85 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+class CreateCambridgeAddressesAndIntersectionsTables extends Migration
+{
+    public function up()
+    {
+        Schema::create('cambridge_addresses', function (Blueprint $table) {
+            $table->bigInteger('address_id')->primary();
+            $table->string('full_addr')->nullable();
+            $table->string('street_number')->nullable();
+            $table->string('stname')->nullable();
+            $table->string('building_id')->nullable();
+            $table->string('maplot')->nullable();
+            $table->decimal('latitude', 15, 8)->nullable();
+            $table->decimal('longitude', 15, 8)->nullable();
+            $table->string('type')->nullable();
+            $table->string('zip_code')->nullable();
+            $table->string('neighborhood')->nullable();
+            $table->string('election_ward')->nullable();
+            $table->string('election_precinct')->nullable();
+            $table->string('election_polling_address')->nullable();
+            $table->string('representation_district')->nullable();
+            $table->string('senate_district')->nullable();
+            $table->string('cad_reporting_district')->nullable();
+            $table->string('police_sector')->nullable();
+            $table->string('police_car_route')->nullable();
+            $table->string('police_walking_route')->nullable();
+            $table->string('police_neighborhood')->nullable();
+            $table->string('police_business_district')->nullable();
+            $table->string('commercial_district')->nullable();
+            $table->string('census_tract_2010')->nullable();
+            $table->string('census_block_group_2010')->nullable();
+            $table->string('census_block_2010')->nullable();
+            $table->string('census_block_id_2010')->nullable();
+            $table->string('street_sweeping_district')->nullable();
+            $table->string('census_tract_2020')->nullable();
+            $table->string('census_block_group_2020')->nullable();
+            $table->string('census_block_2020')->nullable();
+            $table->string('census_block_id_2020')->nullable();
+            $table->timestamps();
+        });
+
+        Schema::create('cambridge_intersections', function (Blueprint $table) {
+            $table->bigIncrements('nodenumber');
+            $table->string('intersection')->nullable();
+            $table->integer('intersectingstreetcount')->nullable();
+            $table->string('zip_code')->nullable();
+            $table->decimal('longitude', 15, 8)->nullable();
+            $table->decimal('latitude', 15, 8)->nullable();
+            $table->string('neighborhood')->nullable();
+            $table->string('election_ward')->nullable();
+            $table->string('election_precinct')->nullable();
+            $table->string('election_polling_address')->nullable();
+            $table->string('representation_district')->nullable();
+            $table->string('senate_district')->nullable();
+            $table->string('cad_reporting_district')->nullable();
+            $table->string('police_sector')->nullable();
+            $table->string('police_car_route')->nullable();
+            $table->string('police_walking_route')->nullable();
+            $table->string('police_neighborhood')->nullable();
+            $table->string('police_business_district')->nullable();
+            $table->string('street_sweeping_district')->nullable();
+            $table->string('census_tract_2010')->nullable();
+            $table->string('census_block_group_2010')->nullable();
+            $table->string('census_block_2010')->nullable();
+            $table->string('census_block_id_2010')->nullable();
+            $table->string('commercial_district')->nullable();
+            $table->string('census_tract_2020')->nullable();
+            $table->string('census_block_group_2020')->nullable();
+            $table->string('census_block_2020')->nullable();
+            $table->string('census_block_id_2020')->nullable();
+            $table->timestamps();
+        });
+    }
+
+    public function down()
+    {
+        Schema::dropIfExists('cambridge_intersections');
+        Schema::dropIfExists('cambridge_addresses');
+    }
+}
diff --git a/database/migrations/2025_05_24_000000_add_crime_time_range_to_crime_data_table.php b/database/migrations/2025_05_24_000000_add_crime_time_range_to_crime_data_table.php
new file mode 100644
index 0000000..e2aeea8
--- /dev/null
+++ b/database/migrations/2025_05_24_000000_add_crime_time_range_to_crime_data_table.php
@@ -0,0 +1,31 @@
+<?php
+
+use Illuminate\Database\Migrations\Migration;
+use Illuminate\Database\Schema\Blueprint;
+use Illuminate\Support\Facades\Schema;
+
+return new class extends Migration
+{
+    /**
+     * Run the migrations.
+     */
+    public function up(): void
+    {
+        Schema::table('crime_data', function (Blueprint $table) {
+            //add text description of the crime
+            $table->text('crime_details')->nullable()->after('location');
+            $table->dateTime('crime_start_time')->nullable()->after('location');
+            $table->dateTime('crime_end_time')->nullable()->after('crime_start_time');
+        });
+    }
+
+    /**
+     * Reverse the migrations.
+     */
+    public function down(): void
+    {
+        Schema::table('crime_data', function (Blueprint $table) {
+            $table->dropColumn(['crime_start_time', 'crime_end_time', 'crime_details']);
+        });
+    }
+};
diff --git a/database/migrations/output.txt b/database/migrations/output.txt
deleted file mode 100644
index b0e267b..0000000
--- a/database/migrations/output.txt
+++ /dev/null
@@ -1,580 +0,0 @@
-Contents of ./2019_08_19_000000_create_failed_jobs_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     */
-    public function up(): void
-    {
-        Schema::create('failed_jobs', function (Blueprint $table) {
-            $table->id();
-            $table->string('uuid')->unique();
-            $table->text('connection');
-            $table->text('queue');
-            $table->longText('payload');
-            $table->longText('exception');
-            $table->timestamp('failed_at')->useCurrent();
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     */
-    public function down(): void
-    {
-        Schema::dropIfExists('failed_jobs');
-    }
-};
-
-Contents of ./2024_12_21_184821_create_property_violations_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-class CreatePropertyViolationsTable extends Migration
-{
-    public function up()
-    {
-        Schema::create('property_violations', function (Blueprint $table) {
-            $table->id();
-            $table->string('case_no')->nullable();
-             $table->string('ap_case_defn_key')->nullable();
-            $table->dateTime('status_dttm')->nullable();
-            $table->string('status')->nullable();
-            $table->string('code')->nullable();
-            $table->string('value')->nullable();
-            $table->text('description')->nullable();
-            $table->string('violation_stno')->nullable();
-            $table->string('violation_sthigh')->nullable();
-            $table->string('violation_street')->nullable();
-            $table->string('violation_suffix')->nullable();
-            $table->string('violation_city')->nullable();
-            $table->string('violation_state')->nullable();
-            $table->string('violation_zip')->nullable();
-            $table->string('ward')->nullable();
-            $table->string('contact_addr1')->nullable();
-            $table->string('contact_addr2')->nullable();
-            $table->string('contact_city')->nullable();
-            $table->string('contact_state')->nullable();
-            $table->string('contact_zip')->nullable();
-            $table->string('sam_id')->nullable();
-            $table->decimal('latitude', 10, 7)->nullable();
-            $table->decimal('longitude', 10, 7)->nullable();
-            $table->string('location')->nullable();
-            $table->timestamps();
-        });
-    }
-
-    public function down()
-    {
-        Schema::dropIfExists('property_violations');
-    }
-}
-Contents of ./2024_12_21_212309_add_latitude_longitude_to_construction_off_hours_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-class AddLatitudeLongitudeToConstructionOffHoursTable extends Migration
-{
-    /**
-     * Run the migrations.
-     *
-     * @return void
-     */
-    public function up()
-    {
-        Schema::table('construction_off_hours', function (Blueprint $table) {
-            $table->decimal('latitude', 15, 13)->nullable()->after('ward');
-            $table->decimal('longitude', 15, 13)->nullable()->after('latitude');
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     *
-     * @return void
-     */
-    public function down()
-    {
-        Schema::table('construction_off_hours', function (Blueprint $table) {
-            $table->dropColumn(['latitude', 'longitude']);
-        });
-    }
-}
-
-Contents of ./2014_10_12_000000_create_users_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     */
-    public function up(): void
-    {
-        Schema::create('users', function (Blueprint $table) {
-            $table->id();
-            $table->string('name');
-            $table->string('email')->unique();
-            $table->timestamp('email_verified_at')->nullable();
-            $table->string('password');
-            $table->rememberToken();
-            $table->timestamps();
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     */
-    public function down(): void
-    {
-        Schema::dropIfExists('users');
-    }
-};
-
-Contents of ./2024_07_16_171608_create_crime_data_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-class CreateCrimeDataTable extends Migration
-{
-    public function up()
-    {
-        Schema::create('crime_data', function (Blueprint $table) {
-            $table->id();
-            $table->string('incident_number');
-            $table->integer('offense_code')->nullable();
-            $table->string('offense_code_group')->nullable();
-            $table->string('offense_description')->nullable();
-            $table->string('district')->nullable();
-            $table->string('reporting_area')->nullable();
-            $table->boolean('shooting')->nullable();
-            $table->dateTime('occurred_on_date');
-            $table->integer('year');
-            $table->integer('month');
-            $table->string('day_of_week');
-            $table->integer('hour');
-            $table->string('ucr_part')->nullable();
-            $table->string('street')->nullable();
-            $table->decimal('lat', 10, 7)->nullable();
-            $table->decimal('long', 10, 7)->nullable();
-            $table->string('location')->nullable();
-            $table->timestamps();
-        });
-    }
-
-    public function down()
-    {
-        Schema::dropIfExists('crime_data');
-    }
-}
-
-
-Contents of ./2024_12_03_220201_create_locations_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     */
-    public function up(): void
-    {
-        Schema::create('locations', function (Blueprint $table) {
-            $table->id();
-            $table->string('name');
-            $table->decimal('latitude', 10, 8); // Precision for latitude
-            $table->decimal('longitude', 11, 8); // Precision for longitude
-            $table->string('address')->nullable();
-            $table->unsignedBigInteger('user_id');
-            $table->timestamps();
-
-            // Define the foreign key constraint
-            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     */
-    public function down(): void
-    {
-        Schema::dropIfExists('locations');
-    }
-};
-
-Contents of ./2023_05_31_023543_create_three_one_one_cases.php:
-<?php
-
-use Illuminate\Support\Facades\Schema;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Database\Migrations\Migration;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     *
-     * @return void
-     */
-    public function up(): void
-    {
-        Schema::create('three_one_one_cases', function (Blueprint $table) {
-            $table->id(); // New auto-incrementing ID column
-            $table->bigInteger('case_enquiry_id');
-            $table->dateTime('open_dt')->nullable();
-            $table->text('sla_target_dt')->nullable();
-            $table->dateTime('closed_dt')->nullable();
-            $table->text('on_time')->nullable();
-            $table->text('case_status')->nullable();
-            $table->text('closure_reason')->nullable();
-            $table->text('case_title')->nullable();
-            $table->text('subject')->nullable();
-            $table->text('reason')->nullable();
-            $table->text('type')->nullable();
-            $table->text('queue')->nullable();
-            $table->text('department')->nullable();
-            $table->text('submitted_photo')->nullable();
-            $table->text('closed_photo')->nullable();
-            $table->text('location')->nullable();
-            $table->text('fire_district')->nullable();
-            $table->text('pwd_district')->nullable();
-            $table->text('city_council_district')->nullable();
-            $table->text('police_district')->nullable();
-            $table->text('neighborhood')->nullable();
-            $table->text('neighborhood_services_district')->nullable();
-            $table->text('ward')->nullable();
-            $table->text('precinct')->nullable();
-            $table->text('location_street_name')->nullable();
-            $table->double('location_zipcode')->nullable();
-            $table->double('latitude')->nullable();
-            $table->double('longitude')->nullable();
-            $table->text('source')->nullable();
-            $table->text('checksum')->nullable();
-            $table->text('ward_number')->nullable();
-            $table->timestamps();
-        });
-
-    }
-
-    /**
-     * Reverse the migrations.
-     *
-     * @return void
-     */
-    public function down(): void
-    {
-        Schema::dropIfExists('three_one_one_cases');
-    }
-};
-Contents of ./output.txt:
-
-Contents of ./2019_12_14_000001_create_personal_access_tokens_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     */
-    public function up(): void
-    {
-        Schema::create('personal_access_tokens', function (Blueprint $table) {
-            $table->id();
-            $table->morphs('tokenable');
-            $table->string('name');
-            $table->string('token', 64)->unique();
-            $table->text('abilities')->nullable();
-            $table->timestamp('last_used_at')->nullable();
-            $table->timestamp('expires_at')->nullable();
-            $table->timestamps();
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     */
-    public function down(): void
-    {
-        Schema::dropIfExists('personal_access_tokens');
-    }
-};
-
-Contents of ./2014_10_12_100000_create_password_reset_tokens_table.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration
-{
-    /**
-     * Run the migrations.
-     */
-    public function up(): void
-    {
-        Schema::create('password_reset_tokens', function (Blueprint $table) {
-            $table->string('email')->primary();
-            $table->string('token');
-            $table->timestamp('created_at')->nullable();
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     */
-    public function down(): void
-    {
-        Schema::dropIfExists('password_reset_tokens');
-    }
-};
-
-Contents of ./2024_12_22_151724_add_language_code_to_city_data_tables.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration {
-    /**
-     * Run the migrations.
-     *
-     * @return void
-     */
-    public function up(): void
-    {
-        // Add language_code column to three_one_one_cases table
-        Schema::table('three_one_one_cases', function (Blueprint $table) {
-            $table->string('language_code', 5)->nullable()->after('checksum');
-        });
-
-        // Add language_code column to crime_data table
-        Schema::table('crime_data', function (Blueprint $table) {
-            $table->string('language_code', 5)->nullable()->after('offense_code');
-        });
-
-        // Add language_code column to building_permits table
-        Schema::table('building_permits', function (Blueprint $table) {
-            $table->string('language_code', 5)->nullable()->after('status');
-        });
-
-        // Add language_code column to construction_off_hours table
-        Schema::table('construction_off_hours', function (Blueprint $table) {
-            $table->string('language_code', 5)->nullable()->after('ward');
-        });
-
-        // Add language_code column to property_violations table
-        Schema::table('property_violations', function (Blueprint $table) {
-            $table->string('language_code', 5)->nullable()->after('location');
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     *
-     * @return void
-     */
-    public function down(): void
-    {
-        // Remove language_code column from three_one_one_cases table
-        Schema::table('three_one_one_cases', function (Blueprint $table) {
-            $table->dropColumn('language_code');
-        });
-
-        // Remove language_code column from crime_data table
-        Schema::table('crime_data', function (Blueprint $table) {
-            $table->dropColumn('language_code');
-        });
-
-        // Remove language_code column from building_permits table
-        Schema::table('building_permits', function (Blueprint $table) {
-            $table->dropColumn('language_code');
-        });
-
-        // Remove language_code column from construction_off_hours table
-        Schema::table('construction_off_hours', function (Blueprint $table) {
-            $table->dropColumn('language_code');
-        });
-
-        // Remove language_code column from property_violations table
-        Schema::table('property_violations', function (Blueprint $table) {
-            $table->dropColumn('language_code');
-        });
-    }
-};
-
-Contents of ./2024_09_04_005046_create_datasets_tables.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-class CreateDatasetsTables extends Migration
-{
-    /**
-     * Run the migrations.
-     *
-     * @return void
-     */
-    public function up()
-    {
-        // Building Permits Table
-        Schema::create('building_permits', function (Blueprint $table) {
-            $table->id();
-            $table->string('permitnumber')->nullable();
-            $table->string('worktype')->nullable();
-            $table->string('permittypedescr')->nullable();
-            $table->text('description')->nullable();
-            $table->text('comments')->nullable();
-            $table->string('applicant')->nullable();
-            $table->string('declared_valuation')->nullable();
-            $table->string('total_fees')->nullable();
-            $table->timestamp('issued_date')->nullable();
-            $table->timestamp('expiration_date')->nullable();
-            $table->string('status')->nullable();
-            $table->string('occupancytype')->nullable();
-            $table->integer('sq_feet')->nullable();
-            $table->string('address')->nullable();
-            $table->string('city')->nullable();
-            $table->string('state')->nullable();
-            $table->string('zip')->nullable();
-            $table->string('property_id')->nullable();
-            $table->string('parcel_id')->nullable();
-            $table->decimal('gpsy', 15, 8)->nullable();
-            $table->decimal('gpsx', 15, 8)->nullable();
-            $table->decimal('y_latitude', 15, 13)->nullable();
-            $table->decimal('x_longitude', 15, 13)->nullable();
-            $table->timestamps();
-        });
-
-        // Construction Off Hours Table
-        Schema::create('construction_off_hours', function (Blueprint $table) {
-            $table->id();
-            $table->string('app_no')->nullable();
-            $table->timestamp('start_datetime')->nullable();
-            $table->timestamp('stop_datetime')->nullable();
-            $table->string('address')->nullable();
-            $table->string('ward')->nullable();
-            $table->timestamps();
-        });
-
-        // Trash Schedules by Address Table
-        Schema::create('trash_schedules_by_address', function (Blueprint $table) {
-            $table->id();
-            $table->string('sam_address_id')->nullable();
-            $table->string('full_address')->nullable();
-            $table->string('mailing_neighborhood')->nullable();
-            $table->string('state')->nullable();
-            $table->string('zip_code')->nullable();
-            $table->decimal('x_coord', 15, 13)->nullable();
-            $table->decimal('y_coord', 15, 13)->nullable();
-            $table->boolean('recollect')->default(0);
-            $table->string('trashday')->nullable();
-            $table->string('pwd_district')->nullable();
-            $table->timestamps();
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     *
-     * @return void
-     */
-    public function down()
-    {
-        Schema::dropIfExists('building_permits');
-        Schema::dropIfExists('construction_off_hours');
-        Schema::dropIfExists('trash_schedules_by_address');
-    }
-}
-
-Contents of ./2024_12_20_000000_add_lat_long_indexes.php:
-<?php
-
-use Illuminate\Database\Migrations\Migration;
-use Illuminate\Database\Schema\Blueprint;
-use Illuminate\Support\Facades\Schema;
-
-return new class extends Migration {
-    /**
-     * Run the migrations.
-     *
-     * @return void
-     */
-    public function up(): void
-    {
-        // Add indexes to the three_one_one_cases table
-        Schema::table('three_one_one_cases', function (Blueprint $table) {
-            $table->index('latitude', 'three_one_one_cases_lat_idx');
-            $table->index('longitude', 'three_one_one_cases_long_idx');
-        });
-
-        // Add indexes to the crime_data table
-        Schema::table('crime_data', function (Blueprint $table) {
-            $table->index('lat', 'crime_data_lat_idx');
-            $table->index('long', 'crime_data_long_idx');
-        });
-
-        // Add indexes to the building_permits table
-        Schema::table('building_permits', function (Blueprint $table) {
-            $table->index('y_latitude', 'building_permits_y_lat_idx');
-            $table->index('x_longitude', 'building_permits_x_long_idx');
-        });
-    }
-
-    /**
-     * Reverse the migrations.
-     *
-     * @return void
-     */
-    public function down(): void
-    {
-        // Drop indexes from the three_one_one_cases table
-        Schema::table('three_one_one_cases', function (Blueprint $table) {
-            $table->dropIndex('three_one_one_cases_lat_idx');
-            $table->dropIndex('three_one_one_cases_long_idx');
-        });
-
-        // Drop indexes from the crime_data table
-        Schema::table('crime_data', function (Blueprint $table) {
-            $table->dropIndex('crime_data_lat_idx');
-            $table->dropIndex('crime_data_long_idx');
-        });
-
-        // Drop indexes from the building_permits table
-        Schema::table('building_permits', function (Blueprint $table) {
-            $table->dropIndex('building_permits_y_lat_idx');
-            $table->dropIndex('building_permits_x_long_idx');
-        });
-    }
-};
-
diff --git a/database/seeders/AllTimeDataPointSeeder.php b/database/seeders/AllTimeDataPointSeeder.php
new file mode 100644
index 0000000..3c85e03
--- /dev/null
+++ b/database/seeders/AllTimeDataPointSeeder.php
@@ -0,0 +1,188 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+use Illuminate\Support\Facades\Log;
+
+class AllTimeDataPointSeeder extends Seeder
+{
+    private const BATCH_SIZE = 1000; // Number of records to upsert in each batch
+
+    // Re-use the MODELS definition from DataPointSeeder
+    private const MODELS = [
+        'crime_data' => [
+            'lat' => 'lat', 'lng' => 'long',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'crime_data_id',
+            'alcivartech_date_field' => 'occurred_on_date'
+        ],
+        'three_one_one_cases' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'three_one_one_case_id',
+            'alcivartech_date_field' => 'open_dt'
+        ],
+        'property_violations' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'property_violation_id',
+            'alcivartech_date_field' => 'status_dttm'
+        ],
+        'construction_off_hours' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'construction_off_hour_id',
+            'alcivartech_date_field' => 'start_datetime'
+        ],
+        'building_permits' => [
+            'lat' => 'y_latitude', 'lng' => 'x_longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'building_permit_id',
+            'alcivartech_date_field' => 'issued_date'
+        ],
+        'food_inspections' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'external_id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'food_inspection_id',
+            'alcivartech_date_field' => 'resultdttm'
+        ],
+    ];
+
+    public function run()
+    {
+        $this->command->info("Starting AllTimeDataPointSeeder...");
+        Log::info("AllTimeDataPointSeeder: Run started.");
+
+        // No deletion of old records for this seeder.
+
+        foreach (self::MODELS as $table => $fields) {
+            $this->syncAllTimeDataPoints($table, $fields);
+        }
+        $this->command->info("AllTimeDataPointSeeder finished.");
+        Log::info("AllTimeDataPointSeeder: Run finished.");
+    }
+
+    private function syncAllTimeDataPoints(string $table, array $fields)
+    {
+        $this->command->info("Processing all-time data for table: {$table}");
+        Log::info("AllTimeDataPointSeeder: Starting sync for table '{$table}'.");
+        Log::info("AllTimeDataPointSeeder: Fields used for table '{$table}'", $fields);
+
+        try {
+            $totalProcessedCount = 0;
+            $totalUpsertedCount = 0;
+            $totalSkippedCount = 0;
+
+            // Process all records from the source table in chunks
+            DB::table($table)
+                // No date filtering on source table, fetch all records
+                ->orderBy($fields['id_field_for_specific_fk']) // Order by PK for consistent chunking
+                ->chunkById(self::BATCH_SIZE, function ($newDataChunk) use ($table, $fields, &$totalProcessedCount, &$totalUpsertedCount, &$totalSkippedCount) {
+                    
+                    $this->command->info("Processing chunk of " . $newDataChunk->count() . " records from {$table} for all_time_data_points.");
+                    Log::info("AllTimeDataPointSeeder: Processing chunk of " . $newDataChunk->count() . " records from '{$table}'.");
+
+                    if ($newDataChunk->isEmpty()) {
+                        return true; 
+                    }
+
+                    $batchInsert = [];
+                    $chunkSkippedCount = 0;
+
+                    foreach ($newDataChunk as $row) {
+                        $totalProcessedCount++;
+                        $genericFkValue = $row->{$fields['id_field_for_generic_fk']} ?? null;
+                        $specificFkValue = $row->{$fields['id_field_for_specific_fk']} ?? null;
+                        $alcivartechDateValue = $row->{$fields['alcivartech_date_field']} ?? null;
+
+                        if (!isset($row->{$fields['lat']}) || is_null($row->{$fields['lat']}) ||
+                            !isset($row->{$fields['lng']}) || is_null($row->{$fields['lng']}) ||
+                            is_null($genericFkValue) || is_null($specificFkValue) || is_null($alcivartechDateValue)) {
+                            
+                            $identifier = $genericFkValue ?? $specificFkValue ?? 'unknown_id_in_chunk';
+                            if ($chunkSkippedCount < 5) {
+                                Log::warning("AllTimeDataPointSeeder: Skipping record from '{$table}' (ID: {$identifier}) in chunk due to missing essential data.", ['row_data_sample' => $row]);
+                            }
+                            $chunkSkippedCount++;
+                            continue;
+                        }
+
+                        if (!is_numeric($row->{$fields['lat']}) || !is_numeric($row->{$fields['lng']})) {
+                            $identifier = $genericFkValue;
+                             if ($chunkSkippedCount < 5) {
+                                Log::warning("AllTimeDataPointSeeder: Skipping record from '{$table}' (ID: {$identifier}) in chunk due to non-numeric lat/lng.", [
+                                    'lat' => $row->{$fields['lat']},
+                                    'lng' => $row->{$fields['lng']}
+                                ]);
+                            }
+                            $chunkSkippedCount++;
+                            continue;
+                        }
+                        
+                        try {
+                            $parsedDate = Carbon::parse($alcivartechDateValue);
+                        } catch (\Exception $e) {
+                            $identifier = $genericFkValue;
+                            if ($chunkSkippedCount < 5) {
+                                Log::warning("AllTimeDataPointSeeder: Invalid date format in chunk for '{$table}' (ID: {$identifier}).", ['date_value' => $alcivartechDateValue]);
+                            }
+                            $chunkSkippedCount++;
+                            continue;
+                        }
+
+                        $batchInsert[] = [
+                            'type' => $table,
+                            'location' => DB::raw("ST_GeomFromText('POINT({$row->{$fields['lng']}} {$row->{$fields['lat']}})')"),
+                            $fields['foreign_key'] => $specificFkValue,
+                            'generic_foreign_id' => $genericFkValue,
+                            'alcivartech_date' => $parsedDate,
+                            'created_at' => now(),
+                            'updated_at' => now(),
+                        ];
+                    }
+                    
+                    $totalSkippedCount += $chunkSkippedCount;
+                    if ($chunkSkippedCount > 0) {
+                        $this->command->info("Skipped {$chunkSkippedCount} records from the current chunk of {$table} for all_time_data_points.");
+                    }
+
+                    if (!empty($batchInsert)) {
+                        $this->command->info("Preparing to upsert batch of " . count($batchInsert) . " valid records into all_time_data_points for {$table}.");
+                        Log::info("AllTimeDataPointSeeder: Preparing to upsert batch of " . count($batchInsert) . " valid records into all_time_data_points for '{$table}'.");
+                        try {
+                            DB::table('all_time_data_points')->upsert( // Target all_time_data_points
+                                $batchInsert,
+                                ['type', 'generic_foreign_id'],
+                                ['location', 'updated_at', $fields['foreign_key'], 'alcivartech_date']
+                            );
+                            $totalUpsertedCount += count($batchInsert);
+                            $this->command->info("Successfully upserted batch of " . count($batchInsert) . " records into all_time_data_points for {$table}. Total upserted so far: {$totalUpsertedCount}");
+                        } catch (\Exception $e) {
+                            $this->command->error("Error upserting batch into all_time_data_points for {$table}: " . $e->getMessage());
+                            Log::error("AllTimeDataPointSeeder: Error upserting batch for '{$table}'.", ['exception' => $e, 'batch_size' => count($batchInsert)]);
+                        }
+                    } else {
+                        $this->command->info("No valid records to insert in this batch into all_time_data_points for {$table}.");
+                    }
+                    return true; 
+                }, $fields['id_field_for_specific_fk']); 
+
+            $this->command->info("Finished processing for {$table} into all_time_data_points. Total records processed: {$totalProcessedCount}, Total records upserted: {$totalUpsertedCount}, Total records skipped: {$totalSkippedCount}.");
+            Log::info("AllTimeDataPointSeeder: Finished processing for '{$table}'. Processed: {$totalProcessedCount}, Upserted: {$totalUpsertedCount}, Skipped: {$totalSkippedCount}.");
+
+        } catch (\Exception $e) {
+            $this->command->error("Failed to process data for table {$table} for all_time_data_points: " . $e->getMessage());
+            Log::error("AllTimeDataPointSeeder: Failed to process data for table '{$table}'.", ['exception' => $e]);
+        }
+        $this->command->info("Finished sync logic for table: {$table} for all_time_data_points");
+    }
+}
diff --git a/database/seeders/CambridgeAddressesSeeder.php b/database/seeders/CambridgeAddressesSeeder.php
new file mode 100644
index 0000000..3b2bd65
--- /dev/null
+++ b/database/seeders/CambridgeAddressesSeeder.php
@@ -0,0 +1,110 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use League\Csv\Reader;
+
+class CambridgeAddressesSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+
+    public function run()
+    {
+        $datasetName = 'cambridge-master-addresses-list';
+        $citySubdirectory = 'cambridge';
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+        
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+        
+        if (!empty($datasetFiles)) {
+            sort($datasetFiles);
+            $fileToProcess = end($datasetFiles);
+            $this->command->info("Processing Cambridge addresses file: " . $fileToProcess);
+            $this->processFile(Storage::path($fileToProcess));
+        } else {
+            $this->command->warn("No file found for Cambridge addresses.");
+        }
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+            $records = $csv->getRecords();
+            $dataBatch = [];
+            $progress = 0;
+            
+            foreach ($records as $record) {
+                $progress++;
+                $dataBatch[] = [
+                    'address_id'                => $record['address_id'] ?? null,
+                    'full_addr'                 => $record['full_addr'] ?? null,
+                    'street_number'             => $record['street_number'] ?? null,
+                    'stname'                    => $record['stname'] ?? null,
+                    'building_id'               => $record['building_id'] ?? null,
+                    'maplot'                    => $record['maplot'] ?? null,
+                    'latitude'                  => is_numeric($record['latitude'] ?? null) ? (float)$record['latitude'] : null,
+                    'longitude'                 => is_numeric($record['longitude'] ?? null) ? (float)$record['longitude'] : null,
+                    'type'                      => $record['type'] ?? null,
+                    'zip_code'                  => $record['zip_code'] ?? null,
+                    'neighborhood'              => $record['neighborhood'] ?? null,
+                    'election_ward'             => $record['election_ward'] ?? null,
+                    'election_precinct'         => $record['election_precinct'] ?? null,
+                    'election_polling_address'  => $record['election_polling_address'] ?? null,
+                    'representation_district'   => $record['representation_district'] ?? null,
+                    'senate_district'           => $record['senate_district'] ?? null,
+                    'cad_reporting_district'    => $record['cad_reporting_district'] ?? null,
+                    'police_sector'             => $record['police_sector'] ?? null,
+                    'police_car_route'          => $record['police_car_route'] ?? null,
+                    'police_walking_route'      => $record['police_walking_route'] ?? null,
+                    'police_neighborhood'       => $record['police_neighborhood'] ?? null,
+                    'police_business_district'  => $record['police_business_district'] ?? null,
+                    'commercial_district'       => $record['commercial_district'] ?? null,
+                    'census_tract_2010'         => $record['census_tract_2010'] ?? null,
+                    'census_block_group_2010'   => $record['census_block_group_2010'] ?? null,
+                    'census_block_2010'         => $record['census_block_2010'] ?? null,
+                    'census_block_id_2010'      => $record['census_block_id_2010'] ?? null,
+                    'street_sweeping_district'  => $record['street_sweeping_district'] ?? null,
+                    'census_tract_2020'         => $record['census_tract_2020'] ?? null,
+                    'census_block_group_2020'   => $record['census_block_group_2020'] ?? null,
+                    'census_block_2020'         => $record['census_block_2020'] ?? null,
+                    'census_block_id_2020'      => $record['census_block_id_2020'] ?? null,
+                    'created_at'                => now(),
+                    'updated_at'                => now(),
+                ];
+                if ($progress % self::BATCH_SIZE === 0) {
+                    $this->insertOrUpdateBatch($dataBatch);
+                    $dataBatch = [];
+                    $this->command->info("Processed {$progress} records...");
+                }
+            }
+            
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+            }
+            $this->command->info("File processed: " . basename($filePath));
+        } catch (\Exception $e) {
+            $this->command->error("Error processing file (addresses): " . basename($filePath) . " - " . $e->getMessage());
+        }
+    }
+    
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        $validBatch = array_filter($dataBatch, fn($item) => !empty($item['address_id']));
+        if (empty($validBatch)) {
+            return;
+        }
+        DB::table('cambridge_addresses')->upsert(
+            $validBatch,
+            ['address_id'],
+            array_keys($validBatch[0])
+        );
+    }
+}
diff --git a/database/seeders/CambridgeBuildingPermitsSeeder.php b/database/seeders/CambridgeBuildingPermitsSeeder.php
new file mode 100644
index 0000000..5d9a940
--- /dev/null
+++ b/database/seeders/CambridgeBuildingPermitsSeeder.php
@@ -0,0 +1,226 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\BuildingPermit;
+use League\Csv\Reader;
+use Illuminate\Support\Facades\DB;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Console\OutputStyle;
+use Symfony\Component\Console\Input\ArgvInput;
+use Symfony\Component\Console\Output\ConsoleOutput;
+
+class CambridgeBuildingPermitsSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+    protected $output;
+
+    // Column mapping from Cambridge CSV headers (new 125-field structure) to database fields
+    private const COLUMN_MAP = [
+        'permitnumber'        => 'id', // CSV 'id' maps to DB 'permitnumber'
+        'worktype'            => 'building_use',
+        'permittypedescr'     => 'permit_type',
+        'description'         => 'detailed_description_of_work',
+        // 'comments' will be constructed from other fields
+        'applicant'           => 'firm_name', // Assuming firm_name is the applicant
+        'declared_valuation'  => 'total_cost_of_construction',
+        // 'total_fees'       => null, // No obvious direct map from the 125 fields
+        'issued_date'         => 'issue_date',
+        // 'expiration_date'  => null, // No obvious direct map from the 125 fields
+        'status'              => 'status',
+        'occupancytype'       => 'proposed_property_use',
+        'sq_feet'             => 'gross_square_footage',
+        'address'             => 'address', // The CSV has a single 'address' field
+        // 'city' will be hardcoded to 'Cambridge'
+        // 'state' will be hardcoded to 'MA'
+        // 'zip' => null, // No direct 'zip' or 'zip_code' in the 125 fields.
+        'property_id'         => 'maplot_number',
+        'parcel_id'           => 'maplot_number', // Using maplot_number for both, adjust if a better field exists
+        'gpsy'                => 'latitude',    // For DB gpsy decimal(15,8)
+        'gpsx'                => 'longitude',   // For DB gpsx decimal(15,8)
+        'y_latitude'          => 'latitude',    // For DB y_latitude decimal(15,13)
+        'x_longitude'         => 'longitude',   // For DB x_longitude decimal(15,13)
+        // 'language_code' will be hardcoded 'en-US'
+    ];
+
+    // ADDRESS_PARTS_MAP is no longer needed as 'address' is a single field in the new CSV.
+
+    public function __construct()
+    {
+        $this->output = new OutputStyle(new ArgvInput(), new ConsoleOutput());
+    }
+
+    private function makeHumanReadable(string $headerName): string
+    {
+        return ucwords(str_replace('_', ' ', $headerName));
+    }
+
+    public function run()
+    {
+        $datasetName = 'cambridge-building-permits';
+        $citySubdirectory = 'cambridge'; // Matches 'city' in datasets.php config
+
+        // Get all files from the specific city's dataset folder in Storage
+        $pathPattern = "datasets/{$citySubdirectory}/{$datasetName}_*.csv";
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+
+        // Filter files to only include those matching the dataset name pattern
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        if (!empty($datasetFiles)) {
+            // Sort files by name to get the most recent (assuming timestamp in filename makes it last)
+            sort($datasetFiles);
+            $fileToProcess = end($datasetFiles);
+            $this->output->writeln("<info>Processing Cambridge building permits file: " . $fileToProcess . "</info>");
+            $this->processFile(Storage::path($fileToProcess));
+        } else {
+            $this->output->writeln("<comment>No files found for Cambridge building permits matching pattern: {$pathPattern}</comment>");
+        }
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0); // CSV header is on the first row
+            $csv->setEscape('');
+
+            $records = $csv->getRecords(); // Yields associative arrays
+            $permitModel = new BuildingPermit();
+            $fillableFields = $permitModel->getFillable();
+            
+            // Get the list of CSV headers that are directly mapped
+            $mappedCsvHeaders = array_values(self::COLUMN_MAP);
+
+            $dataBatch = [];
+            $recordCount = 0;
+            
+            // Recount total records for progress bar as original iterator might be consumed by header processing
+            $totalRecords = iterator_count(Reader::createFromPath($filePath, 'r')->setHeaderOffset(0)->setEscape('')->getRecords());
+            $this->output->writeln("Starting processing of " . basename($filePath) . " (New 125-column structure)");
+            $progressBar = $this->output->createProgressBar($totalRecords);
+            $progressBar->start();
+
+            foreach ($records as $csvRecord) { // $csvRecord is an associative array
+                $recordCount++;
+                $progressBar->advance();
+                $permitData = [];
+
+                // Initialize all fillable fields to null
+                foreach ($fillableFields as $dbField) {
+                    $permitData[$dbField] = null;
+                }
+
+                // Map CSV data to model fields using COLUMN_MAP
+                foreach (self::COLUMN_MAP as $dbField => $csvHeader) {
+                    if (isset($csvRecord[$csvHeader])) {
+                        $permitData[$dbField] = $csvRecord[$csvHeader] === '' ? null : $csvRecord[$csvHeader];
+                    }
+                }
+                
+                // Aggregate unmapped fields into comments
+                $commentsString = "";
+                foreach ($csvRecord as $csvHeaderKey => $csvValue) {
+                    // If the header is not in our mapped list and the value is not empty
+                    if (!in_array($csvHeaderKey, $mappedCsvHeaders) && !empty($csvValue)) {
+                        $humanReadableHeader = $this->makeHumanReadable($csvHeaderKey);
+                        $commentsString .= $humanReadableHeader . ": " . $csvValue . "\n";
+                    }
+                }
+                $permitData['comments'] = !empty($commentsString) ? trim($commentsString) : null;
+
+                // Set city, state, language_code
+                $permitData['city'] = 'Cambridge';
+                $permitData['state'] = 'MA';
+                $permitData['language_code'] = 'en-US';
+
+                // Data cleaning and formatting
+                $permitData['issued_date'] = $this->formatDate($permitData['issued_date']);
+                $permitData['expiration_date'] = $this->formatDate($permitData['expiration_date']); // Will be null if not in COLUMN_MAP
+
+                $sqfeet = is_numeric($permitData['sq_feet']) ? (int)$permitData['sq_feet'] : 0;
+                $permitData['sq_feet'] = min($sqfeet, 1000000000);
+
+                // Handle latitude/longitude, ensuring they are numeric or null
+                $permitData['gpsy'] = is_numeric($permitData['gpsy']) ? (float)$permitData['gpsy'] : null;
+                $permitData['gpsx'] = is_numeric($permitData['gpsx']) ? (float)$permitData['gpsx'] : null;
+                $permitData['y_latitude'] = is_numeric($permitData['y_latitude']) ? (float)$permitData['y_latitude'] : null;
+                $permitData['x_longitude'] = is_numeric($permitData['x_longitude']) ? (float)$permitData['x_longitude'] : null;
+
+
+                // Ensure permitnumber (from CSV 'id') is present for upsert
+                if (empty($permitData['permitnumber'])) {
+                    $this->output->writeln("<warning>Skipping record (index {$recordCount}) due to missing permit number (CSV 'id' field) in file: " . basename($filePath) . "</warning>");
+                    continue;
+                }
+                
+                // Convert any remaining empty strings in $permitData to null (already done by initial mapping for mapped fields)
+                // This ensures that if a fillable field was not in COLUMN_MAP and not set otherwise, it remains null.
+
+                $dataBatch[] = $permitData;
+
+                if (count($dataBatch) >= self::BATCH_SIZE) {
+                    $this->insertOrUpdateBatch($dataBatch);
+                    $dataBatch = [];
+                }
+            }
+            $progressBar->finish();
+            $this->output->newLine();
+
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+            }
+
+            $this->output->writeln("<info>Successfully processed Cambridge building permits file: " . basename($filePath) . ". Total records: {$recordCount}</info>");
+
+        } catch (\League\Csv\Exception $e) {
+            $this->output->writeln("<error>CSV Processing Error for file: " . basename($filePath) . " - " . $e->getMessage() . "</error>");
+        } catch (\Exception $e) {
+            $this->output->writeln("<error>Error processing Cambridge file: " . basename($filePath) . " - " . $e->getMessage() . "\n" . $e->getTraceAsString() . "</error>");
+        }
+    }
+
+    private function formatDate($date)
+    {
+        if (empty($date) || strtolower($date) === 'nan') {
+            return null;
+        }
+        if ($date == '1970-01-01 00:00:00') {
+            return null;
+        }
+        $timestamp = strtotime($date);
+        if ($timestamp === false || $timestamp < 0) {
+            $dateTime = \DateTime::createFromFormat('Y-m-d', $date); // Try to parse YYYY-MM-DD
+            if ($dateTime && $dateTime->format('Y-m-d') === $date) {
+                 return $dateTime->format('Y-m-d H:i:s');
+            }
+            return null;
+        }
+        return date('Y-m-d H:i:s', $timestamp);
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        $validBatch = array_filter($dataBatch, fn($item) => !empty($item['permitnumber']));
+        if (empty($validBatch)) {
+            return;
+        }
+        
+        $updateColumns = [
+            'worktype', 'permittypedescr', 'description', 'comments', 'applicant',
+            'declared_valuation', 'total_fees', 'issued_date', 'expiration_date',
+            'status', 'occupancytype', 'sq_feet', 'address', 'city', 'state', 'zip',
+            'property_id', 'parcel_id', 'gpsy', 'gpsx', 'y_latitude', 'x_longitude',
+            'language_code', 'updated_at'
+        ];
+        
+        DB::table((new BuildingPermit)->getTable())->upsert(
+            $validBatch,
+            ['permitnumber'],
+            $updateColumns
+        );
+    }
+}
diff --git a/database/seeders/CambridgeCrimeDataSeeder.php b/database/seeders/CambridgeCrimeDataSeeder.php
new file mode 100644
index 0000000..2e1c2e1
--- /dev/null
+++ b/database/seeders/CambridgeCrimeDataSeeder.php
@@ -0,0 +1,447 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+use League\Csv\Reader;
+
+class CambridgeCrimeDataSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+    private const STREET_ABBREVIATIONS = [
+        'MOUNT' => 'MT',
+        'SAINT' => 'ST', // Note: This 'ST' for Saint might need care if 'ST' is also for Street.
+                         // Consider 'ST.' or ensure DB consistency. For now, using 'ST'.
+        'ACORN PK' => 'ACORN PARK DR',
+        'GALILEO GALILEI' => 'GALILEI',
+        'CAMBRIDGE CTR' => 'BROADWAY',
+        'STREET NORTH'  => 'ST N',
+        'HAWTHORNE' => 'HAWTHORN',
+        /*
+        'STREET' => 'ST',
+        'AVENUE' => 'AVE',
+        'ROAD' => 'RD',
+        'DRIVE' => 'DR',
+        'PLACE' => 'PL',
+        'COURT' => 'CT',
+        'LANE' => 'LN',
+        'BOULEVARD' => 'BLVD',
+        'PARKWAY' => 'PKWY',
+        'SQUARE' => 'SQ',
+        'TERRACE' => 'TER',
+        'HIGHWAY' => 'HWY',
+        'CIRCLE' => 'CIR',
+        'ALLEY' => 'ALY',
+        'EXPRESSWAY' => 'EXPY',
+        'FREEWAY' => 'FWY',
+        'JUNCTION' => 'JCT',
+        'POINT' => 'PT',
+        'TRAIL' => 'TRL',
+        'TURNPIKE' => 'TPKE',
+        'WAY' => 'WY',
+        'CENTER' => 'CTR', */
+        // Common directional words often abbreviated at start/end of street names
+        // These are more complex to handle generally unless part of the abbreviation map for full names
+        // e.g. if "NORTH MAIN STREET" is stored as "N MAIN ST"
+        // For now, focusing on type abbreviations and explicit "Mount".
+    ];
+
+    public function run()
+    {
+        $datasetName = 'cambridge-crime-reports';
+        $citySubdirectory = 'cambridge';
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        if (!empty($datasetFiles)) {
+            sort($datasetFiles);
+            $fileToProcess = end($datasetFiles);
+            $this->command->info("Processing Cambridge crime data file: " . $fileToProcess);
+            $this->processFile(Storage::path($fileToProcess));
+        } else {
+            $this->command->warn("No file found for Cambridge crime data.");
+        }
+    }
+
+    private function normalizeStreetName(string $streetName): string
+    {
+        $processedName = strtoupper(trim($streetName));
+        $processedName = preg_replace('/\s+/', ' ', $processedName); // Normalize spaces
+
+        foreach (self::STREET_ABBREVIATIONS as $search => $replace) {
+            // Use word boundaries to ensure whole word replacement.
+            // $search is already uppercase from the constant definition.
+            $processedName = preg_replace('/\b' . preg_quote($search, '/') . '\b/', $replace, $processedName);
+        }
+        $processedName = rtrim($processedName, '.'); // Remove trailing periods
+        return trim($processedName);
+    }
+
+    private function normalizeAndLookupIntersection(string $intersectionQueryString): ?array
+    {
+        $this->command->info("---> Attempting Intersection Lookup for: '{$intersectionQueryString}'");
+        $logBuffer = []; // Buffer for detailed logs, only shown on complete failure
+
+        // 1. Parse into two street parts
+        $parts = explode(' & ', $intersectionQueryString);
+        if (count($parts) !== 2) {
+            $parts = preg_split('/\s+AND\s+/i', $intersectionQueryString, 2);
+            if (count($parts) !== 2) {
+                $logBuffer[] = "     Could not parse '{$intersectionQueryString}' into two distinct street names using ' & ' or ' AND '. Skipping detailed normalization.";
+                $this->command->warn(implode("\n", $logBuffer));
+                $this->command->warn("     Intersection lookup FAILED for '{$intersectionQueryString}'.");
+                return null;
+            }
+        }
+
+        $street1_original = trim($parts[0]);
+        $street2_original = trim($parts[1]);
+        $logBuffer[] = "     Parsed into: [1] '{$street1_original}' AND [2] '{$street2_original}'";
+
+        // 2. Process each street name using the common normalizer
+        $street1_processed = $this->normalizeStreetName($street1_original);
+        $street2_processed = $this->normalizeStreetName($street2_original);
+        $logBuffer[] = "     After normalization: [1] '{$street1_processed}' AND [2] '{$street2_processed}'";
+
+        // 3. Alphabetize for primary lookup
+        $streetsForPrimaryLookup = [$street1_processed, $street2_processed];
+        sort($streetsForPrimaryLookup, SORT_STRING | SORT_FLAG_CASE);
+        $primaryLookupString = $streetsForPrimaryLookup[0] . ' & ' . $streetsForPrimaryLookup[1];
+        $logBuffer[] = "     Primary Lookup String (normalized, alphabetized): '{$primaryLookupString}'";
+
+        // 4. Database Lookup (Primary: Normalized, Alphabetized)
+        $lookup = DB::table('cambridge_intersections')
+            ->where(DB::raw('LOWER(intersection)'), strtolower($primaryLookupString))
+            ->first();
+
+        if ($lookup) {
+            $this->command->info("     SUCCESS (Primary Match): '{$intersectionQueryString}' found as '{$primaryLookupString}'. Lat: {$lookup->latitude}, Lon: {$lookup->longitude}");
+            return ['latitude' => $lookup->latitude, 'longitude' => $lookup->longitude];
+        }
+        $logBuffer[] = "     Primary lookup FAILED for '{$primaryLookupString}'.";
+
+        // 5. Fallback Lookup (Original parsed names, alphabetized, case-insensitive)
+        $fallbackStreetsOriginal = [$street1_original, $street2_original];
+        sort($fallbackStreetsOriginal, SORT_STRING | SORT_FLAG_CASE);
+        $fallbackLookupStringOriginal = $fallbackStreetsOriginal[0] . ' & ' . $fallbackStreetsOriginal[1];
+        $logBuffer[] = "     Fallback Lookup String (original, alphabetized): '{$fallbackLookupStringOriginal}'";
+        
+        $fallbackLookup = DB::table('cambridge_intersections')
+            ->where(DB::raw('LOWER(intersection)'), strtolower($fallbackLookupStringOriginal))
+            ->first();
+
+        if ($fallbackLookup) {
+            $this->command->info("     SUCCESS (Fallback Original Match): '{$intersectionQueryString}' found as '{$fallbackLookupStringOriginal}'. Lat: {$fallbackLookup->latitude}, Lon: {$fallbackLookup->longitude}");
+            return ['latitude' => $fallbackLookup->latitude, 'longitude' => $fallbackLookup->longitude];
+        }
+        $logBuffer[] = "     Fallback lookup (original, alphabetized) FAILED for '{$fallbackLookupStringOriginal}'.";
+
+        // 6. Second Fallback: Substring match for both processed street names (for multi-street intersections)
+        // Ensure street names are not empty before attempting this
+        if (!empty($street1_processed) && !empty($street2_processed)) {
+            $street1_processed_lower = strtolower($street1_processed);
+            $street2_processed_lower = strtolower($street2_processed);
+            $logBuffer[] = "     Second Fallback Lookup: Checking for intersections containing BOTH '{$street1_processed_lower}' AND '{$street2_processed_lower}'.";
+
+            $substringLookup = DB::table('cambridge_intersections')
+                ->where(DB::raw('LOWER(intersection)'), 'LIKE', '%' . $street1_processed_lower . '%')
+                ->where(DB::raw('LOWER(intersection)'), 'LIKE', '%' . $street2_processed_lower . '%')
+                ->first(); // Take the first match if multiple exist
+
+            if ($substringLookup) {
+                $this->command->info("     SUCCESS (Substring Fallback Match): '{$intersectionQueryString}' (normalized as '{$street1_processed}' & '{$street2_processed}') found in '{$substringLookup->intersection}'. Lat: {$substringLookup->latitude}, Lon: {$substringLookup->longitude}");
+                return ['latitude' => $substringLookup->latitude, 'longitude' => $substringLookup->longitude];
+            }
+            $logBuffer[] = "     Second Fallback (substring) FAILED for '{$street1_processed_lower}' AND '{$street2_processed_lower}'.";
+        } else {
+            $logBuffer[] = "     Skipping Second Fallback (substring) because one or both processed street names are empty.";
+        }
+
+        // 7. Third Fallback: Lowest address number on the first street
+        if (!empty($street1_processed)) {
+            $logBuffer[] = "     Third Fallback: Attempting to find lowest address on street '{$street1_processed}'.";
+            $addressStreet1 = DB::table('cambridge_addresses')
+                ->where(DB::raw('LOWER(stname)'), strtolower($street1_processed))
+                ->whereNotNull('street_number')
+                ->where('street_number', 'REGEXP', '^[0-9]+$') // Ensure it's purely numeric for reliable sorting
+                ->orderByRaw('CAST(street_number AS UNSIGNED) ASC')
+                ->select('latitude', 'longitude', 'full_addr')
+                ->first();
+
+            if ($addressStreet1) {
+                $this->command->info("     SUCCESS (Street 1 Fallback Match): For '{$intersectionQueryString}', using lowest address on '{$street1_processed}': '{$addressStreet1->full_addr}'. Lat: {$addressStreet1->latitude}, Lon: {$addressStreet1->longitude}");
+                return ['latitude' => $addressStreet1->latitude, 'longitude' => $addressStreet1->longitude];
+            }
+            $logBuffer[] = "     Third Fallback (lowest address on '{$street1_processed}') FAILED.";
+        } else {
+            $logBuffer[] = "     Skipping Third Fallback (lowest address on street 1) because processed street name 1 is empty.";
+        }
+
+        // 8. Fourth Fallback: Lowest address number on the second street
+        if (!empty($street2_processed)) {
+            $logBuffer[] = "     Fourth Fallback: Attempting to find lowest address on street '{$street2_processed}'.";
+            $addressStreet2 = DB::table('cambridge_addresses')
+                ->where(DB::raw('LOWER(stname)'), strtolower($street2_processed))
+                ->whereNotNull('street_number')
+                ->where('street_number', 'REGEXP', '^[0-9]+$')
+                ->orderByRaw('CAST(street_number AS UNSIGNED) ASC')
+                ->select('latitude', 'longitude', 'full_addr')
+                ->first();
+
+            if ($addressStreet2) {
+                $this->command->info("     SUCCESS (Street 2 Fallback Match): For '{$intersectionQueryString}', using lowest address on '{$street2_processed}': '{$addressStreet2->full_addr}'. Lat: {$addressStreet2->latitude}, Lon: {$addressStreet2->longitude}");
+                return ['latitude' => $addressStreet2->latitude, 'longitude' => $addressStreet2->longitude];
+            }
+            $logBuffer[] = "     Fourth Fallback (lowest address on '{$street2_processed}') FAILED.";
+        } else {
+            $logBuffer[] = "     Skipping Fourth Fallback (lowest address on street 2) because processed street name 2 is empty.";
+        }
+        
+        // If all lookups failed, print the buffered logs and the final failure message
+        $this->command->warn(implode("\n", $logBuffer));
+        $this->command->warn("     All intersection lookup strategies FAILED for '{$intersectionQueryString}'.");
+        return null;
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+            $records = $csv->getRecords();
+            $dataBatch = [];
+            $progress = 0;
+            $notFoundCount = 0;
+
+            foreach ($records as $record) {
+                $progress++;
+
+                $timeField = $record['crime_date_time'] ?? '';
+                if (strpos($timeField, ' - ') !== false) {
+                    [$start, $end] = explode(' - ', $timeField, 2);
+                } else {
+                    $start = $end = $timeField;
+                }
+                $crimeStart = $this->parseCrimeTime($start);
+                $crimeEnd = $this->parseCrimeTime($end);
+
+                $raw_location = trim($record['location'] ?? '');
+                $coords = ['latitude' => null, 'longitude' => null];
+                $location_found = false;
+                $parsedAddressInfo = null; // To store parsing result for logging
+
+                if (!empty($raw_location)) {
+                    $this->command->info("Processing raw location: '{$raw_location}'");
+                    $location_for_db_lookup = preg_replace('/, Cambridge, MA$/i', '', $raw_location);
+                    $location_for_db_lookup = trim($location_for_db_lookup);
+                    $this->command->info("Cleaned location for DB lookup: '{$location_for_db_lookup}'");
+
+                    if (strpos($location_for_db_lookup, '&') !== false || stripos($location_for_db_lookup, ' AND ') !== false) { // Intersection
+                        $normalized_coords = $this->normalizeAndLookupIntersection($location_for_db_lookup);
+                        if ($normalized_coords) {
+                            $coords['latitude'] = $normalized_coords['latitude'];
+                            $coords['longitude'] = $normalized_coords['longitude'];
+                            $location_found = true;
+                        }
+                    } else { // Address
+                        $this->command->info("Attempting Address Lookup for: '{$location_for_db_lookup}'");
+                        // parseCrimeLocationAddress will now use normalizeStreetName internally
+                        $parsedAddressInfo = $this->parseCrimeLocationAddress($location_for_db_lookup);
+                        if ($parsedAddressInfo) {
+                            $crimeStreetNumber = $parsedAddressInfo['number'];
+                            $crimeStreetName = $parsedAddressInfo['name']; // This is now normalized
+                            $this->command->info("  Parsed and Normalized address: Number='{$crimeStreetNumber}', Name='{$crimeStreetName}' (Original number part: '{$parsedAddressInfo['original_number_part']}')");
+
+                            // Query against stname using the normalized $crimeStreetName
+                            $dbAddresses = DB::table('cambridge_addresses')
+                                ->where(DB::raw('LOWER(stname)'), strtolower($crimeStreetName)) // stname in DB should be normalized too
+                                ->select('street_number', 'latitude', 'longitude', 'full_addr')
+                                ->get();
+
+                            if ($dbAddresses->isNotEmpty()) {
+                                $this->command->info("  Found " . $dbAddresses->count() . " addresses on street '{$crimeStreetName}'. Searching for closest to number '{$crimeStreetNumber}'.");
+                                $closestMatch = null;
+                                $minDifference = PHP_INT_MAX;
+
+                                foreach ($dbAddresses as $dbAddr) {
+                                    $dbStreetNumberNumeric = intval($dbAddr->street_number);
+                                    if ($dbStreetNumberNumeric > 0) { // Ensure it's a valid number for comparison
+                                        $difference = abs($crimeStreetNumber - $dbStreetNumberNumeric);
+                                        if ($difference < $minDifference) {
+                                            $minDifference = $difference;
+                                            $closestMatch = $dbAddr;
+                                        }
+                                    }
+                                }
+
+                                if ($closestMatch) {
+                                    $coords['latitude'] = $closestMatch->latitude;
+                                    $coords['longitude'] = $closestMatch->longitude;
+                                    $location_found = true;
+                                    $this->command->info("  Closest address match: '{$closestMatch->full_addr}' (Num diff: {$minDifference}). Lat: {$coords['latitude']}, Lon: {$coords['longitude']}");
+                                } else {
+                                    $this->command->warn("  No valid numeric street numbers found for '{$crimeStreetName}' to compare with '{$crimeStreetNumber}'.");
+                                }
+                            } else {
+                                 $this->command->warn("  No addresses found for normalized street name '{$crimeStreetName}'.");
+                            }
+                        } else {
+                             $this->command->warn("  Could not parse '{$location_for_db_lookup}' into number/name for detailed address lookup.");
+                        }
+
+                        if (!$location_found) {
+                            $this->command->info("  Attempting fallback LIKE lookup for address '{$location_for_db_lookup}%'");
+                            $lookup = DB::table('cambridge_addresses')
+                                ->where(DB::raw('LOWER(full_addr)'), 'LIKE', strtolower($location_for_db_lookup) . '%')
+                                ->first();
+                            if ($lookup) {
+                                $coords['latitude'] = $lookup->latitude;
+                                $coords['longitude'] = $lookup->longitude;
+                                $location_found = true;
+                                $this->command->info("  Fallback LIKE '{$location_for_db_lookup}%' MATCH FOUND: '{$lookup->full_addr}'. Lat: {$coords['latitude']}, Lon: {$coords['longitude']}");
+                            } else {
+                                $this->command->info("  Attempting second fallback LIKE lookup for address '%{$raw_location}%'");
+                                $lookup_raw = DB::table('cambridge_addresses')
+                                    ->where(DB::raw('LOWER(full_addr)'), 'LIKE', '%' . strtolower($raw_location) . '%')
+                                    ->first();
+                                if ($lookup_raw) {
+                                    $coords['latitude'] = $lookup_raw->latitude;
+                                    $coords['longitude'] = $lookup_raw->longitude;
+                                    $location_found = true;
+                                    $this->command->info("  Second fallback LIKE '%{$raw_location}%' MATCH FOUND: '{$lookup_raw->full_addr}'. Lat: {$coords['latitude']}, Lon: {$coords['longitude']}");
+                                } else {
+                                    $this->command->info("  Second fallback LIKE '%{$raw_location}%' FAILED.");
+                                }
+                            }
+                        }
+
+                        // New Fallback: If address not found, and street name was parsed, look for street name in intersections
+                        if (!$location_found && $parsedAddressInfo && !empty($parsedAddressInfo['name'])) {
+                            $streetNameToSearchInIntersections = $parsedAddressInfo['name'];
+                            $this->command->info("  Address not found. Attempting final fallback: Searching for street '{$streetNameToSearchInIntersections}' in intersections table.");
+                            
+                            $intersectionFallback = DB::table('cambridge_intersections')
+                                ->where(DB::raw('LOWER(intersection)'), 'LIKE', '%' . strtolower($streetNameToSearchInIntersections) . '%')
+                                ->select('latitude', 'longitude', 'intersection')
+                                ->first();
+
+                            if ($intersectionFallback) {
+                                $coords['latitude'] = $intersectionFallback->latitude;
+                                $coords['longitude'] = $intersectionFallback->longitude;
+                                $location_found = true;
+                                $this->command->info("  SUCCESS (Address Fallback to Intersection): Found street '{$streetNameToSearchInIntersections}' in intersection '{$intersectionFallback->intersection}'. Lat: {$coords['latitude']}, Lon: {$coords['longitude']}");
+                            } else {
+                                $this->command->warn("  Final fallback (street '{$streetNameToSearchInIntersections}' in intersections) FAILED.");
+                            }
+                        }
+                    }
+
+                    if (!$location_found) {
+                        $this->command->warn("LOCATION NOT FOUND for '{$raw_location}' (Cleaned: '{$location_for_db_lookup}') using all strategies.");
+                        $notFoundCount++;
+                    }
+                } else { // Empty raw_location
+                     $this->command->warn("Empty location string for record: " . ($record['file_number'] ?? 'N/A'));
+                     $notFoundCount++;
+                }
+
+                $dataBatch[] = [
+                    'file_number'       => $record['file_number'] ?? null,
+                    'date_of_report'    => $this->parseIsoDate($record['date_of_report'] ?? null),
+                    'crime_start_time'  => $crimeStart,
+                    'crime_end_time'    => $crimeEnd,
+                    'crime'             => $record['crime'] ?? null,
+                    'reporting_area'    => $record['reporting_area'] ?? null,
+                    'neighborhood'      => $record['neighborhood'] ?? null,
+                    'location'          => $raw_location, // Store the original location
+                    'latitude'          => $coords['latitude'],
+                    'longitude'         => $coords['longitude'],
+                    'created_at'        => now(),
+                    'updated_at'        => now(),
+                ];
+
+                if ($progress % self::BATCH_SIZE === 0) {
+                    $this->insertBatch($dataBatch);
+                    $dataBatch = [];
+                    $this->command->info("Processed {$progress} records... ({$notFoundCount} locations not found so far)");
+                }
+            }
+
+            if (!empty($dataBatch)) {
+                $this->insertBatch($dataBatch);
+            }
+            $this->command->info("File processed: " . basename($filePath) . ". Total locations not found: {$notFoundCount}");
+        } catch (\Exception $e) {
+            $this->command->error("Error processing crime data file: " . basename($filePath) . " - " . $e->getMessage() . "\nStack trace: " . $e->getTraceAsString());
+        }
+    }
+
+    private function parseCrimeLocationAddress(string $locationString): ?array
+    {
+        // Regex to capture a numeric part and the street name
+        if (preg_match('/^(\d+)\s+(.*)$/', $locationString, $matches)) {
+            $numberPart = $matches[1]; // The numeric part
+            $rawStreetNamePart = $matches[2]; // The rest of the string is the street name
+            
+            $numericStreetNumber = intval($numberPart); 
+
+            // Normalize the extracted street name
+            $normalizedStreetName = $this->normalizeStreetName($rawStreetNamePart);
+            
+            $this->command->info("Parsed address: Number='{$numericStreetNumber}', Raw Name='{$rawStreetNamePart}', Normalized Name='{$normalizedStreetName}'");
+            if ($numericStreetNumber > -1 && !empty($normalizedStreetName)) { // Allow 0 as a street number if it occurs
+                return [
+                    'number' => $numericStreetNumber,
+                    'name' => $normalizedStreetName, // Return the normalized name
+                    'original_number_part' => $numberPart 
+                ];
+            }
+        }
+        $this->command->warn("Could not parse address string '{$locationString}' into number and street name components.");
+        return null; 
+    }
+
+    private function parseCrimeTime($timeString)
+    {
+        $timeString = trim($timeString);
+        if (!$timeString) {
+            return null;
+        }
+        // Expected format "m/d/Y H:i", e.g., "01/18/2009 22:00"
+        try {
+            return Carbon::createFromFormat('m/d/Y H:i', $timeString)->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            return null;
+        }
+    }
+    
+    private function parseIsoDate($isoDate)
+    {
+        if (!$isoDate) {
+            return null;
+        }
+        try {
+            return Carbon::parse($isoDate)->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            return null;
+        }
+    }
+
+    private function insertBatch(array $dataBatch)
+    {
+        // Filter out records with null file_number if it's a primary/unique key concern for upsert
+        // For simple insert, this might not be necessary unless file_number is NOT NULL
+        $validBatch = array_filter($dataBatch, fn($item) => !empty($item['file_number']));
+        if (empty($validBatch)) {
+            return;
+        }
+        // Using simple insert as per previous version. If upsert is needed, define unique key and update columns.
+        DB::table('cambridge_crime_data')->insert($validBatch);
+    }
+}
diff --git a/database/seeders/CambridgeCrimeDataSeederMerge.php b/database/seeders/CambridgeCrimeDataSeederMerge.php
new file mode 100644
index 0000000..1544b7c
--- /dev/null
+++ b/database/seeders/CambridgeCrimeDataSeederMerge.php
@@ -0,0 +1,452 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+use League\Csv\Reader;
+// Note: Statement class might be useful if complex filtering is needed before chunking,
+// but for now, we read all records from the selected file.
+// use League\Csv\Statement; 
+
+class CambridgeCrimeDataSeederMerge extends Seeder
+{
+    private const BATCH_SIZE = 500; // For DB upserts
+    private const MAX_RECORDS_IN_MEMORY_CHUNK = 10000; // For accumulating raw CSV records
+    private const STREET_ABBREVIATIONS = [
+        'MOUNT' => 'MT',
+        'SAINT' => 'ST',
+        'ACORN PK' => 'ACORN PARK DR',
+        'GALILEO GALILEI' => 'GALILEI',
+        'CAMBRIDGE CTR' => 'BROADWAY',
+        'STREET NORTH'  => 'ST N',
+        'HAWTHORNE' => 'HAWTHORN',
+        // Add other abbreviations from CambridgePoliceLogSeeder if needed
+    ];
+
+    private array $addressCache = [];
+    private array $intersectionCache = [];
+
+    public function run()
+    {
+        $this->command->info("Starting Cambridge Crime Data Merge Seeder...");
+
+        $this->loadAddressData();
+        $this->loadIntersectionData();
+
+        $datasetName = 'cambridge-crime-reports';
+        $citySubdirectory = 'cambridge';
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        if (empty($datasetFiles)) {
+            $this->command->warn("No file found for Cambridge crime data merge.");
+            return;
+        }
+        
+        sort($datasetFiles);
+        $fileToProcessPath = end($datasetFiles);
+        $this->command->info("Selected Cambridge crime data file for merge: " . $fileToProcessPath);
+
+        $recordsChunk = [];
+        $grandTotalRecordsProcessed = 0;
+        $grandTotalNotFoundCount = 0;
+            
+        try {
+            $csv = Reader::createFromPath(Storage::path($fileToProcessPath), 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+            
+            // Assuming 'file_number' or a similar consistently present field can be used to filter empty rows if necessary.
+            // For now, processing all records.
+            $fileRecordsIterator = $csv->getRecords();
+
+            $recordsReadFromFile = 0;
+            foreach ($fileRecordsIterator as $record) {
+                // Basic check for empty record, adjust if a specific key is more reliable
+                if (empty(array_filter($record))) continue;
+
+                $recordsChunk[] = $record;
+                $recordsReadFromFile++;
+
+                if (count($recordsChunk) >= self::MAX_RECORDS_IN_MEMORY_CHUNK) {
+                    $this->command->info("Processing a chunk of " . count($recordsChunk) . " records from " . basename($fileToProcessPath) . "...");
+                    $chunkStats = $this->processAndInsertRecordsChunk($recordsChunk);
+                    $grandTotalRecordsProcessed += $chunkStats['processed'];
+                    $grandTotalNotFoundCount += $chunkStats['notFound'];
+                    $recordsChunk = []; // Clear the chunk
+                    $this->command->info("Chunk processed. Total records processed so far: {$grandTotalRecordsProcessed}. Locations not found so far: {$grandTotalNotFoundCount}.");
+                }
+            }
+            $this->command->info("Finished reading {$recordsReadFromFile} records from " . basename($fileToProcessPath) . ".");
+
+        } catch (\Exception $e) {
+            $this->command->error("Error reading or preparing records from file: " . basename($fileToProcessPath) . " - " . $e->getMessage());
+        }
+        
+
+        // Process any remaining records in the last chunk
+        if (!empty($recordsChunk)) {
+            $this->command->info("Processing the final chunk of " . count($recordsChunk) . " records...");
+            $chunkStats = $this->processAndInsertRecordsChunk($recordsChunk);
+            $grandTotalRecordsProcessed += $chunkStats['processed'];
+            $grandTotalNotFoundCount += $chunkStats['notFound'];
+            $this->command->info("Final chunk processed.");
+        }
+
+        $this->command->info("Cambridge Crime Data Merge Seeder finished. Total records processed: {$grandTotalRecordsProcessed}. Total locations not found: {$grandTotalNotFoundCount}.");
+    }
+
+    private function loadAddressData(): void
+    {
+        $this->command->info("[Merge] Loading Cambridge address data into cache...");
+        $addresses = DB::table('cambridge_addresses')
+            ->select('street_number', 'stname', 'latitude', 'longitude')
+            ->whereNotNull('stname')
+            ->whereNotNull('latitude')
+            ->whereNotNull('longitude')
+            ->get();
+
+        foreach ($addresses as $address) {
+            $normalizedStName = strtolower($this->normalizeStreetName($address->stname));
+            if (empty($normalizedStName)) {
+                continue;
+            }
+            $streetNumberNumeric = intval($address->street_number);
+
+            $this->addressCache[$normalizedStName][] = [
+                'number' => $streetNumberNumeric,
+                'original_number' => $address->street_number,
+                'latitude' => (float)$address->latitude,
+                'longitude' => (float)$address->longitude,
+            ];
+        }
+
+        foreach ($this->addressCache as $streetName => $addressList) {
+            usort($this->addressCache[$streetName], function ($a, $b) {
+                return $a['number'] <=> $b['number'];
+            });
+        }
+        $this->command->info("[Merge] Finished loading " . count($addresses) . " addresses into cache, grouped by " . count($this->addressCache) . " unique street names.");
+    }
+
+    private function loadIntersectionData(): void
+    {
+        $this->command->info("[Merge] Loading Cambridge intersection data into cache...");
+        $intersections = DB::table('cambridge_intersections')
+            ->select('intersection', 'latitude', 'longitude')
+            ->whereNotNull('intersection')
+            ->whereNotNull('latitude')
+            ->whereNotNull('longitude')
+            ->get();
+
+        foreach ($intersections as $intersection) {
+            $this->intersectionCache[strtolower($intersection->intersection)] = [ // Assuming intersection name is already normalized and sorted in DB
+                'latitude' => (float)$intersection->latitude,
+                'longitude' => (float)$intersection->longitude,
+            ];
+        }
+        $this->command->info("[Merge] Finished loading " . count($intersections) . " intersections into cache.");
+    }
+
+
+    private function normalizeStreetName(string $streetName): string
+    {
+        $processedName = strtoupper(trim($streetName));
+        $processedName = preg_replace('/\s+/', ' ', $processedName); 
+        // Remove "THE " from the beginning
+        $processedName = preg_replace('/^THE\s+/', '', $processedName);
+
+        foreach (self::STREET_ABBREVIATIONS as $search => $replace) {
+            $processedName = preg_replace('/\b' . preg_quote($search, '/') . '\b/i', $replace, $processedName);
+        }
+        $processedName = rtrim($processedName, '.'); 
+        return trim($processedName);
+    }
+
+    private function normalizeAndLookupIntersection(string $intersectionQueryString): ?array
+    {
+        $this->command->comment("---> [Merge] Attempting Intersection Lookup for: '{$intersectionQueryString}'");
+        $logBuffer = [];
+
+        $parts = preg_split('/\s+&\s+|\s+AND\s+/i', $intersectionQueryString, 2, PREG_SPLIT_NO_EMPTY);
+
+        if (count($parts) !== 2) {
+            $logBuffer[] = "     [Merge] Could not parse '{$intersectionQueryString}' into two distinct street names.";
+            // $this->command->warn(implode("\n", $logBuffer)); // Can be too verbose
+            return null;
+        }
+        $street1_original = trim($parts[0]);
+        $street2_original = trim($parts[1]);
+        $street1_processed = $this->normalizeStreetName($street1_original);
+        $street2_processed = $this->normalizeStreetName($street2_original);
+
+        $streetsForPrimaryLookup = [$street1_processed, $street2_processed];
+        sort($streetsForPrimaryLookup, SORT_STRING | SORT_FLAG_CASE); 
+        $primaryLookupString = strtolower($streetsForPrimaryLookup[0] . ' & ' . $streetsForPrimaryLookup[1]);
+        
+        if (isset($this->intersectionCache[$primaryLookupString])) {
+            // $this->command->info("     [Merge] SUCCESS (Primary Cache Match): '{$intersectionQueryString}' found as '{$primaryLookupString}'.");
+            return $this->intersectionCache[$primaryLookupString];
+        }
+        $logBuffer[] = "     [Merge] Primary cache lookup FAILED for '{$primaryLookupString}'.";
+        
+        $secondaryLookupString = strtolower($streetsForPrimaryLookup[1] . ' & ' . $streetsForPrimaryLookup[0]);
+        if ($primaryLookupString !== $secondaryLookupString && isset($this->intersectionCache[$secondaryLookupString])) {
+            // $this->command->info("     [Merge] SUCCESS (Secondary Cache Match - swapped): '{$intersectionQueryString}' found as '{$secondaryLookupString}'.");
+            return $this->intersectionCache[$secondaryLookupString];
+        }
+        if ($primaryLookupString !== $secondaryLookupString) {
+            $logBuffer[] = "     [Merge] Secondary cache lookup FAILED for '{$secondaryLookupString}'.";
+        }
+
+        if (!empty($street1_processed)) {
+            $cachedAddressesStreet1 = $this->addressCache[strtolower($street1_processed)] ?? [];
+            if (!empty($cachedAddressesStreet1)) {
+                $addressStreet1 = $cachedAddressesStreet1[0]; // Lowest address
+                // $this->command->info("     [Merge] SUCCESS (Street 1 Fallback - Cache): Used lowest address on '{$street1_processed}'.");
+                return ['latitude' => $addressStreet1['latitude'], 'longitude' => $addressStreet1['longitude']];
+            }
+            $logBuffer[] = "     [Merge] Street 1 fallback (Cache) FAILED for '{$street1_processed}'.";
+        }
+
+        if (!empty($street2_processed)) {
+            $cachedAddressesStreet2 = $this->addressCache[strtolower($street2_processed)] ?? [];
+            if (!empty($cachedAddressesStreet2)) {
+                $addressStreet2 = $cachedAddressesStreet2[0]; // Lowest address
+                // $this->command->info("     [Merge] SUCCESS (Street 2 Fallback - Cache): Used lowest address on '{$street2_processed}'.");
+                return ['latitude' => $addressStreet2['latitude'], 'longitude' => $addressStreet2['longitude']];
+            }
+            $logBuffer[] = "     [Merge] Street 2 fallback (Cache) FAILED for '{$street2_processed}'.";
+        }
+        
+        // $this->command->warn(implode("\n", $logBuffer)); // Can be too verbose
+        // $this->command->warn("     [Merge] All intersection lookup strategies FAILED for '{$intersectionQueryString}'.");
+        return null;
+    }
+
+    private function parseCrimeLocationAddress(string $locationString): ?array
+    {
+        // Regex to capture number and street part, handles "BLOCK" prefix/suffix.
+        if (preg_match('/^(\d+[A-Z]?(-\d+[A-Z]?)?(\s+BLOCK)?)\s+(.*)$/i', $locationString, $matches) ||
+            preg_match('/^(BLOCK\s+\d+[A-Z]?(-\d+[A-Z]?)?)\s+(.*)$/i', $locationString, $matches) || 
+            preg_match('/^(\d+[A-Z]?(-\d+[A-Z]?)?)\s+(.*)$/i', $locationString, $matches)
+           ) {
+            $numberPart = trim($matches[1]); 
+            $rawStreetNamePart = trim(end($matches)); 
+
+            $numericStreetNumberToMatch = intval(preg_replace('/(\s*BLOCK\s*)/i', '', $numberPart));
+            $normalizedStreetName = $this->normalizeStreetName($rawStreetNamePart);
+            
+            if (!empty($normalizedStreetName)) { 
+                return [
+                    'number' => $numericStreetNumberToMatch, 
+                    'name' => $normalizedStreetName,         
+                    'original_number_part' => $numberPart   
+                ];
+            }
+        }
+        // $this->command->comment(" -> [Merge] Could not parse address: '{$locationString}' into number and street."); // Can be too verbose
+        return null;
+    }
+    
+    private function parseReportDate($dateString) // New method for 'date_of_report'
+    {
+        $dateString = trim($dateString);
+        if (!$dateString) return null;
+        try {
+            // Assuming date_of_report is also in 'm/d/Y H:i' or a format Carbon can parse
+            // If it's just a date, Carbon::parse should handle it.
+            // If it has a specific format like "YYYY-MM-DDTHH:MM:SS.mmm", adjust accordingly.
+            // For "01/20/2009" style dates from CSV, Carbon::parse might be okay,
+            // but createFromFormat might be safer if format is fixed.
+            // Let's assume it's a date that Carbon can parse directly or 'm/d/Y'
+            if (preg_match('/^\d{1,2}\/\d{1,2}\/\d{4}$/', $dateString)) { // Matches m/d/Y
+                return Carbon::createFromFormat('m/d/Y', $dateString)->startOfDay();
+            }
+            return Carbon::parse($dateString);
+        } catch (\Exception $e) {
+            $this->command->warn("[Merge] Could not parse report date: {$dateString}");
+            return null;
+        }
+    }
+
+    private function parseCrimeTimestamp($timeString) // Renamed from parseCrimeTime for clarity
+    {
+        $timeString = trim($timeString);
+        if (!$timeString) return null;
+        try {
+            // Expected format "m/d/Y H:i", e.g., "01/18/2009 22:00"
+            return Carbon::createFromFormat('m/d/Y H:i', $timeString)->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            // Log the problematic string along with the warning
+            $this->command->warn("[Merge] Could not parse crime timestamp: '{$timeString}'. Error: " . $e->getMessage());
+            return null;
+        }
+    }
+
+    private function processAndInsertRecordsChunk(array $rawCsvRecords): array
+    {
+        $dataBatch = [];
+        $recordsProcessedInChunk = 0;
+        $notFoundInChunk = 0;
+        $currentRecordIndexInChunk = 0;
+
+        foreach ($rawCsvRecords as $record) {
+            $currentRecordIndexInChunk++;
+            $recordsProcessedInChunk++;
+
+            $reportDateCarbon = $this->parseReportDate($record['date_of_report'] ?? null);
+            $occurred_on_date_main = $reportDateCarbon ? $reportDateCarbon->format('Y-m-d H:i:s') : null;
+
+            $timeField = trim($record['crime_date_time'] ?? '');
+            $crime_start_val = null;
+            $crime_end_val = null; 
+
+            if (strpos($timeField, ' - ') !== false) {
+                [$startPart, $endPart] = array_map('trim', explode(' - ', $timeField, 2));
+                $crime_start_val = $this->parseCrimeTimestamp($startPart);
+                if ($crime_start_val && !empty($endPart)) {
+                    if (strpos($endPart, '/') === false && preg_match('/^\d{1,2}:\d{2}$/', $endPart)) {
+                        $startDateComponent = '';
+                        if (preg_match('/^(\d{1,2}\/\d{1,2}\/\d{4})\s/', $startPart, $dateMatches)) {
+                            $startDateComponent = $dateMatches[1];
+                        }
+                        if (!empty($startDateComponent)) {
+                            $fullEndPart = $startDateComponent . ' ' . $endPart;
+                            $crime_end_val = $this->parseCrimeTimestamp($fullEndPart);
+                        } else {
+                            $crime_end_val = null;
+                        }
+                    } else {
+                        $crime_end_val = $this->parseCrimeTimestamp($endPart);
+                    }
+                } else if (empty($endPart) && $crime_start_val) {
+                    $crime_end_val = $crime_start_val;
+                }
+            } else if (!empty($timeField)) {
+                $crime_start_val = $this->parseCrimeTimestamp($timeField);
+                $crime_end_val = $crime_start_val; 
+            }
+            
+            $raw_location = trim($record['location'] ?? '');
+            $coords = ['latitude' => null, 'longitude' => null];
+            $street_for_db = null;
+            
+            if (!empty($raw_location)) {
+                $location_for_db_lookup = preg_replace('/, Cambridge, MA$/i', '', $raw_location);
+                $location_for_db_lookup = trim($location_for_db_lookup);
+
+                if (strpos($location_for_db_lookup, '&') !== false || stripos($location_for_db_lookup, ' AND ') !== false) {
+                    $normalized_coords = $this->normalizeAndLookupIntersection($location_for_db_lookup);
+                    if ($normalized_coords) {
+                        $coords = $normalized_coords;
+                    }
+                    $street_for_db = $this->normalizeStreetName($location_for_db_lookup); // Normalize the intersection string itself
+                } else {
+                    $parsedAddressInfo = $this->parseCrimeLocationAddress($location_for_db_lookup);
+                    if ($parsedAddressInfo) {
+                        $crimeStreetNumber = $parsedAddressInfo['number'];
+                        $crimeStreetName = $parsedAddressInfo['name'];
+                        $street_for_db = $crimeStreetName;
+
+                        $cachedAddressesOnStreet = $this->addressCache[strtolower($crimeStreetName)] ?? [];
+                        if (!empty($cachedAddressesOnStreet)) {
+                            $closestMatch = null; $minDifference = PHP_INT_MAX;
+                            foreach ($cachedAddressesOnStreet as $cachedAddr) {
+                                if ($cachedAddr['number'] >= 0) { // Allow 0 for block addresses
+                                    $difference = abs($crimeStreetNumber - $cachedAddr['number']);
+                                    if ($difference < $minDifference) {
+                                        $minDifference = $difference; $closestMatch = $cachedAddr;
+                                    } elseif ($difference === $minDifference && $closestMatch && $cachedAddr['number'] < $closestMatch['number']) {
+                                        $closestMatch = $cachedAddr;
+                                    }
+                                }
+                            }
+                            if ($closestMatch) {
+                                 $coords = ['latitude' => $closestMatch['latitude'], 'longitude' => $closestMatch['longitude']];
+                            }
+                        }
+                    }
+                    // Fallback if address parsing failed or no match, try lowest address on street
+                    if (empty($coords['latitude']) && $parsedAddressInfo && !empty($parsedAddressInfo['name'])) {
+                        $cachedStreetAddresses = $this->addressCache[strtolower($parsedAddressInfo['name'])] ?? [];
+                        if (!empty($cachedStreetAddresses)) {
+                            $lowestAddress = $cachedStreetAddresses[0]; // Cache is sorted
+                            $coords = ['latitude' => $lowestAddress['latitude'], 'longitude' => $lowestAddress['longitude']];
+                            // $this->command->comment(" -> [Merge] Fallback to lowest address on street '{$parsedAddressInfo['name']}'.");
+                        }
+                    }
+                }
+                if (empty($coords['latitude'])) {
+                    $notFoundInChunk++;
+                }
+            } else {
+                $notFoundInChunk++;
+            }
+
+            $incident_number = 'CAM-' . ($record['file_number'] ?? ('UNKNOWN-' . ($grandTotalRecordsProcessed + $recordsProcessedInChunk))); // Ensure more unique unknown ID
+
+            $dataBatch[] = [
+                'incident_number'     => $incident_number,
+                'offense_code'        => null,
+                'offense_code_group'  => null,
+                'offense_description' => $record['crime'] ?? null,
+                'district'            => $record['reporting_area'] ?? null, 
+                'reporting_area'      => $record['reporting_area'] ?? null,
+                'shooting'            => false,
+                'occurred_on_date'    => $occurred_on_date_main,
+                'year'                => $reportDateCarbon ? $reportDateCarbon->year : null,
+                'month'               => $reportDateCarbon ? $reportDateCarbon->month : null,
+                'day_of_week'         => $reportDateCarbon ? $reportDateCarbon->format('l') : null,
+                'hour'                => $reportDateCarbon ? $reportDateCarbon->hour : null,
+                'ucr_part'            => null,
+                'street'              => $street_for_db,
+                'lat'                 => $coords['latitude'] ? round((float)$coords['latitude'], 7) : null,
+                'long'                => $coords['longitude'] ? round((float)$coords['longitude'], 7) : null,
+                'location'            => $raw_location,
+                'crime_start_time'    => $crime_start_val,
+                'crime_end_time'      => $crime_end_val,
+                'crime_details'       => null, // This seeder does not have 'crime_details' from source
+                'created_at'          => now(),
+                'updated_at'          => now(),
+            ];
+
+            if (count($dataBatch) >= self::BATCH_SIZE) {
+                $this->insertOrUpdateBatch($dataBatch);
+                $this->command->info("... [Merge] upserted " . count($dataBatch) . " records to DB (processed {$currentRecordIndexInChunk}/" . count($rawCsvRecords) . " in current chunk) ...");
+                $dataBatch = [];
+            }
+        }
+
+        if (!empty($dataBatch)) {
+            $this->insertOrUpdateBatch($dataBatch);
+            $this->command->info("... [Merge] upserted final " . count($dataBatch) . " records to DB for this chunk ...");
+        }
+        
+        return ['processed' => $recordsProcessedInChunk, 'notFound' => $notFoundInChunk];
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        if (empty($dataBatch)) return;
+
+        $updateColumns = [
+            'offense_code', 'offense_code_group', 'offense_description', 'district', 
+            'reporting_area', 'shooting', 'occurred_on_date', 'year', 'month', 
+            'day_of_week', 'hour', 'ucr_part', 'street', 'lat', 'long', 'location', 
+            'crime_start_time', 'crime_end_time', // Add new columns here
+            'updated_at'
+        ];
+
+        DB::table('crime_data')->upsert(
+            $dataBatch,
+            ['incident_number'],
+            $updateColumns
+        );
+    }
+}
diff --git a/database/seeders/CambridgeFoodInspectionSeeder.php b/database/seeders/CambridgeFoodInspectionSeeder.php
new file mode 100644
index 0000000..ced1853
--- /dev/null
+++ b/database/seeders/CambridgeFoodInspectionSeeder.php
@@ -0,0 +1,151 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\FoodInspection;
+use League\Csv\Reader;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+
+class CambridgeFoodInspectionSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+
+    public function run()
+    {
+        $datasetName = 'cambridge-sanitary-inspections';
+        $citySubdirectory = 'cambridge';
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        if (!empty($datasetFiles)) {
+            sort($datasetFiles);
+            $fileToProcess = end($datasetFiles);
+            $this->command->info("Processing Cambridge sanitary inspections file: " . $fileToProcess);
+            $this->processFile(Storage::path($fileToProcess));
+        } else {
+            $this->command->warn("No files found for Cambridge sanitary inspections.");
+        }
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+            $records = $csv->getRecords();
+            $dataBatch = [];
+            $progress = 0;
+
+            foreach ($records as $record) {
+                $progress++;
+                $point = $record['geocoded_column'] ?? '';
+                list($latitude, $longitude) = $this->parsePoint($point);
+
+                //calculate status based on if there's a date_corrected
+                $violationStatus = null;
+                if (!empty($record['date_corrected'])) {
+                    $violationStatus = 'Pass';
+                } else {
+                    $violationStatus = 'Fail';
+                }
+
+                $comments = $record['inspector_comments'] ?? null;
+                //if the date corrected is set add a " corrected on" to the comments
+                if (!empty($record['date_corrected'])) {
+                    $comments .= " Corrected on: " . $this->formatDate($record['date_corrected']);
+                }
+                
+                $dataBatch[] = [
+                    'external_id'    => $record['case_number'] ?? null,
+                    'businessname'   => $record['establishment_name'] ?? null,
+                    'licenseno'      => $record['code_number'] ?? null,
+                    'descript'       => $record['code_description'] ?? null,
+                    'comments'       => $comments,
+                    'issdttm'        => $this->formatDate($record['case_open_date']),
+                    'expdttm'        => $this->formatDate($record['case_closed_date']),
+                    'resultdttm'     => $this->formatDate($record['case_open_date']), // updated: opendate goes to resultdttm
+                    'status_date'    => $this->formatDate($record['date_corrected']),  // updated: date_corrected goes to status_date
+                    'licstatus'      => $record['code_case_status'] ?? null,
+                    'address'        => $record['address'] ?? null,
+                    'property_id'    => $record['parcel'] ?? null,
+                    'latitude'       => $latitude,
+                    'longitude'      => $longitude,
+                    'violation'      => $record['code_description'] ?? null, // repeated field for viol mapping
+                    'viol_level'     => $record['code_number'] ?? null,        // repeated field for viol mapping
+                    'violdesc'       => $record['code_description'] ?? null,   // repeated field for viol mapping
+                    'violdttm'       => $this->formatDate($record['date_cited']),  // updated: date_cited goes to violdttm
+                    'viol_status'    => $violationStatus,
+                    'city'           => 'Cambridge',
+                    'state'          => 'MA',
+                    'zip'            => null,
+                    'language_code'  => 'en-US',
+                    'created_at'     => now(),
+                    'updated_at'     => now(),
+                    // ...other columns remain null...
+                ];
+
+                if ($progress % self::BATCH_SIZE === 0) {
+                    $this->insertOrUpdateBatch($dataBatch);
+                    $dataBatch = [];
+                    $this->command->info("Processed {$progress} records...");
+                }
+            }
+
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+            }
+            $this->command->info("File processed successfully: " . basename($filePath));
+        } catch (\Exception $e) {
+            $this->command->error("Error processing file: " . basename($filePath) . " - " . $e->getMessage());
+        }
+    }
+
+    private function formatDate($dateString)
+    {
+        if (empty($dateString)) {
+            return null;
+        }
+        try {
+            return Carbon::parse($dateString)->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            $this->command->warn("Could not parse date: {$dateString}");
+            return null;
+        }
+    }
+
+    private function parsePoint(string $point)
+    {
+        // Expected format: "POINT (longitude latitude)"
+        if (preg_match('/POINT\s*\(\s*([-\d\.]+)\s+([-\d\.]+)\s*\)/', $point, $matches)) {
+            // Note: CSV uses POINT(lon lat); assign accordingly.
+            return [(float)$matches[2], (float)$matches[1]]; // [latitude, longitude]
+        }
+        return [null, null];
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        $validBatch = array_filter($dataBatch, fn($item) => !empty($item['external_id']));
+        if (empty($validBatch)) {
+            return;
+        }
+        $updateColumns = array_keys($validBatch[0]);
+        // Remove 'external_id' and 'created_at' from update columns.
+        $updateColumns = array_filter($updateColumns, function ($col) {
+            return !in_array($col, ['external_id', 'created_at']);
+        });
+
+        DB::table((new FoodInspection)->getTable())->upsert(
+            $validBatch,
+            ['external_id'],
+            array_values($updateColumns)
+        );
+    }
+}
diff --git a/database/seeders/CambridgeIntersectionsSeeder.php b/database/seeders/CambridgeIntersectionsSeeder.php
new file mode 100644
index 0000000..ce19c31
--- /dev/null
+++ b/database/seeders/CambridgeIntersectionsSeeder.php
@@ -0,0 +1,106 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use League\Csv\Reader;
+
+class CambridgeIntersectionsSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+
+    public function run()
+    {
+        $datasetName = 'cambridge-master-intersections-list';
+        $citySubdirectory = 'cambridge';
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+        
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+        
+        if (!empty($datasetFiles)) {
+            sort($datasetFiles);
+            $fileToProcess = end($datasetFiles);
+            $this->command->info("Processing Cambridge intersections file: " . $fileToProcess);
+            $this->processFile(Storage::path($fileToProcess));
+        } else {
+            $this->command->warn("No file found for Cambridge intersections.");
+        }
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+            $records = $csv->getRecords();
+            $dataBatch = [];
+            $progress = 0;
+            
+            foreach ($records as $record) {
+                $progress++;
+                $dataBatch[] = [
+                    'nodenumber'                 => $record['nodenumber'] ?? null,
+                    'intersection'               => $record['intersection'] ?? null,
+                    'intersectingstreetcount'    => isset($record['intersectingstreetcount']) ? (int)$record['intersectingstreetcount'] : null,
+                    'zip_code'                   => $record['zip_code'] ?? null,
+                    'longitude'                  => is_numeric($record['longitude'] ?? null) ? (float)$record['longitude'] : null,
+                    'latitude'                   => is_numeric($record['latitude'] ?? null) ? (float)$record['latitude'] : null,
+                    'neighborhood'               => $record['neighborhood'] ?? null,
+                    'election_ward'              => $record['election_ward'] ?? null,
+                    'election_precinct'          => $record['election_precinct'] ?? null,
+                    'election_polling_address'   => $record['election_polling_address'] ?? null,
+                    'representation_district'    => $record['representation_district'] ?? null,
+                    'senate_district'            => $record['senate_district'] ?? null,
+                    'cad_reporting_district'     => $record['cad_reporting_district'] ?? null,
+                    'police_sector'              => $record['police_sector'] ?? null,
+                    'police_car_route'           => $record['police_car_route'] ?? null,
+                    'police_walking_route'       => $record['police_walking_route'] ?? null,
+                    'police_neighborhood'        => $record['police_neighborhood'] ?? null,
+                    'police_business_district'   => $record['police_business_district'] ?? null,
+                    'street_sweeping_district'   => $record['street_sweeping_district'] ?? null,
+                    'census_tract_2010'          => $record['census_tract_2010'] ?? null,
+                    'census_block_group_2010'    => $record['census_block_group_2010'] ?? null,
+                    'census_block_2010'          => $record['census_block_2010'] ?? null,
+                    'census_block_id_2010'       => $record['census_block_id_2010'] ?? null,
+                    'commercial_district'        => $record['commercial_district'] ?? null,
+                    'census_tract_2020'          => $record['census_tract_2020'] ?? null,
+                    'census_block_group_2020'    => $record['census_block_group_2020'] ?? null,
+                    'census_block_2020'          => $record['census_block_2020'] ?? null,
+                    'census_block_id_2020'       => $record['census_block_id_2020'] ?? null,
+                    'created_at'                 => now(),
+                    'updated_at'                 => now(),
+                ];
+                if ($progress % self::BATCH_SIZE === 0) {
+                    $this->insertOrUpdateBatch($dataBatch);
+                    $dataBatch = [];
+                    $this->command->info("Processed {$progress} records...");
+                }
+            }
+            
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+            }
+            $this->command->info("File processed: " . basename($filePath));
+        } catch (\Exception $e) {
+            $this->command->error("Error processing file (intersections): " . basename($filePath) . " - " . $e->getMessage());
+        }
+    }
+    
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        $validBatch = array_filter($dataBatch, fn($item) => !empty($item['nodenumber']));
+        if (empty($validBatch)) {
+            return;
+        }
+        DB::table('cambridge_intersections')->upsert(
+            $validBatch,
+            ['nodenumber'],
+            array_keys($validBatch[0])
+        );
+    }
+}
diff --git a/database/seeders/CambridgePoliceLogSeeder.php b/database/seeders/CambridgePoliceLogSeeder.php
new file mode 100644
index 0000000..d0f27e6
--- /dev/null
+++ b/database/seeders/CambridgePoliceLogSeeder.php
@@ -0,0 +1,460 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+use League\Csv\Reader;
+use League\Csv\Statement;
+
+class CambridgePoliceLogSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500; // For DB upserts
+    private const MAX_RECORDS_IN_MEMORY_CHUNK = 10000; // For accumulating raw CSV records before processing
+    private const STREET_ABBREVIATIONS = [
+        'MOUNT' => 'MT',
+        'SAINT' => 'ST',
+        'ACORN PK' => 'ACORN PARK DR',
+        'GALILEO GALILEI' => 'GALILEI',
+        'CAMBRIDGE CTR' => 'BROADWAY',
+        'STREET NORTH'  => 'ST N',
+        'HAWTHORNE' => 'HAWTHORN',
+        /*
+        'STREET' => 'ST',
+        'AVENUE' => 'AVE',
+        'ROAD' => 'RD',
+        'DRIVE' => 'DR',
+        'PLACE' => 'PL',
+        'COURT' => 'CT',
+        'LANE' => 'LN',
+        'BOULEVARD' => 'BLVD',
+        'PARKWAY' => 'PKWY',
+        'SQUARE' => 'SQ',
+        'TERRACE' => 'TER',
+        'HIGHWAY' => 'HWY',
+        'CIRCLE' => 'CIR',
+        'ALLEY' => 'ALY',
+        'EXPRESSWAY' => 'EXPY',
+        'FREEWAY' => 'FWY',
+        'JUNCTION' => 'JCT',
+        'POINT' => 'PT',
+        'TRAIL' => 'TRL',
+        'TURNPIKE' => 'TPKE',
+        'WAY' => 'WY',
+        'CENTER' => 'CTR', */
+    ];
+
+    private array $addressCache = [];
+    private array $intersectionCache = [];
+
+    public function run(): void
+    {
+        $this->command->info("Starting Cambridge Police Log Seeder...");
+        
+        $this->loadAddressData();
+        $this->loadIntersectionData();
+
+        $logDirectory = 'datasets/cambridge/logs';
+        $files = Storage::disk('local')->files($logDirectory);
+
+        $csvFiles = array_filter($files, function ($file) {
+            return pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        if (empty($csvFiles)) {
+            $this->command->warn("No CSV files found in {$logDirectory}.");
+            return;
+        }
+
+        $this->command->info("Found " . count($csvFiles) . " CSV files to process in {$logDirectory}.");
+
+        $recordsChunk = [];
+        $grandTotalRecordsProcessed = 0;
+        $grandTotalNotFoundCount = 0;
+        $fileCount = 0;
+
+        foreach ($csvFiles as $filePath) {
+            $fileCount++;
+            $this->command->info("Reading file #{$fileCount}/" . count($csvFiles) . ": " . basename($filePath));
+            
+            try {
+                $csv = Reader::createFromPath(Storage::path($filePath), 'r');
+                $csv->setHeaderOffset(0);
+                $csv->setEscape('');
+                
+                $stmt = Statement::create()->where(fn (array $record) => !empty($record['file_number']));
+                $fileRecordsIterator = $stmt->process($csv);
+
+                $recordsReadFromFile = 0;
+                foreach ($fileRecordsIterator as $record) {
+                    $recordsChunk[] = $record;
+                    $recordsReadFromFile++;
+
+                    if (count($recordsChunk) >= self::MAX_RECORDS_IN_MEMORY_CHUNK) {
+                        $this->command->info("Processing a chunk of " . count($recordsChunk) . " records...");
+                        $chunkStats = $this->processAndInsertRecordsChunk($recordsChunk);
+                        $grandTotalRecordsProcessed += $chunkStats['processed'];
+                        $grandTotalNotFoundCount += $chunkStats['notFound'];
+                        $recordsChunk = []; // Clear the chunk
+                        $this->command->info("Chunk processed. Grand total records processed so far: {$grandTotalRecordsProcessed}. Locations not found so far: {$grandTotalNotFoundCount}.");
+                    }
+                }
+                $this->command->info("Finished reading {$recordsReadFromFile} records from " . basename($filePath) . ".");
+
+            } catch (\Exception $e) {
+                $this->command->error("Error reading or preparing records from file: " . basename($filePath) . " - " . $e->getMessage());
+                // Optionally skip this file or halt; here, we continue with the next file.
+            }
+        }
+
+        // Process any remaining records in the last chunk
+        if (!empty($recordsChunk)) {
+            $this->command->info("Processing the final chunk of " . count($recordsChunk) . " records...");
+            $chunkStats = $this->processAndInsertRecordsChunk($recordsChunk);
+            $grandTotalRecordsProcessed += $chunkStats['processed'];
+            $grandTotalNotFoundCount += $chunkStats['notFound'];
+            $this->command->info("Final chunk processed.");
+        }
+
+        $this->command->info("Cambridge Police Log Seeder finished. Total records processed: {$grandTotalRecordsProcessed}. Total locations not found: {$grandTotalNotFoundCount}.");
+    }
+
+    private function processAndInsertRecordsChunk(array $rawCsvRecords): array
+    {
+        $dataBatch = [];
+        $recordsProcessedInChunk = 0;
+        $notFoundInChunk = 0;
+        $currentRecordIndexInChunk = 0;
+
+        foreach ($rawCsvRecords as $record) {
+            $currentRecordIndexInChunk++;
+            $recordsProcessedInChunk++;
+
+            $crimeDateTimeStr = trim($record['crime_date_time'] ?? '');
+            $crimeDateTimeCarbon = $this->parseCrimeTimestamp($crimeDateTimeStr);
+
+            $occurred_on_date_main = null;
+            $year = null;
+            $month = null;
+            $day_of_week = null;
+            $hour = null;
+            $crime_start_val = null;
+            $crime_end_val = null;
+
+            if ($crimeDateTimeCarbon) {
+                $occurred_on_date_main = $crimeDateTimeCarbon->format('Y-m-d H:i:s');
+                $year = $crimeDateTimeCarbon->year;
+                $month = $crimeDateTimeCarbon->month;
+                $day_of_week = $crimeDateTimeCarbon->format('l');
+                $hour = $crimeDateTimeCarbon->hour;
+                $crime_start_val = $occurred_on_date_main;
+                $crime_end_val = $occurred_on_date_main;
+            } else {
+                 // Warning already logged by parseCrimeTimestamp if needed
+            }
+            
+            $raw_location = trim($record['location'] ?? '');
+            $coords = ['latitude' => null, 'longitude' => null];
+            $street_for_db = null;
+
+            if (!empty($raw_location)) {
+                if (strpos($raw_location, '&') !== false || stripos($raw_location, ' AND ') !== false) {
+                    $normalized_coords = $this->normalizeAndLookupIntersection($raw_location);
+                    if ($normalized_coords) {
+                        $coords = $normalized_coords;
+                    }
+                    $street_for_db = $this->normalizeStreetName($raw_location);
+                } else {
+                    $parsedAddressInfo = $this->parseCrimeLocationAddress($raw_location);
+                    if ($parsedAddressInfo) {
+                        $crimeStreetNumber = $parsedAddressInfo['number'];
+                        $crimeStreetName = $parsedAddressInfo['name'];
+                        $street_for_db = $crimeStreetName;
+                        $cachedAddressesOnStreet = $this->addressCache[strtolower($crimeStreetName)] ?? [];
+                        if (!empty($cachedAddressesOnStreet)) {
+                            $closestMatch = null; $minDifference = PHP_INT_MAX;
+                            foreach ($cachedAddressesOnStreet as $cachedAddr) {
+                                if ($cachedAddr['number'] > 0) {
+                                    $difference = abs($crimeStreetNumber - $cachedAddr['number']);
+                                    if ($difference < $minDifference) {
+                                        $minDifference = $difference; $closestMatch = $cachedAddr;
+                                    } elseif ($difference === $minDifference && $closestMatch && $cachedAddr['number'] < $closestMatch['number']) {
+                                        $closestMatch = $cachedAddr;
+                                    }
+                                }
+                            }
+                            if ($closestMatch) {
+                                 $coords = ['latitude' => $closestMatch['latitude'], 'longitude' => $closestMatch['longitude']];
+                            }
+                        }
+                    }
+                    if (empty($coords['latitude'])) {
+                        if ($parsedAddressInfo && !empty($parsedAddressInfo['name'])) {
+                            $cachedStreetAddresses = $this->addressCache[strtolower($parsedAddressInfo['name'])] ?? [];
+                            if (!empty($cachedStreetAddresses)) {
+                                $lowestAddress = $cachedStreetAddresses[0];
+                                $coords = ['latitude' => $lowestAddress['latitude'], 'longitude' => $lowestAddress['longitude']];
+                            }
+                        }
+                    }
+                }
+                if (empty($coords['latitude'])) {
+                    $notFoundInChunk++;
+                    // $this->command->warn(" -> Location '{$raw_location}' NOT FOUND for file_number '{$record['file_number']}'."); // Too verbose here
+                }
+            } else {
+                $notFoundInChunk++;
+                // $this->command->warn(" -> Empty location field for file_number '{$record['file_number']}'."); // Too verbose here
+            }
+
+            $incident_number = 'CPL-' . ($record['file_number'] ?? ('UNKNOWN-' . $recordsProcessedInChunk));
+            $offense_description_raw = $record['crime'] ?? null;
+            $offense_description_decoded = $offense_description_raw ? html_entity_decode($offense_description_raw, ENT_QUOTES | ENT_HTML5, 'UTF-8') : null;
+
+            $dataBatch[] = [
+                'incident_number'     => $incident_number,
+                'offense_code'        => null,
+                'offense_code_group'  => null,
+                'offense_description' => $offense_description_decoded,
+                'district'            => null,
+                'reporting_area'      => null,
+                'shooting'            => false,
+                'occurred_on_date'    => $occurred_on_date_main,
+                'year'                => $year,
+                'month'               => $month,
+                'day_of_week'         => $day_of_week,
+                'hour'                => $hour,
+                'ucr_part'            => null,
+                'street'              => $street_for_db,
+                'lat'                 => $coords['latitude'] ? round((float)$coords['latitude'], 7) : null,
+                'long'                => $coords['longitude'] ? round((float)$coords['longitude'], 7) : null,
+                'location'            => $raw_location,
+                'crime_start_time'    => $crime_start_val,
+                'crime_end_time'      => $crime_end_val,
+                'crime_details'       => trim($record['crime_details'] ?? null),
+                'created_at'          => now(),
+                'updated_at'          => now(),
+            ];
+
+            if (count($dataBatch) >= self::BATCH_SIZE) {
+                $this->insertOrUpdateBatch($dataBatch);
+                $this->command->info("... upserted " . count($dataBatch) . " records to DB (processed {$currentRecordIndexInChunk}/" . count($rawCsvRecords) . " in current chunk) ...");
+                $dataBatch = [];
+            }
+        }
+
+        if (!empty($dataBatch)) {
+            $this->insertOrUpdateBatch($dataBatch);
+            $this->command->info("... upserted final " . count($dataBatch) . " records to DB for this chunk ...");
+        }
+        
+        return ['processed' => $recordsProcessedInChunk, 'notFound' => $notFoundInChunk];
+    }
+
+    private function loadAddressData(): void
+    {
+        $this->command->info("Loading Cambridge address data into cache...");
+        $addresses = DB::table('cambridge_addresses')
+            ->select('street_number', 'stname', 'latitude', 'longitude')
+            ->whereNotNull('stname')
+            ->whereNotNull('latitude')
+            ->whereNotNull('longitude')
+            ->get();
+
+        foreach ($addresses as $address) {
+            $normalizedStName = strtolower($this->normalizeStreetName($address->stname));
+            if (empty($normalizedStName)) {
+                continue;
+            }
+            $streetNumberNumeric = intval($address->street_number); // Handles numeric and alphanumeric like "1A"
+
+            $this->addressCache[$normalizedStName][] = [
+                'number' => $streetNumberNumeric, // Store the numeric part for comparison
+                'original_number' => $address->street_number, // Keep original for reference if needed
+                'latitude' => (float)$address->latitude,
+                'longitude' => (float)$address->longitude,
+            ];
+        }
+
+        // Sort addresses by street number for efficient searching
+        foreach ($this->addressCache as $streetName => $addressList) {
+            usort($this->addressCache[$streetName], function ($a, $b) {
+                return $a['number'] <=> $b['number'];
+            });
+        }
+        $this->command->info("Finished loading " . count($addresses) . " addresses into cache, grouped by " . count($this->addressCache) . " unique street names.");
+    }
+
+    private function loadIntersectionData(): void
+    {
+        $this->command->info("Loading Cambridge intersection data into cache...");
+        $intersections = DB::table('cambridge_intersections')
+            ->select('intersection', 'latitude', 'longitude')
+            ->whereNotNull('intersection')
+            ->whereNotNull('latitude')
+            ->whereNotNull('longitude')
+            ->get();
+
+        foreach ($intersections as $intersection) {
+            // The intersection name in the DB should already be normalized (e.g., StreetA & StreetB, sorted alphabetically)
+            // If not, normalization (splitting, sorting, rejoining) would be needed here.
+            // Assuming 'intersection' column is already in 'StreetA & StreetB' format, sorted alphabetically.
+            $this->intersectionCache[strtolower($intersection->intersection)] = [
+                'latitude' => (float)$intersection->latitude,
+                'longitude' => (float)$intersection->longitude,
+            ];
+        }
+        $this->command->info("Finished loading " . count($intersections) . " intersections into cache.");
+    }
+
+    private function normalizeStreetName(string $streetName): string
+    {
+        $processedName = strtoupper(trim($streetName));
+        // Replace multiple spaces with a single space
+        $processedName = preg_replace('/\s+/', ' ', $processedName);
+        // Remove "THE " from the beginning of street names if it exists
+        $processedName = preg_replace('/^THE\s+/', '', $processedName);
+
+        foreach (self::STREET_ABBREVIATIONS as $search => $replace) {
+            // Use word boundaries to avoid partial replacements (e.g., 'AVENUE' in 'RAVENSWOOD AVENUE')
+            $processedName = preg_replace('/\b' . preg_quote($search, '/') . '\b/i', $replace, $processedName);
+        }
+        // Remove trailing periods
+        $processedName = rtrim($processedName, '.');
+        return trim($processedName);
+    }
+    
+    private function normalizeAndLookupIntersection(string $intersectionQueryString): ?array
+    {
+        $this->command->comment("---> Attempting Intersection Lookup for: '{$intersectionQueryString}'");
+        $logBuffer = [];
+
+        $parts = preg_split('/\s+&\s+|\s+AND\s+/i', $intersectionQueryString, 2, PREG_SPLIT_NO_EMPTY);
+
+        if (count($parts) !== 2) {
+            $logBuffer[] = "     Could not parse '{$intersectionQueryString}' into two distinct street names.";
+            $this->command->warn(implode("\n", $logBuffer));
+            return null;
+        }
+        $street1_original = trim($parts[0]);
+        $street2_original = trim($parts[1]);
+        $street1_processed = $this->normalizeStreetName($street1_original);
+        $street2_processed = $this->normalizeStreetName($street2_original);
+
+        $streetsForPrimaryLookup = [$street1_processed, $street2_processed];
+        sort($streetsForPrimaryLookup, SORT_STRING | SORT_FLAG_CASE); // Case-insensitive sort
+        $primaryLookupString = strtolower($streetsForPrimaryLookup[0] . ' & ' . $streetsForPrimaryLookup[1]);
+        
+        if (isset($this->intersectionCache[$primaryLookupString])) {
+            $this->command->info("     SUCCESS (Primary Cache Match): '{$intersectionQueryString}' found as '{$primaryLookupString}'.");
+            return $this->intersectionCache[$primaryLookupString];
+        }
+        $logBuffer[] = "     Primary cache lookup FAILED for '{$primaryLookupString}'.";
+        
+        // Fallback: Try swapping order (should be covered by sort, but as a safeguard if DB isn't perfectly normalized or cache keying differs)
+        $secondaryLookupString = strtolower($streetsForPrimaryLookup[1] . ' & ' . $streetsForPrimaryLookup[0]);
+        if ($primaryLookupString !== $secondaryLookupString && isset($this->intersectionCache[$secondaryLookupString])) {
+            $this->command->info("     SUCCESS (Secondary Cache Match - swapped): '{$intersectionQueryString}' found as '{$secondaryLookupString}'.");
+            return $this->intersectionCache[$secondaryLookupString];
+        }
+        if ($primaryLookupString !== $secondaryLookupString) {
+            $logBuffer[] = "     Secondary cache lookup FAILED for '{$secondaryLookupString}'.";
+        }
+
+        // Fallback to lowest address on street1 using addressCache
+        if (!empty($street1_processed)) {
+            $cachedAddressesStreet1 = $this->addressCache[strtolower($street1_processed)] ?? [];
+            if (!empty($cachedAddressesStreet1)) {
+                // Cache is sorted by number, first element is the lowest.
+                $addressStreet1 = $cachedAddressesStreet1[0];
+                $this->command->info("     SUCCESS (Street 1 Fallback - Cache): Used lowest address on '{$street1_processed}'.");
+                return ['latitude' => $addressStreet1['latitude'], 'longitude' => $addressStreet1['longitude']];
+            }
+            $logBuffer[] = "     Street 1 fallback (Cache) FAILED for '{$street1_processed}'.";
+        }
+
+        // Fallback to lowest address on street2 using addressCache
+        if (!empty($street2_processed)) {
+            $cachedAddressesStreet2 = $this->addressCache[strtolower($street2_processed)] ?? [];
+            if (!empty($cachedAddressesStreet2)) {
+                $addressStreet2 = $cachedAddressesStreet2[0];
+                $this->command->info("     SUCCESS (Street 2 Fallback - Cache): Used lowest address on '{$street2_processed}'.");
+                return ['latitude' => $addressStreet2['latitude'], 'longitude' => $addressStreet2['longitude']];
+            }
+            $logBuffer[] = "     Street 2 fallback (Cache) FAILED for '{$street2_processed}'.";
+        }
+
+        $this->command->warn(implode("\n", $logBuffer));
+        $this->command->warn("     All intersection lookup strategies FAILED for '{$intersectionQueryString}'.");
+        return null;
+    }
+
+    private function parseCrimeLocationAddress(string $locationString): ?array
+    {
+        // Example: "1200 MASSACHUSETTS AVE"
+        // Regex to capture number and street part
+        // Updated regex to better handle cases like "0 BLOCK", "1-10 BLOCK"
+        if (preg_match('/^(\d+[A-Z]?(-\d+[A-Z]?)?(\s+BLOCK)?)\s+(.*)$/i', $locationString, $matches) ||
+            preg_match('/^(BLOCK\s+\d+[A-Z]?(-\d+[A-Z]?)?)\s+(.*)$/i', $locationString, $matches) || // Handles "BLOCK 123 MAIN ST"
+            preg_match('/^(\d+[A-Z]?(-\d+[A-Z]?)?)\s+(.*)$/i', $locationString, $matches) // Original
+           ) {
+            $numberPart = trim($matches[1]); 
+            $rawStreetNamePart = trim(end($matches)); // Use end() to get the last capture group for street name
+
+            // If "BLOCK" is part of numberPart, remove it for numeric conversion but keep for original
+            $numericStreetNumberToMatch = intval(preg_replace('/(\s*BLOCK\s*)/i', '', $numberPart));
+
+            $normalizedStreetName = $this->normalizeStreetName($rawStreetNamePart);
+            
+            if (!empty($normalizedStreetName)) { // Allow 0 block, street number can be 0
+                return [
+                    'number' => $numericStreetNumberToMatch, 
+                    'name' => $normalizedStreetName,         
+                    'original_number_part' => $numberPart   
+                ];
+            }
+        }
+        $this->command->comment(" -> Could not parse address: '{$locationString}' into number and street.");
+        return null;
+    }
+    
+    private function parseCrimeTimestamp(string $timeString): ?Carbon
+    {
+        $timeString = trim($timeString);
+        if (!$timeString) return null;
+        try {
+            // Expected format from logs "m/d/Y H:i AM/PM", e.g., "5/21/2025 4:12 AM"
+            return Carbon::createFromFormat('m/d/Y g:i A', $timeString);
+        } catch (\Exception $e) {
+            try {
+                // Fallback for "m/d/Y H:i" (24-hour format if AM/PM is missing but time is like 13:00)
+                return Carbon::createFromFormat('m/d/Y H:i', $timeString);
+            } catch (\Exception $e2) {
+                $this->command->warn("Could not parse crime timestamp: '{$timeString}'. Error: " . $e->getMessage());
+                return null;
+            }
+        }
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        if (empty($dataBatch)) return;
+
+        $updateColumns = [
+            'offense_code', 'offense_code_group', 'offense_description', 'district', 
+            'reporting_area', 'shooting', 'occurred_on_date', 'year', 'month', 
+            'day_of_week', 'hour', 'ucr_part', 'street', 'lat', 'long', 'location', 
+            'crime_start_time', 'crime_end_time', 'crime_details', // Added narrative
+            'updated_at'
+        ];
+
+        DB::table('crime_data')->upsert(
+            $dataBatch,
+            ['incident_number'], // Unique key(s)
+            $updateColumns      // Columns to update on duplicate
+        );
+        $this->command->info("Upserted batch of " . count($dataBatch) . " records.");
+    }
+}
diff --git a/database/seeders/CambridgePropertyViolationsSeeder.php b/database/seeders/CambridgePropertyViolationsSeeder.php
new file mode 100644
index 0000000..31adef7
--- /dev/null
+++ b/database/seeders/CambridgePropertyViolationsSeeder.php
@@ -0,0 +1,139 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\PropertyViolation;
+use League\Csv\Reader;
+use Illuminate\Support\Facades\Storage;
+use Illuminate\Support\Facades\DB;
+use Carbon\Carbon;
+
+class CambridgePropertyViolationsSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+
+    public function run()
+    {
+        $datasetName = 'cambridge-housing-code-violations';
+        $citySubdirectory = 'cambridge';
+        $files = Storage::disk('local')->files("datasets/{$citySubdirectory}");
+
+        $datasetFiles = array_filter($files, function ($file) use ($datasetName) {
+            return strpos(basename($file), $datasetName) === 0 && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        if (!empty($datasetFiles)) {
+            sort($datasetFiles);
+            $fileToProcess = end($datasetFiles);
+            $this->command->info("Processing Cambridge housing code violations file: " . $fileToProcess);
+            $this->processFile(Storage::path($fileToProcess));
+        } else {
+            $this->command->warn("No files found for Cambridge housing code violations.");
+        }
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+            $records = $csv->getRecords();
+            $dataBatch = [];
+            $progress = 0;
+
+            foreach ($records as $record) {
+                $progress++;
+
+                $description = $record['description'] ?? null;
+                if (!empty($record['corrective_action'])) {
+                    $description .= " Corrective Action: " . $record['corrective_action'];
+                }
+                if (!empty($record['correction_required_by'])) {
+                    $description .= " Correction Required By: " . $record['correction_required_by'];
+                }
+                //skip if code is empty
+                if (empty($record['code'])) {
+                    $this->command->warn("Skipping record with empty code: " . json_encode($record));
+                    continue;
+                }
+                
+                $dataBatch[] = [
+                    'case_no'            => $record['recordid'] ?? null,
+                    'ap_case_defn_key'   => null, // no corresponding field in CSV
+                    'status_dttm'        => $this->formatDate($record['application_submit_date'] ?? null),
+                    'status'             => $record['status_x'] ?? null,
+                    'code'               => $record['code'] ?? null,
+                    'value'              => null,
+                    'description'        => $description,
+                    'violation_stno'     => null,
+                    'violation_sthigh'   => null,
+                    'violation_street'   => $record['fulladdress'] ?? null,
+                    'violation_suffix'   => null,
+                    'violation_city'     => null,
+                    'violation_state'    => 'MA',
+                    'violation_zip'      => null,
+                    'ward'               => null,
+                    'contact_addr1'      => null,
+                    'contact_addr2'      => null,
+                    'contact_city'       => null,
+                    'contact_state'      => null,
+                    'contact_zip'        => null,
+                    'sam_id'             => null,
+                    'latitude'           => is_numeric($record['latitude'] ?? null) ? (float)$record['latitude'] : null,
+                    'longitude'          => is_numeric($record['longitude'] ?? null) ? (float)$record['longitude'] : null,
+                    'location'           => $record['point'] ?? null,
+                    'language_code'      => 'en-US',
+                    'created_at'         => now(),
+                    'updated_at'         => now(),
+                ];
+
+                if ($progress % self::BATCH_SIZE === 0) {
+                    $this->insertOrUpdateBatch($dataBatch);
+                    $dataBatch = [];
+                    $this->command->info("Processed {$progress} records...");
+                }
+            }
+
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+            }
+            $this->command->info("File processed successfully: " . basename($filePath));
+        } catch (\Exception $e) {
+            $this->command->error("Error processing file: " . basename($filePath) . " - " . $e->getMessage());
+        }
+    }
+
+    private function formatDate($dateString)
+    {
+        if (empty($dateString)) {
+            return null;
+        }
+        try {
+            return Carbon::parse($dateString)->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            $this->command->warn("Could not parse date: {$dateString}");
+            return null;
+        }
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        $validBatch = array_filter($dataBatch, fn($item) => !empty($item['case_no']));
+        if (empty($validBatch)) {
+            return;
+        }
+        $updateColumns = array_keys($validBatch[0]);
+        // Remove 'case_no' and 'created_at' from update columns.
+        $updateColumns = array_filter($updateColumns, function ($col) {
+            return !in_array($col, ['case_no', 'created_at']);
+        });
+
+        DB::table((new PropertyViolation)->getTable())->upsert(
+            $validBatch,
+            ['case_no'],
+            array_values($updateColumns)
+        );
+    }
+}
diff --git a/database/seeders/CambridgeThreeOneOneSeeder.php b/database/seeders/CambridgeThreeOneOneSeeder.php
new file mode 100644
index 0000000..55306c4
--- /dev/null
+++ b/database/seeders/CambridgeThreeOneOneSeeder.php
@@ -0,0 +1,309 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use Illuminate\Support\Facades\DB;
+use Illuminate\Support\Facades\Log;
+use Illuminate\Support\Facades\Storage;
+use Carbon\Carbon;
+
+class CambridgeThreeOneOneSeeder extends Seeder
+{
+    private const BATCH_SIZE = 200; // Define batch size for upserting
+
+    /**
+     * Run the database seeds.
+     *
+     * @return void
+     */
+    public function run(): void
+    {
+        Log::info('CambridgeThreeOneOneSeeder: Seeding process started.');
+        $datasetNamePart = 'cambridge-311-service-requests'; // Common name part for the dataset
+        $citySubdirectory = 'cambridge'; // City-specific subdirectory
+
+        $filesPath = "datasets/{$citySubdirectory}";
+        $allFiles = Storage::disk('local')->files($filesPath);
+
+        // Filter files to match the specified naming convention
+        $files = array_filter($allFiles, function ($file) use ($datasetNamePart) {
+            return strpos(basename($file), $datasetNamePart) !== false && pathinfo($file, PATHINFO_EXTENSION) === 'csv';
+        });
+
+        // Sort files by name to process the most recent one (assuming timestamp in filename makes recent ones last)
+        if (!empty($files)) {
+            sort($files); // Ensure correct order for `end()`
+            $file = end($files); // Process the most recent file
+            Log::info("CambridgeThreeOneOneSeeder: Processing Cambridge 311 file: {$file}");
+            $this->processFile(Storage::path($file));
+        } else {
+            Log::warning("CambridgeThreeOneOneSeeder: No files found to process in {$filesPath} for name part: {$datasetNamePart}");
+            echo "No files found to process in {$filesPath} for name part: {$datasetNamePart}\n";
+        }
+        Log::info('CambridgeThreeOneOneSeeder: Seeding process finished.');
+    }
+
+    /**
+     * Process the file and insert data into the database.
+     *
+     * @param string $filePath
+     * @return void
+     */
+    private function processFile(string $filePath): void
+    {
+        if (!file_exists($filePath)) {
+            Log::error("CambridgeThreeOneOneSeeder: File not found: {$filePath}");
+            echo "File not found: $filePath\n";
+            return;
+        }
+
+        $fileHandle = fopen($filePath, 'r');
+        if ($fileHandle === false) {
+            Log::error("CambridgeThreeOneOneSeeder: Could not open file: {$filePath}");
+            echo "Could not open file: $filePath\n";
+            return;
+        }
+
+        $header = fgetcsv($fileHandle); // Extract header row
+        if ($header === false) {
+            Log::error("CambridgeThreeOneOneSeeder: Could not read header from file: {$filePath}");
+            fclose($fileHandle);
+            return;
+        }
+        Log::info("CambridgeThreeOneOneSeeder: Successfully read header from {$filePath}.");
+
+        $rowCount = 0;
+        $processedForBatchCount = 0;
+        $skippedYearCount = 0;
+        $errorCount = 0;
+        $batchData = [];
+
+        DB::beginTransaction();
+        Log::info("CambridgeThreeOneOneSeeder: Started database transaction.");
+        try {
+            while (($row = fgetcsv($fileHandle)) !== false) {
+                $rowCount++;
+                if ($rowCount === 1 && $row === $header) { // Skip header if it's read again by any chance
+                    continue;
+                }
+
+                try {
+                    if (count($header) !== count($row)) {
+                        Log::warning("CambridgeThreeOneOneSeeder: Row {$rowCount}: Mismatch between header and row column count in file {$filePath}. Columns in header: " . count($header) . ", columns in row: " . count($row) . ". Skipping row. Data: " . implode(',', array_slice($row, 0, 5)));
+                        $errorCount++;
+                        continue;
+                    }
+                    $rowData = array_combine($header, $row);
+
+                    // Validate and clean the data
+                    $cleanedData = $this->validateAndCleanData($rowData);
+
+                    // Filter by year 2025
+                    if (isset($cleanedData['open_dt'])) {
+                        try {
+                            $openDate = Carbon::parse($cleanedData['open_dt']);
+                            if ($openDate->year !== 2025) {
+                                $skippedYearCount++;
+                                // Log::debug("CambridgeThreeOneOneSeeder: Row {$rowCount} (ID: {$cleanedData['case_enquiry_id']}): Skipped due to open_dt year not being 2025 (Year: {$openDate->year}).");
+                                continue;
+                            }
+                        } catch (\Exception $e) {
+                            Log::warning("CambridgeThreeOneOneSeeder: Row {$rowCount} (ID: {$cleanedData['case_enquiry_id']}): Could not parse open_dt '{$cleanedData['open_dt']}' for year check. Error: " . $e->getMessage());
+                            $errorCount++;
+                            continue;
+                        }
+                    } else {
+                        // If open_dt is null, decide if it should be skipped or processed.
+                        // For now, let's skip if we can't determine the year.
+                        Log::warning("CambridgeThreeOneOneSeeder: Row {$rowCount} (ID: {$cleanedData['case_enquiry_id']}): Skipped due to null open_dt, cannot verify year.");
+                        $skippedYearCount++;
+                        continue;
+                    }
+                    
+                    $batchData[] = $cleanedData;
+                    $processedForBatchCount++;
+
+                    if (count($batchData) >= self::BATCH_SIZE) {
+                        $this->upsertBatch($batchData);
+                        $batchData = []; // Reset batch
+                    }
+
+                } catch (\Exception $e) {
+                    $errorCount++;
+                    Log::error("CambridgeThreeOneOneSeeder: Error processing row {$rowCount} in file {$filePath}: " . $e->getMessage() . " | Row data: " . json_encode($rowData ?? $row));
+                }
+            }
+
+            // Upsert any remaining data in the last batch
+            if (!empty($batchData)) {
+                $this->upsertBatch($batchData);
+            }
+
+            DB::commit();
+            Log::info("CambridgeThreeOneOneSeeder: Database transaction committed.");
+
+        } catch (\Exception $e) {
+            DB::rollBack();
+            Log::critical("CambridgeThreeOneOneSeeder: Critical error during Cambridge 311 seeding, transaction rolled back: " . $e->getMessage());
+            echo "Critical error during seeding, see log file.\n";
+        } finally {
+            fclose($fileHandle);
+            Log::info("CambridgeThreeOneOneSeeder: Closed file handle for {$filePath}.");
+        }
+        
+        $summary = "CambridgeThreeOneOneSeeder: Finished processing {$filePath}. " .
+                   "Total rows read: {$rowCount}. " .
+                   "Rows skipped (not 2025): {$skippedYearCount}. " .
+                   "Rows processed for DB: {$processedForBatchCount}. " .
+                   "Rows with errors: {$errorCount}.";
+        Log::info($summary);
+        echo $summary . "\n";
+    }
+
+    /**
+     * Upserts a batch of data.
+     *
+     * @param array $batchData
+     * @return void
+     */
+    private function upsertBatch(array $batchData): void
+    {
+        if (empty($batchData)) {
+            return;
+        }
+        try {
+            DB::table('three_one_one_cases')->upsert($batchData, ['case_enquiry_id'], [
+                // Specify columns to update if the record exists
+                'open_dt', 'sla_target_dt', 'closed_dt', 'on_time', 'case_status', 
+                'closure_reason', 'case_title', 'subject', 'reason', 'type', 'queue', 
+                'department', 'threeoneonedescription', 'submitted_photo', 'closed_photo', 'location', 
+                'fire_district', 'pwd_district', 'city_council_district', 'police_district', 
+                'neighborhood', 'neighborhood_services_district', 'ward', 'precinct', 
+                'location_street_name', 'location_zipcode', 'latitude', 'longitude', 
+                'source', 'checksum', 'ward_number', 'language_code', 
+                'source_city', 'updated_at'
+            ]);
+            Log::info("CambridgeThreeOneOneSeeder: Successfully upserted batch of " . count($batchData) . " records.");
+        } catch (\Exception $e) {
+            Log::error("CambridgeThreeOneOneSeeder: Error upserting batch: " . $e->getMessage() . " | Sample Case ID from batch: " . ($batchData[0]['case_enquiry_id'] ?? 'N/A'));
+            // Optionally, re-throw or handle more gracefully (e.g. try individual upserts)
+            throw $e; // Re-throw to be caught by the transaction handler
+        }
+    }
+
+    /**
+     * Validate and clean data for insertion.
+     *
+     * @param array $row
+     * @return array
+     * @throws \Exception
+     */
+    private function validateAndCleanData(array $row): array
+    {
+        // Cambridge CSV Headers:
+        // "ticket_id","city","issue_type","issue_category","ticket_status","issue_description",
+        // "ticket_closed_date_time","ticket_created_date_time","ticket_last_updated_date_time",
+        // "address","lat","lng","location","image","acknowledged_at","html_url"
+
+        $caseEnquiryId = $this->validateInteger($row['ticket_id'] ?? null, 'ticket_id');
+        if ($caseEnquiryId === null) {
+            throw new \Exception("ticket_id is required and cannot be null.");
+        }
+
+        return [
+            'case_enquiry_id' => $caseEnquiryId,
+            'open_dt' => $this->validateDateTime($row['ticket_created_date_time'] ?? null, 'ticket_created_date_time'),
+            'sla_target_dt' => null, // Not available in Cambridge data
+            'closed_dt' => $this->validateDateTime($row['ticket_closed_date_time'] ?? null, 'ticket_closed_date_time'),
+            'on_time' => null, // Not available in Cambridge data
+            'case_status' => $row['ticket_status'] ?? null,
+            'closure_reason' => null, // Not directly available
+            'case_title' => $row['issue_type'] ?? null, // Using issue_type as case_title
+            'subject' => $row['issue_category'] ?? null,
+            'reason' => null, // Not directly available
+            'type' => $row['issue_type'] ?? null,
+            'queue' => null, // Not available
+            'department' => null, // Not available
+            'threeoneonedescription' => $row['issue_description'] ?? null,
+            'submitted_photo' => ($row['image'] ?? null) === '' ? null : ($row['image'] ?? null),
+            'closed_photo' => null, // Not available
+            'location' => $row['address'] ?? null,
+            'fire_district' => null, // Not available
+            'pwd_district' => null, // Not available
+            'city_council_district' => null, // Not available
+            'police_district' => null, // Not available
+            'neighborhood' => null, // Not directly available
+            'neighborhood_services_district' => null, // Not available
+            'ward' => null, // Not available
+            'precinct' => null, // Not available
+            'location_street_name' => $row['address'] ?? null, // Using full address, could be parsed
+            'location_zipcode' => null, // Not directly available, could parse from address
+            'latitude' => $this->validateDouble($row['lat'] ?? null, 'lat'),
+            'longitude' => $this->validateDouble($row['lng'] ?? null, 'lng'),
+            'source' => $row['html_url'] ?? 'Cambridge SeeClickFix', // URL or a generic source
+            'checksum' => null, // Boston specific
+            'ward_number' => null, // Not available
+            'language_code' => 'en-US', // Default to English
+            'source_city' => 'Cambridge', // Hardcoded for this seeder
+            'created_at' => now(), // Handled by DB upsert if new, or ignored if updating
+            'updated_at' => now(),
+        ];
+    }
+
+    private function validateInteger($value, string $field): ?int
+    {
+        if ($value === null || $value === '') {
+            // Log::debug("CambridgeThreeOneOneSeeder: Integer field '{$field}' is null or empty, returning null.");
+            return null;
+        }
+        if (!is_numeric($value)) {
+            $cleanedValue = str_replace(',', '', $value);
+            if (!is_numeric($cleanedValue)) {
+                 throw new \Exception("Invalid integer for {$field}: {$value}");
+            }
+            $value = $cleanedValue;
+        }
+        if (floatval($value) != intval(floatval($value))) {
+             throw new \Exception("Invalid integer format for {$field} (float detected): {$value}");
+        }
+        return intval($value);
+    }
+
+    private function validateDouble($value, string $field): ?float
+    {
+        if ($value === null || $value === '') {
+            // Log::debug("CambridgeThreeOneOneSeeder: Double field '{$field}' is null or empty, returning null.");
+            return null;
+        }
+        if (!is_numeric($value)) {
+            throw new \Exception("Invalid double value for {$field}: {$value}");
+        }
+        return floatval($value);
+    }
+
+    private function validateDateTime($value, string $field): ?string
+    {
+        if ($value === null || $value === '') {
+            // Log::debug("CambridgeThreeOneOneSeeder: DateTime field '{$field}' is null or empty, returning null.");
+            return null;
+        }
+        try {
+            $date = Carbon::parse($value); // Carbon can parse various formats including ISO 8601
+            return $date->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            // Log::warning("CambridgeThreeOneOneSeeder: Could not parse datetime for field '{$field}' with value '{$value}'. Error: " . $e->getMessage());
+            // Fallback for specific common formats if Carbon::parse is too broad or fails unexpectedly
+            $formatsToTry = ['Y-m-d\TH:i:s.u', 'Y-m-d H:i:s', 'm/d/Y H:i:s'];
+            foreach ($formatsToTry as $format) {
+                try {
+                    $date = Carbon::createFromFormat($format, $value);
+                    if ($date) return $date->format('Y-m-d H:i:s');
+                } catch (\Exception $ex) {
+                    // continue trying other formats
+                }
+            }
+            throw new \Exception("Invalid datetime value for {$field}: {$value}. Original error: " . $e->getMessage());
+        }
+    }
+}
diff --git a/database/seeders/ConstructionOffHoursSeeder.php b/database/seeders/ConstructionOffHoursSeeder.php
index 2adadee..009a6f7 100644
--- a/database/seeders/ConstructionOffHoursSeeder.php
+++ b/database/seeders/ConstructionOffHoursSeeder.php
@@ -80,6 +80,26 @@ private function processFile($file)
                     continue;
                 }
 
+                // Check for 2202 in the year for start and end times and change to 2022
+                if (str_contains($offHour['start_datetime'], '2202')) {
+                    $offHour['start_datetime'] = str_replace('2202', '2022', $offHour['start_datetime']);
+                }
+                if (str_contains($offHour['stop_datetime'], '2202')) {
+                    $offHour['stop_datetime'] = str_replace('2202', '2022', $offHour['stop_datetime']);
+                }
+                // Check if both start and stop times are between '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07'
+                if (strtotime($offHour['start_datetime']) < 0 || strtotime($offHour['stop_datetime']) < 0) {
+                    $skipped++;
+                    Log::warning("Skipping record with invalid date at row {$progress}: " . json_encode($offHour));
+                    continue;
+                }
+                if (strtotime($offHour['start_datetime']) > 2147483647 || strtotime($offHour['stop_datetime']) > 2147483647) {
+                    $skipped++;
+                    Log::warning("Skipping record with date out of range at row {$progress}: " . json_encode($offHour));
+                    continue;
+                }
+
+
                 // Extract and normalize the base address
                 $baseAddress = $this->normalizeAddress($offHour['address']);
 
@@ -113,7 +133,8 @@ private function processFile($file)
 
                 $dataBatch[] = [
                     'app_no' => $offHour['app_no'],
-                    'start_datetime' => $offHour['start_datetime'],
+                    //start_datetime and stop_datetime need to be timestamps
+                    'start_datetime' => $offHour['start_datetime'], 
                     'stop_datetime' => $offHour['stop_datetime'],
                     'address' => $offHour['address'],
                     'ward' => $offHour['ward'],
diff --git a/database/seeders/CrimeDataSeeder.php b/database/seeders/CrimeDataSeeder.php
index 79093fd..a3aff8d 100644
--- a/database/seeders/CrimeDataSeeder.php
+++ b/database/seeders/CrimeDataSeeder.php
@@ -6,6 +6,7 @@
 
 use Illuminate\Database\Seeder;
 use App\Models\CrimeData;
+use App\Models\TrashScheduleByAddress; // Assuming this model exists and maps to trash_schedules_by_address
 use Illuminate\Support\Facades\File;
 use League\Csv\Reader;
 use Illuminate\Support\Facades\DB;
@@ -14,9 +15,118 @@
 class CrimeDataSeeder extends Seeder
 {
     private const BATCH_SIZE = 500;
+    private const STREET_ABBREVIATIONS_BOSTON = [
+        // Common Boston street suffixes and abbreviations
+        'STREET' => 'ST', 'AVENUE' => 'AVE', 'ROAD' => 'RD', 'DRIVE' => 'DR',
+        'PLACE' => 'PL', 'COURT' => 'CT', 'LANE' => 'LN', 'BOULEVARD' => 'BLVD',
+        'PARKWAY' => 'PKWY', 'SQUARE' => 'SQ', 'TERRACE' => 'TER', 'HIGHWAY' => 'HWY',
+        'CIRCLE' => 'CIR', 'ALLEY' => 'ALY', 'EXPRESSWAY' => 'EXPY', 'FREEWAY' => 'FWY',
+        'JUNCTION' => 'JCT', 'POINT' => 'PT', 'TRAIL' => 'TRL', 'TURNPIKE' => 'TPKE',
+        'WAY' => 'WY', 'CENTER' => 'CTR',
+        // Specific Boston names if needed, similar to Cambridge
+        'MOUNT' => 'MT', 'SAINT' => 'ST',
+    ];
+
+    private array $bostonAddressCache = [];
+
+    private function normalizeBostonStreetName(string $streetName): string
+    {
+        $processedName = strtoupper(trim($streetName));
+        $processedName = preg_replace('/\s+/', ' ', $processedName);
+        $processedName = preg_replace('/^THE\s+/', '', $processedName);
+
+        foreach (self::STREET_ABBREVIATIONS_BOSTON as $search => $replace) {
+            $processedName = preg_replace('/\b' . preg_quote($search, '/') . '\b/i', $replace, $processedName);
+        }
+        return rtrim(trim($processedName), '.');
+    }
+
+    private function parseBostonAddressString(string $addressString): ?array
+    {
+        $addressString = trim($addressString);
+        // Regex to capture number (optional) and street part.
+        // Handles cases like "123 MAIN ST", "MAIN ST", "123A MAIN ST"
+        // Does not explicitly handle "BLOCK" like Cambridge, adjust if Boston data has it.
+        if (preg_match('/^(\d+[A-Z]?)\s+(.*)$/i', $addressString, $matches) || // Number then Street
+            preg_match('/^(.*?)(\s+\d+[A-Z]?)$/i', $addressString, $matches_reverse) // Street then Number (less common for input but good for parsing full_address)
+           ) {
+            if (!empty($matches)) {
+                $numberPart = trim($matches[1]);
+                $rawStreetNamePart = trim($matches[2]);
+            } elseif (!empty($matches_reverse)) { // If street name came first
+                $rawStreetNamePart = trim($matches_reverse[1]);
+                $numberPart = trim($matches_reverse[2]);
+            } else { // Fallback for street name only
+                 $rawStreetNamePart = $addressString;
+                 $numberPart = null;
+            }
+
+            $numericStreetNumber = $numberPart ? intval($numberPart) : null;
+            $normalizedStreetName = $this->normalizeBostonStreetName($rawStreetNamePart);
+            
+            if (!empty($normalizedStreetName)) {
+                $result = ['name' => $normalizedStreetName];
+                if ($numericStreetNumber !== null) {
+                    $result['number'] = $numericStreetNumber;
+                    $result['original_number_part'] = $numberPart;
+                }
+                return $result;
+            }
+        } elseif (!empty($addressString)) { // No number, just street name
+            $normalizedStreetName = $this->normalizeBostonStreetName($addressString);
+            if (!empty($normalizedStreetName)) {
+                return ['name' => $normalizedStreetName, 'number' => null];
+            }
+        }
+        return null;
+    }
+
+    private function loadBostonAddressData(): void
+    {
+        $this->command->info("Loading Boston address data from trash schedules into cache...");
+        // Use the model if it exists, otherwise DB::table()
+        $trashAddresses = DB::table((new TrashScheduleByAddress)->getTable())
+            ->select('full_address', 'x_coord', 'y_coord')
+            ->whereNotNull('full_address')
+            ->whereNotNull('x_coord')
+            ->whereNotNull('y_coord')
+            ->where('x_coord', '!=', 0) // Filter out (0,0) coordinates often used as placeholders
+            ->where('y_coord', '!=', 0)
+            ->get();
+
+        foreach ($trashAddresses as $addr) {
+            if (empty($addr->full_address) || empty($addr->x_coord) || empty($addr->y_coord)) {
+                continue;
+            }
+            
+            $parsed = $this->parseBostonAddressString($addr->full_address);
+            if ($parsed && !empty($parsed['name'])) {
+                $normalizedStreet = strtolower($parsed['name']); // Already normalized by parseBostonAddressString
+                $number = $parsed['number'] ?? 0; // Default to 0 if no number, helps sorting
+
+                $this->bostonAddressCache[$normalizedStreet][] = [
+                    'number' => (int)$number,
+                    'latitude' => (float)$addr->y_coord, // y_coord is typically latitude
+                    'longitude' => (float)$addr->x_coord, // x_coord is typically longitude
+                ];
+            }
+        }
+
+        // Sort addresses by street number for efficient searching
+        foreach ($this->bostonAddressCache as $streetName => $addressList) {
+            usort($this->bostonAddressCache[$streetName], function ($a, $b) {
+                return $a['number'] <=> $b['number'];
+            });
+        }
+        $this->command->info("Finished loading " . count($trashAddresses) . " Boston addresses into cache, grouped by " . count($this->bostonAddressCache) . " unique street names.");
+    }
+
 
     public function run()
     {
+        $this->command->info("Starting Boston Crime Data Seeder...");
+        $this->loadBostonAddressData(); // Load cache once
+
         $name = 'crime-incident-reports';
         // Get all files from the datasets folder in Storage
         $files = Storage::disk('local')->files('datasets');
@@ -41,7 +151,7 @@ public function run()
 
     private function processFile($file)
     {
-        print_r("Processing file: " . $file . "\n");
+        $this->command->info("Processing file: " . $file);
         $csv = Reader::createFromPath($file);
         $csv->setHeaderOffset(0); // The header is on the first row
 
@@ -56,12 +166,76 @@ private function processFile($file)
         foreach ($records as $crime) {
             $progress++;
 
-            if (!is_numeric($crime['Lat']) || !is_numeric($crime['Long'])) {
-                print_r("Skipping record with invalid lat/long: " . $crime['Lat'] . ", " . $crime['Long'] . "\n");
+            $lat = trim($crime['Lat'] ?? '');
+            $long = trim($crime['Long'] ?? '');
+            $attemptedFallback = false;
+
+            if (empty($lat) || empty($long) || !is_numeric($lat) || !is_numeric($long) || (float)$lat == 0 || (float)$long == 0) {
+                $attemptedFallback = true;
+                $rawStreetFromCrime = trim($crime['STREET'] ?? '');
+
+                if (!empty($rawStreetFromCrime)) {
+                    $parsedCrimeStreet = $this->parseBostonAddressString($rawStreetFromCrime);
+
+                    if ($parsedCrimeStreet && !empty($parsedCrimeStreet['name'])) {
+                        $normalizedCrimeStreetName = strtolower($parsedCrimeStreet['name']); // Name already normalized
+
+                        if (isset($this->bostonAddressCache[$normalizedCrimeStreetName])) {
+                            $cachedAddressesOnStreet = $this->bostonAddressCache[$normalizedCrimeStreetName];
+                            if (!empty($cachedAddressesOnStreet)) {
+                                $foundMatchInCache = false;
+                                if (isset($parsedCrimeStreet['number']) && is_numeric($parsedCrimeStreet['number'])) {
+                                    $crimeStreetNum = (int)$parsedCrimeStreet['number'];
+                                    $closestMatch = null;
+                                    $minDifference = PHP_INT_MAX;
+
+                                    foreach ($cachedAddressesOnStreet as $cachedAddr) {
+                                        $difference = abs($crimeStreetNum - $cachedAddr['number']);
+                                        if ($difference < $minDifference) {
+                                            $minDifference = $difference;
+                                            $closestMatch = $cachedAddr;
+                                        } elseif ($difference === $minDifference && $closestMatch && $cachedAddr['number'] < $closestMatch['number']) {
+                                            $closestMatch = $cachedAddr; // Prefer lower number in case of tie
+                                        }
+                                    }
+                                    if ($closestMatch) {
+                                        $lat = (string)$closestMatch['latitude'];
+                                        $long = (string)$closestMatch['longitude'];
+                                        $foundMatchInCache = true;
+                                        $this->command->comment("Geocoded INCIDENT_NUMBER {$crime['INCIDENT_NUMBER']} ('{$rawStreetFromCrime}') using closest number match from cache: {$lat},{$long}");
+                                    }
+                                }
+
+                                if (!$foundMatchInCache) { // Fallback to first address on street if no number or no exact match
+                                    $firstAddress = $cachedAddressesOnStreet[0];
+                                    $lat = (string)$firstAddress['latitude'];
+                                    $long = (string)$firstAddress['longitude'];
+                                    $this->command->comment("Geocoded INCIDENT_NUMBER {$crime['INCIDENT_NUMBER']} ('{$rawStreetFromCrime}') using first address on street from cache: {$lat},{$long}");
+                                }
+                            } else {
+                                 $this->command->comment("Street '{$normalizedCrimeStreetName}' for INCIDENT_NUMBER {$crime['INCIDENT_NUMBER']} found in cache keys, but no addresses listed.");
+                            }
+                        } else {
+                             $this->command->comment("Street '{$normalizedCrimeStreetName}' for INCIDENT_NUMBER {$crime['INCIDENT_NUMBER']} ('{$rawStreetFromCrime}') not in address cache.");
+                        }
+                    } else {
+                        $this->command->comment("Could not parse STREET '{$rawStreetFromCrime}' for INCIDENT_NUMBER {$crime['INCIDENT_NUMBER']}.");
+                    }
+                } else {
+                    $this->command->comment("Empty STREET field for INCIDENT_NUMBER {$crime['INCIDENT_NUMBER']} with missing coords.");
+                }
+            }
+
+
+            // Final check for Lat/Long before inserting
+            if (empty(trim($lat)) || empty(trim($long)) || !is_numeric($lat) || !is_numeric($long) || (float)$lat == 0 || (float)$long == 0) {
+                $reason = "invalid/missing lat/long";
+                if ($attemptedFallback) {
+                    $reason .= " (fallback failed or N/A)";
+                }
+                $this->command->warn("Skipping record {$crime['INCIDENT_NUMBER']} due to {$reason}. STREET: '{$crime['STREET']}'. Original Lat/Long: '{$crime['Lat']}'/'{$crime['Long']}'.");
                 $skipped++;
                 continue;
-            } else {
-                print_r("Processing record with lat/long: " . $crime['Lat'] . ", " . $crime['Long'] . "\n");
             }
 
             $occurred_on_date = $this->formatDate($crime['OCCURRED_ON_DATE']);
@@ -73,18 +247,18 @@ private function processFile($file)
                 'offense_description' => $crime['OFFENSE_DESCRIPTION'],
                 'district' => $crime['DISTRICT'],
                 'reporting_area' => $crime['REPORTING_AREA'],
-                'shooting' => $crime['SHOOTING'] == 'Y',
+                'shooting' => ($crime['SHOOTING'] ?? '0') == '1' || ($crime['SHOOTING'] ?? 'N') == 'Y', // Handle '0'/'1' and 'N'/'Y'
                 'occurred_on_date' => $occurred_on_date,
                 'year' => $crime['YEAR'],
                 'month' => $crime['MONTH'],
-                'day_of_week' => $crime['DAY_OF_WEEK'],
+                'day_of_week' => trim($crime['DAY_OF_WEEK']),
                 'hour' => $crime['HOUR'],
                 'ucr_part' => $crime['UCR_PART'],
                 'street' => $crime['STREET'],
-                'lat' => $crime['Lat'],
-                'long' => $crime['Long'],
-                'location' => $crime['Location'],
-                'language_code' => 'en-US'
+                'lat' => (float)$lat,
+                'long' => (float)$long,
+                'location' => $crime['Location'], // Keep original Location field
+                'language_code' => 'en-US' // Default language code
             ];
 
             if ($progress % self::BATCH_SIZE == 0) {
@@ -104,7 +278,7 @@ private function processFile($file)
             $this->insertOrUpdateBatch($dataBatch);
         }
 
-        print_r("File processed: " . $file . "\n");
+        $this->command->info("File processed: " . basename($file) . ". Skipped records: {$skipped}");
     }
 
     private function insertOrUpdateBatch(array $dataBatch): void
@@ -135,16 +309,21 @@ private function reportProgress($progress, $fileCount, $timeTaken)
         $estimatedTimePerRecord = $timeTaken / self::BATCH_SIZE;
         $estimatedTimeRemainingFile = $estimatedTimePerRecord * ($fileCount - $progress);
         
-        // Clear the previous 5 lines
-        echo "\033[5A";  // Move 5 lines up
-        echo "\033[K";   // Clear current line
-        echo $progress . " records processed.\n";
-        echo "\033[K";   // Clear current line
-        echo "Records remaining in this file: " . ($fileCount - $progress) . ".\n";
-        echo "\033[K";   // Clear current line
-        echo "Time for last " . self::BATCH_SIZE . " records: " . round($timeTaken, 2) . " seconds.\n";
-        echo "\033[K";   // Clear current line
-        echo "Estimated time remaining for this file: " . $this->formatTime($estimatedTimeRemainingFile) . ".\n";
+        // Using $this->command->getOutput()->write() for more control if needed,
+        // but $this->command->info() or comment() should be fine for simple lines.
+        // For multi-line dynamic updates, direct output manipulation is better.
+        // For now, let's simplify to standard command outputs.
+        
+        $this->command->info(
+            sprintf(
+                "%d records processed. Records remaining: %d. Time for last %d: %.2fs. Est. time remaining: %s.",
+                $progress,
+                ($fileCount - $progress),
+                self::BATCH_SIZE,
+                $timeTaken,
+                $this->formatTime($estimatedTimeRemainingFile)
+            )
+        );
     }
 
     private function formatTime(float $timeInSeconds): string
@@ -167,14 +346,25 @@ private function formatTime(float $timeInSeconds): string
 
     private function formatDate($date)
     {
-        // Strip timezone offset
-        if (strpos($date, '+') !== false) {
-            $date = explode('+', $date)[0];
-        } elseif (strpos($date, '-') !== false) {
-            $date = explode('-', $date)[0];
-        }
+        if (empty($date)) return null;
+        // Strip timezone offset like +00 or -04:00
+        $date = preg_replace('/\s*([+-]\d{2}(:\d{2})?|Z)$/', '', trim($date));
 
-        // Convert to datetime
-        return date('Y-m-d H:i:s', strtotime($date));
+        try {
+            // Try parsing common datetime format first
+            $carbonDate = \Carbon\Carbon::parse($date);
+            return $carbonDate->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            // Fallback for other potential date formats if Carbon::parse fails
+            // Example: "m/d/Y H:i:s" or "Y-m-d H:i:s.u"
+            try {
+                // Attempt specific formats if known issues exist
+                $carbonDate = \Carbon\Carbon::createFromFormat('Y-m-d H:i:s.u', $date);
+                 return $carbonDate->format('Y-m-d H:i:s');
+            } catch (\Exception $e2) {
+                 $this->command->warn("Could not parse date: '{$date}'. Error: " . $e->getMessage());
+                return null;
+            }
+        }
     }
 }
diff --git a/database/seeders/DataPointSeeder.php b/database/seeders/DataPointSeeder.php
index bf8281c..10322b4 100644
--- a/database/seeders/DataPointSeeder.php
+++ b/database/seeders/DataPointSeeder.php
@@ -5,59 +5,209 @@
 use Illuminate\Database\Seeder;
 use Illuminate\Support\Facades\DB;
 use Carbon\Carbon;
+use Illuminate\Support\Facades\Log; // Add Log facade
 
 class DataPointSeeder extends Seeder
 {
-    private const DAYS_TO_KEEP = 14; // Change this to adjust the timeframe
+    private const DAYS_TO_KEEP = 183; // Approx 6 months (6 * 30.5)
+    private const BATCH_SIZE = 1000; // Number of records to upsert in each batch
 
     private const MODELS = [
-        'crime_data' => ['lat' => 'lat', 'lng' => 'long', 'id' => 'id', 'date_field' => 'occurred_on_date', 'foreign_key' => 'crime_data_id'],
-        'three_one_one_cases' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'id', 'date_field' => 'open_dt', 'foreign_key' => 'three_one_one_case_id'],
-        'property_violations' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'id', 'date_field' => 'status_dttm', 'foreign_key' => 'property_violation_id'],
-        'construction_off_hours' => ['lat' => 'latitude', 'lng' => 'longitude', 'id' => 'id', 'date_field' => 'start_datetime', 'foreign_key' => 'construction_off_hour_id'],
-        'building_permits' => ['lat' => 'y_latitude', 'lng' => 'x_longitude', 'id' => 'id', 'date_field' => 'issued_date', 'foreign_key' => 'building_permit_id'],
+        'crime_data' => [
+            'lat' => 'lat', 'lng' => 'long',
+            'id_field_for_generic_fk' => 'id', // Source column for data_points.generic_foreign_id
+            'id_field_for_specific_fk' => 'id', // Source column for data_points.crime_data_id
+            'foreign_key' => 'crime_data_id',   // Column name in data_points for specific FK
+            'date_field_for_source_filter' => 'occurred_on_date', // Date field in source table for filtering recent items
+            'alcivartech_date_field' => 'occurred_on_date' // Source column for data_points.alcivartech_date
+        ],
+        'three_one_one_cases' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'three_one_one_case_id',
+            'date_field_for_source_filter' => 'open_dt',
+            'alcivartech_date_field' => 'open_dt'
+        ],
+        'property_violations' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'property_violation_id',
+            'date_field_for_source_filter' => 'status_dttm',
+            'alcivartech_date_field' => 'status_dttm'
+        ],
+        'construction_off_hours' => [
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'construction_off_hour_id',
+            'date_field_for_source_filter' => 'start_datetime',
+            'alcivartech_date_field' => 'start_datetime'
+        ],
+        'building_permits' => [
+            'lat' => 'y_latitude', 'lng' => 'x_longitude',
+            'id_field_for_generic_fk' => 'id',
+            'id_field_for_specific_fk' => 'id',
+            'foreign_key' => 'building_permit_id',
+            'date_field_for_source_filter' => 'issued_date',
+            'alcivartech_date_field' => 'issued_date'
+        ],
+        'food_inspections' => [ // Corrected from food_establishment_violations and using food_inspections table structure
+            'lat' => 'latitude', 'lng' => 'longitude',
+            'id_field_for_generic_fk' => 'external_id', // external_id from food_inspections for generic_foreign_id
+            'id_field_for_specific_fk' => 'id',        // PK id from food_inspections for food_inspection_id
+            'foreign_key' => 'food_inspection_id',
+            'date_field_for_source_filter' => 'resultdttm', // Using resultdttm as the primary date
+            'alcivartech_date_field' => 'resultdttm'
+        ],
     ];
 
     public function run()
     {
+        $this->command->info("Starting DataPointSeeder...");
+        Log::info("DataPointSeeder: Run started.");
         $cutoffDate = Carbon::now()->subDays(self::DAYS_TO_KEEP)->toDateTimeString();
 
-        // Delete old records from `data_points`
-        DB::table('data_points')->where('created_at', '<', $cutoffDate)->delete();
-        $this->command->info("Deleted old data points older than " . self::DAYS_TO_KEEP . " days.");
+        // Delete old records from `data_points` based on alcivartech_date
+        try {
+            $deletedCount = DB::table('data_points')->where('alcivartech_date', '<', $cutoffDate)->delete();
+            $this->command->info("Successfully deleted {$deletedCount} old data points with alcivartech_date older than " . self::DAYS_TO_KEEP . " days.");
+            Log::info("DataPointSeeder: Deleted {$deletedCount} old data points with alcivartech_date older than " . self::DAYS_TO_KEEP . " days.");
+        } catch (\Exception $e) {
+            $this->command->error("Error deleting old data points: " . $e->getMessage());
+            Log::error("DataPointSeeder: Error deleting old data points.", ['exception' => $e]);
+        }
 
         foreach (self::MODELS as $table => $fields) {
             $this->syncDataPoints($table, $fields, $cutoffDate);
         }
+        $this->command->info("DataPointSeeder finished.");
+        Log::info("DataPointSeeder: Run finished.");
     }
 
     private function syncDataPoints(string $table, array $fields, string $cutoffDate)
     {
-        $newData = DB::table($table)
-            ->where($fields['date_field'], '>=', $cutoffDate)
-            ->whereNotNull($fields['lat'])
-            ->whereNotNull($fields['lng'])
-            ->get();
-
-        if ($newData->isEmpty()) {
-            $this->command->warn("No new records found for {$table}.");
-            return;
-        }
+        $this->command->info("Processing data for table: {$table}");
+        Log::info("DataPointSeeder: Starting sync for table '{$table}'. Cutoff date for source: {$cutoffDate}");
+        Log::info("DataPointSeeder: Fields used for table '{$table}'", $fields);
 
-        $batchInsert = [];
-        foreach ($newData as $row) {
-            $batchInsert[] = [
-                'type' => $table,
-                'location' => DB::raw("ST_GeomFromText('POINT({$row->{$fields['lng']}} {$row->{$fields['lat']}})')"),
-                $fields['foreign_key'] => $row->{$fields['id']},
-                'created_at' => now(),
-                'updated_at' => now(),
-            ];
-        }
+        try {
+            $sourceDateField = $fields['date_field_for_source_filter'];
+            
+            $totalProcessedCount = 0;
+            $totalUpsertedCount = 0;
+            $totalSkippedCount = 0;
+
+            // Process in chunks from the source table to avoid memory issues with very large source tables
+            DB::table($table)
+                ->where($sourceDateField, '>=', $cutoffDate)
+                ->orderBy($fields['id_field_for_specific_fk']) // Order by PK for consistent chunking
+                ->chunkById(self::BATCH_SIZE, function ($newDataChunk) use ($table, $fields, &$totalProcessedCount, &$totalUpsertedCount, &$totalSkippedCount) {
+                    
+                    $this->command->info("Processing chunk of " . $newDataChunk->count() . " records from {$table}.");
+                    Log::info("DataPointSeeder: Processing chunk of " . $newDataChunk->count() . " records from '{$table}'.");
+
+                    if ($newDataChunk->isEmpty()) {
+                        $this->command->warn("Empty chunk encountered for {$table}.");
+                        Log::warning("DataPointSeeder: Empty chunk encountered for '{$table}'.");
+                        return true; // Continue to next chunk
+                    }
+
+                    $batchInsert = [];
+                    $chunkSkippedCount = 0;
+
+                    foreach ($newDataChunk as $row) {
+                        $totalProcessedCount++;
+                        $genericFkValue = $row->{$fields['id_field_for_generic_fk']} ?? null;
+                        $specificFkValue = $row->{$fields['id_field_for_specific_fk']} ?? null;
+                        $alcivartechDateValue = $row->{$fields['alcivartech_date_field']} ?? null;
+
+                        if (!isset($row->{$fields['lat']}) || is_null($row->{$fields['lat']}) ||
+                            !isset($row->{$fields['lng']}) || is_null($row->{$fields['lng']}) ||
+                            is_null($genericFkValue) || is_null($specificFkValue) || is_null($alcivartechDateValue)) {
+                            
+                            $identifier = $genericFkValue ?? $specificFkValue ?? 'unknown_id_in_chunk';
+                            // Log only a few of these to avoid flooding logs, or use a counter
+                            if ($chunkSkippedCount < 5) { // Log first 5 skipped in a chunk
+                                Log::warning("DataPointSeeder: Skipping record from '{$table}' (ID: {$identifier}) in chunk due to missing essential data.", ['row_data_sample' => $row]);
+                            }
+                            $chunkSkippedCount++;
+                            continue;
+                        }
+
+                        if (!is_numeric($row->{$fields['lat']}) || !is_numeric($row->{$fields['lng']})) {
+                            $identifier = $genericFkValue;
+                             if ($chunkSkippedCount < 5) {
+                                Log::warning("DataPointSeeder: Skipping record from '{$table}' (ID: {$identifier}) in chunk due to non-numeric lat/lng.", [
+                                    'lat' => $row->{$fields['lat']},
+                                    'lng' => $row->{$fields['lng']}
+                                ]);
+                            }
+                            $chunkSkippedCount++;
+                            continue;
+                        }
+                        
+                        try {
+                            $parsedDate = Carbon::parse($alcivartechDateValue);
+                        } catch (\Exception $e) {
+                            $identifier = $genericFkValue;
+                            if ($chunkSkippedCount < 5) {
+                                Log::warning("DataPointSeeder: Invalid date format in chunk for '{$table}' (ID: {$identifier}).", ['date_value' => $alcivartechDateValue]);
+                            }
+                            $chunkSkippedCount++;
+                            continue;
+                        }
+
+                        $batchInsert[] = [
+                            'type' => $table,
+                            'location' => DB::raw("ST_GeomFromText('POINT({$row->{$fields['lng']}} {$row->{$fields['lat']}})')"),
+                            $fields['foreign_key'] => $specificFkValue,
+                            'generic_foreign_id' => $genericFkValue,
+                            'alcivartech_date' => $parsedDate,
+                            'created_at' => now(),
+                            'updated_at' => now(),
+                        ];
+                    }
+                    
+                    $totalSkippedCount += $chunkSkippedCount;
+                    if ($chunkSkippedCount > 0) {
+                        $this->command->info("Skipped {$chunkSkippedCount} records from the current chunk of {$table}.");
+                        Log::info("DataPointSeeder: Skipped {$chunkSkippedCount} records from the current chunk of '{$table}'.");
+                    }
+
+                    if (!empty($batchInsert)) {
+                        $this->command->info("Preparing to upsert batch of " . count($batchInsert) . " valid records for {$table}.");
+                        Log::info("DataPointSeeder: Preparing to upsert batch of " . count($batchInsert) . " valid records for '{$table}'.");
+                        try {
+                            DB::table('data_points')->upsert(
+                                $batchInsert,
+                                ['type', 'generic_foreign_id'],
+                                ['location', 'updated_at', $fields['foreign_key'], 'alcivartech_date']
+                            );
+                            $totalUpsertedCount += count($batchInsert);
+                            $this->command->info("Successfully upserted batch of " . count($batchInsert) . " records for {$table}. Total upserted so far: {$totalUpsertedCount}");
+                            Log::info("DataPointSeeder: Successfully upserted batch of " . count($batchInsert) . " records for '{$table}'. Total upserted so far for this table: {$totalUpsertedCount}");
+                        } catch (\Exception $e) {
+                            $this->command->error("Error upserting batch for {$table}: " . $e->getMessage());
+                            Log::error("DataPointSeeder: Error upserting batch for '{$table}'.", ['exception' => $e, 'batch_size' => count($batchInsert)]);
+                            // Optionally, decide if you want to stop or continue on batch error
+                        }
+                    } else {
+                        $this->command->info("No valid records to insert in this batch for {$table}.");
+                        Log::info("DataPointSeeder: No valid records to insert in this batch for '{$table}'.");
+                    }
+                    return true; // Continue to the next chunk
+                }, $fields['id_field_for_specific_fk']); // Column to use for chunking, usually the primary key
+
+            $this->command->info("Finished processing for {$table}. Total records processed: {$totalProcessedCount}, Total records upserted: {$totalUpsertedCount}, Total records skipped: {$totalSkippedCount}.");
+            Log::info("DataPointSeeder: Finished processing for '{$table}'. Processed: {$totalProcessedCount}, Upserted: {$totalUpsertedCount}, Skipped: {$totalSkippedCount}.");
 
-        if (!empty($batchInsert)) {
-            DB::table('data_points')->upsert($batchInsert, [$fields['foreign_key']], ['location', 'updated_at']);
-            $this->command->info("Updated " . count($batchInsert) . " records for {$table}.");
+        } catch (\Exception $e) {
+            $this->command->error("Failed to process data for table {$table}: " . $e->getMessage());
+            Log::error("DataPointSeeder: Failed to process data for table '{$table}'.", ['exception' => $e]);
         }
+        $this->command->info("Finished sync logic for table: {$table}");
+        Log::info("DataPointSeeder: Finished sync logic for table '{$table}'.");
     }
 }
diff --git a/database/seeders/DatabaseSeeder.php b/database/seeders/DatabaseSeeder.php
index 9863169..1ca9a5f 100644
--- a/database/seeders/DatabaseSeeder.php
+++ b/database/seeders/DatabaseSeeder.php
@@ -19,6 +19,16 @@ public function run(): void
             BuildingPermitsSeeder::class,
             PropertyViolationsSeeder::class,
             ConstructionOffHoursSeeder::class,
+            FoodInspectionsSeeder::class,
+            CambridgeBuildingPermitsSeeder::class,
+            CambridgeThreeOneOneSeeder::class,
+            CambridgeFoodInspectionSeeder::class,
+            CambridgePropertyViolationsSeeder::class,
+            CambridgeAddressesSeeder::class,
+            CambridgeIntersectionsSeeder::class,
+            CambridgeCrimeDataSeederMerge::class,
+            CambridgePoliceLogSeeder::class,
+            EverettCrimeDataSeeder::class, // Add this line
         ]);
     }
 }
diff --git a/database/seeders/EverettCrimeDataSeeder.php b/database/seeders/EverettCrimeDataSeeder.php
new file mode 100644
index 0000000..f97e3b7
--- /dev/null
+++ b/database/seeders/EverettCrimeDataSeeder.php
@@ -0,0 +1,247 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\CrimeData;
+use League\Csv\Reader;
+use Illuminate\Support\Facades\DB;
+use Illuminate\Support\Facades\Storage;
+use DateTime; // Added for date parsing
+
+class EverettCrimeDataSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+
+    public function run()
+    {
+        $name = 'everett_police_data_combined';
+        // Get all files from the datasets/everett folder in Storage
+        $files = Storage::disk('local')->files('datasets/everett');
+
+        // Filter files to only include those with the specified name in the filename
+        $files = array_filter($files, function ($file) use ($name) {
+            return strpos(basename($file), $name) !== false;
+        });
+
+        // Only proceed if there are any files to process
+        if (!empty($files)) {
+            // Sort files to get the most recent one if multiple versions exist (e.g., by name or modification time)
+            // For simplicity, assuming `end()` is sufficient or only one file matches.
+            $file = end($files);
+            echo "Processing Everett file: " . $file . "\n";
+
+            // Process the most recent file
+            $this->processFile(Storage::path($file));
+        } else {
+            echo "No files found to process for name: " . $name . " in datasets/everett\n";
+        }
+    }
+
+    private function processFile($file)
+    {
+        print_r("Processing Everett file: " . $file . "\n");
+        $csv = Reader::createFromPath($file);
+        $csv->setHeaderOffset(0); // The header is on the first row
+
+        // $records = $csv->getRecords(); // Get records inside the loop to potentially save memory
+
+        $dataBatch = [];
+        $progress = 0;
+        $startTime = microtime(true);
+        $fileCount = count($csv); // More efficient way to count records with league/csv
+        $skipped = 0;
+
+        foreach ($csv->getRecords() as $crime) {
+            $progress++;
+
+            if (empty($crime['case_number'])) {
+                print_r("Skipping record with empty case_number.\n");
+                $skipped++;
+                continue;
+            }
+            
+            if (!is_numeric($crime['incident_latitude']) || !is_numeric($crime['incident_longitude']) || empty($crime['incident_latitude']) || empty($crime['incident_longitude'])) {
+                print_r("Skipping record with invalid or empty lat/long for case " . $crime['case_number'] . ": " . $crime['incident_latitude'] . ", " . $crime['incident_longitude'] . "\n");
+                $skipped++;
+                continue;
+            }
+
+            $occurred_on_datetime_str = null;
+            $year = null;
+            $month = null;
+            $day_of_week = null;
+            $hour = null;
+
+            if (!empty($crime['incident_entry_date'])) {
+                $date_str = trim($crime['incident_entry_date']);
+                // Default to midnight if time is missing or empty
+                $time_str = !empty(trim($crime['incident_time'])) ? trim($crime['incident_time']) : '00:00';
+
+                try {
+                    // Attempt to parse MM/DD/YYYY HH:MM
+                    $dateTimeObj = DateTime::createFromFormat('m/d/Y H:i', $date_str . ' ' . $time_str);
+                    if ($dateTimeObj === false) {
+                         // Attempt to parse MM/DD/YYYY (if time parsing failed or time was just '00:00')
+                        $dateTimeObj = DateTime::createFromFormat('m/d/Y', $date_str);
+                         if ($dateTimeObj === false) {
+                            // If primary date format fails, try YYYY-MM-DD as a fallback if applicable, or just throw.
+                            // For now, stick to the m/d/Y format as per CSV example.
+                            throw new \Exception("Invalid date/time format for: '" . $date_str . ' ' . $time_str . "'");
+                         }
+                         // If only date parsed, set time to midnight
+                         $dateTimeObj->setTime(0, 0, 0);
+                    }
+                    $occurred_on_datetime_str = $dateTimeObj->format('Y-m-d H:i:s');
+                    $year = (int)$dateTimeObj->format('Y');
+                    $month = (int)$dateTimeObj->format('m');
+                    $day_of_week = $dateTimeObj->format('l'); // Full textual representation (e.g., Sunday)
+                    $hour = (int)$dateTimeObj->format('H');
+                } catch (\Exception $e) {
+                    print_r("Error parsing date/time: " . $e->getMessage() . ". Setting date fields to null for case: " . $crime['case_number'] . "\n");
+                }
+            } else {
+                 print_r("Empty incident_entry_date. Setting date fields to null for case: " . $crime['case_number'] . "\n");
+            }
+
+            $incidentType = trim($crime['incident_type'] ?? '');
+            $incidentDetails = trim($crime['incident_description'] ?? '');
+            $fullOffenseDescription = null;
+
+            if (!empty($incidentType) && !empty($incidentDetails)) {
+                $fullOffenseDescription = $incidentType . ' - ' . $incidentDetails;
+            } elseif (!empty($incidentType)) {
+                $fullOffenseDescription = $incidentType;
+            } elseif (!empty($incidentDetails)) {
+                $fullOffenseDescription = $incidentDetails;
+            }
+
+            $streetAddress = trim($crime['incident_address'] ?? '');
+
+            $extraDetails = [];
+            $fieldsToConcat = [
+                'incident_log_file_date' => 'Incident Log File Date',
+                'arrest_name' => 'Arrest Name',
+                'arrest_address' => 'Arrest Address',
+                'arrest_age' => 'Arrest Age',
+                'arrest_date' => 'Arrest Date',
+                'arrest_charges' => 'Arrest Charges',
+            ];
+
+            foreach ($fieldsToConcat as $key => $label) {
+                if (!empty($crime[$key])) {
+                    $extraDetails[] = $label . ": " . trim($crime[$key]);
+                }
+            }
+            $crimeDetails = !empty($extraDetails) ? implode("\n", $extraDetails) : null;
+
+            $dataBatch[] = [
+                'incident_number' => $crime['case_number'],
+                'offense_code' => null, // Not available in Everett data
+                'offense_code_group' => null, // Not available
+                'offense_description' => $fullOffenseDescription,
+                'district' => null, // Not available
+                'reporting_area' => null, // Not available
+                'shooting' => false, // Assuming false as not specified
+                'occurred_on_date' => $occurred_on_datetime_str,
+                'year' => $year,
+                'month' => $month,
+                'day_of_week' => $day_of_week,
+                'hour' => $hour,
+                'ucr_part' => null, // Not available
+                'street' => !empty($streetAddress) ? $streetAddress : null,
+                'lat' => $crime['incident_latitude'],
+                'long' => $crime['incident_longitude'],
+                'location' => '(' . $crime['incident_latitude'] . ', ' . $crime['incident_longitude'] . ')',
+                'language_code' => 'en-US', // Default language code
+                'crime_details' => $crimeDetails,
+                // Assuming crime_start_time and crime_end_time are not available in this CSV
+                // and will remain null or be handled by a different process if needed.
+                'crime_start_time' => $occurred_on_datetime_str, // Or null if not applicable as start time
+                'crime_end_time' => null, // Or derive if possible, otherwise null
+            ];
+
+            if ($progress % self::BATCH_SIZE == 0) {
+                $this->insertOrUpdateBatch($dataBatch);
+                $dataBatch = []; // Reset the batch
+
+                $endTime = microtime(true);
+                $timeTaken = $endTime - $startTime;
+                $this->reportProgress($progress, $fileCount, $timeTaken);
+                $startTime = microtime(true);
+            }
+        }
+
+        if (!empty($dataBatch)) {
+            $this->insertOrUpdateBatch($dataBatch);
+        }
+        
+        print_r("Total records skipped in Everett file: " . $skipped . "\n");
+        print_r("Everett file processed: " . $file . "\n");
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        DB::table((new CrimeData)->getTable())->upsert($dataBatch, ['incident_number'], [
+            'offense_code',
+            'offense_code_group',
+            'offense_description',
+            'district',
+            'reporting_area',
+            'shooting',
+            'occurred_on_date',
+            'year',
+            'month',
+            'day_of_week',
+            'hour',
+            'ucr_part',
+            'street',
+            'lat',
+            'long',
+            'location',
+            'language_code',
+            'crime_details',
+            'crime_start_time',
+            'crime_end_time'
+        ]);
+    }
+
+    private function reportProgress($progress, $fileCount, $timeTaken)
+    {
+        $estimatedTimePerRecord = $timeTaken / self::BATCH_SIZE;
+        $estimatedTimeRemainingFile = $estimatedTimePerRecord * ($fileCount - $progress);
+        
+        // Clear the previous 5 lines (adjust if output changes)
+        echo "\033[5A";  // Move 5 lines up
+        echo "\033[K";   // Clear current line
+        echo $progress . " Everett records processed.\n";
+        echo "\033[K";   // Clear current line
+        echo "Records remaining in this Everett file: " . ($fileCount - $progress) . ".\n";
+        echo "\033[K";   // Clear current line
+        echo "Time for last " . self::BATCH_SIZE . " Everett records: " . round($timeTaken, 2) . " seconds.\n";
+        echo "\033[K";   // Clear current line
+        echo "Estimated time remaining for this Everett file: " . $this->formatTime($estimatedTimeRemainingFile) . ".\n";
+        echo "\033[K"; // Clear an potential extra line from previous output
+        echo "\n"; // Ensure cursor is on a new line for next output
+    }
+
+    private function formatTime(float $timeInSeconds): string
+    {
+        if ($timeInSeconds < 0) $timeInSeconds = 0; // Prevent negative time display
+
+        $hours = floor($timeInSeconds / 3600);
+        $minutes = floor(($timeInSeconds % 3600) / 60);
+        $seconds = $timeInSeconds % 60;
+
+        $formattedTime = [];
+        if ($hours > 0) {
+            $formattedTime[] = $hours . ' hour' . ($hours > 1 ? 's' : '');
+        }
+        if ($minutes > 0 || $hours > 0) { // Show minutes if hours are present or minutes > 0
+            $formattedTime[] = $minutes . ' minute' . ($minutes > 1 ? 's' : '');
+        }
+        $formattedTime[] = round($seconds, 0) . ' second' . (round($seconds, 0) != 1 ? 's' : '');
+
+        return implode(', ', $formattedTime);
+    }
+}
diff --git a/database/seeders/FoodInspectionsSeeder.php b/database/seeders/FoodInspectionsSeeder.php
new file mode 100644
index 0000000..79f267a
--- /dev/null
+++ b/database/seeders/FoodInspectionsSeeder.php
@@ -0,0 +1,161 @@
+<?php
+
+namespace Database\Seeders;
+
+use Illuminate\Database\Seeder;
+use App\Models\FoodInspection;
+use Illuminate\Support\Facades\File;
+use League\Csv\Reader;
+use Illuminate\Support\Facades\DB;
+use Illuminate\Support\Facades\Storage;
+use Carbon\Carbon;
+
+class FoodInspectionsSeeder extends Seeder
+{
+    private const BATCH_SIZE = 500;
+
+    public function run()
+    {
+        $name = 'food-inspections'; // Assuming CSV filename contains this
+        $files = Storage::disk('local')->files('datasets');
+
+        $files = array_filter($files, function ($file) use ($name) {
+            return strpos(strtolower(basename($file)), $name) !== false;
+        });
+
+        if (!empty($files)) {
+            // Sort files by modification time to get the most recent one if multiple exist
+            usort($files, function ($a, $b) {
+                return Storage::disk('local')->lastModified($b) <=> Storage::disk('local')->lastModified($a);
+            });
+            $file = $files[0]; // Get the most recent file
+            $this->command->info("Processing file: " . $file);
+            $this->processFile(Storage::path($file));
+        } else {
+            $this->command->warn("No files found to process for name: " . $name);
+        }
+    }
+
+    private function processFile($filePath)
+    {
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0);
+            $csv->setEscape('');
+
+            $records = $csv->getRecords();
+            $dataBatch = [];
+            $progress = 0;
+
+            foreach ($records as $record) {
+                $progress++;
+
+                // Convert empty strings to null
+                foreach ($record as $key => $value) {
+                    if ($value === '') {
+                        $record[$key] = null;
+                    }
+                }
+
+                // Parse location into latitude and longitude
+                $latitude = null;
+                $longitude = null;
+                if (!empty($record['location'])) {
+                    $locationParts = explode(',', str_replace(['(', ')'], '', $record['location']));
+                    if (count($locationParts) === 2) {
+                        $latitude = trim($locationParts[0]);
+                        $longitude = trim($locationParts[1]);
+                    }
+                }
+                
+                $dataBatch[] = [
+                    'external_id' => $record['_id'],
+                    'businessname' => $record['businessname'],
+                    'dbaname' => $record['dbaname'],
+                    'legalowner' => $record['legalowner'],
+                    'namelast' => $record['namelast'],
+                    'namefirst' => $record['namefirst'],
+                    'licenseno' => $record['licenseno'],
+                    'issdttm' => $this->formatDate($record['issdttm']),
+                    'expdttm' => $this->formatDate($record['expdttm']),
+                    'licstatus' => $record['licstatus'],
+                    'licensecat' => $record['licensecat'],
+                    'descript' => $record['descript'],
+                    'result' => $record['result'],
+                    'resultdttm' => $this->formatDate($record['resultdttm']),
+                    'violation' => $record['violation'],
+                    'viol_level' => $record['viol_level'],
+                    'violdesc' => $record['violdesc'],
+                    'violdttm' => $this->formatDate($record['violdttm']),
+                    'viol_status' => $record['viol_status'],
+                    'status_date' => $this->formatDate($record['status_date']),
+                    'comments' => $record['comments'],
+                    'address' => $record['address'],
+                    'city' => $record['city'],
+                    'state' => $record['state'],
+                    'zip' => $record['zip'],
+                    'property_id' => $record['property_id'],
+                    'latitude' => $this->parseFloat($latitude),
+                    'longitude' => $this->parseFloat($longitude),
+                    'language_code' => 'en-US', // Assuming English
+                    'created_at' => now(),
+                    'updated_at' => now(),
+                ];
+
+                if ($progress % self::BATCH_SIZE == 0) {
+                    $this->insertOrUpdateBatch($dataBatch);
+                    $dataBatch = []; // Reset the batch
+                    $this->command->info("Processed {$progress} records...");
+                }
+            }
+
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+            }
+
+            $this->command->info("File processed successfully: " . basename($filePath));
+        } catch (\Exception $e) {
+            $this->command->error("Error processing file: " . basename($filePath) . " - " . $e->getMessage());
+        }
+    }
+
+    private function formatDate($dateString)
+    {
+        if (empty($dateString)) {
+            return null;
+        }
+        try {
+            // Attempt to parse with various common formats including timezone
+            return Carbon::parse($dateString)->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            // If parsing fails, log or handle as needed, return null or original
+            $this->command->warn("Could not parse date: {$dateString}");
+            return null;
+        }
+    }
+
+    private function parseFloat($value)
+    {
+        return is_numeric($value) ? (float)$value : null;
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        if (empty($dataBatch)) {
+            return;
+        }
+        
+        $columnsToUpdate = array_keys($dataBatch[0]);
+        // Remove 'external_id' and 'created_at' from columns to update on duplicate
+        $columnsToUpdate = array_filter($columnsToUpdate, function ($column) {
+            return !in_array($column, ['external_id', 'created_at']);
+        });
+
+
+        DB::table((new FoodInspection)->getTable())->upsert(
+            $dataBatch,
+            ['external_id'], // Unique key for identifying records
+            array_values($columnsToUpdate) // Columns to update on duplicate
+        );
+    }
+}
diff --git a/database/seeders/ThreeOneOneSeeder.php b/database/seeders/ThreeOneOneSeeder.php
index fad2e21..ed32bd1 100644
--- a/database/seeders/ThreeOneOneSeeder.php
+++ b/database/seeders/ThreeOneOneSeeder.php
@@ -6,9 +6,12 @@
 use Illuminate\Support\Facades\DB;
 use Illuminate\Support\Facades\Log;
 use Illuminate\Support\Facades\Storage;
+use League\Csv\Reader; // Import League CSV Reader
 
 class ThreeOneOneSeeder extends Seeder
 {
+    private const BATCH_SIZE = 500; // Define batch size for DB operations
+
     /**
      * Run the database seeds.
      *
@@ -26,11 +29,12 @@ public function run(): void
 
         // Only proceed if there are any files to process
         if (!empty($files)) {
+            sort($files); // Ensure consistent processing order, e.g., oldest to newest or vice-versa
             $file = end($files); // Process the most recent file
-            echo "Processing file: " . $file . "\n";
+            $this->command->info("Processing file: " . $file);
             $this->processFile(Storage::path($file));
         } else {
-            echo "No files found to process for name: " . $name . "\n";
+            $this->command->warn("No files found to process for name: " . $name);
         }
     }
 
@@ -43,30 +47,83 @@ public function run(): void
     private function processFile(string $filePath): void
     {
         if (!file_exists($filePath)) {
-            echo "File not found: $filePath\n";
+            $this->command->error("File not found: $filePath");
             return;
         }
 
-        // Read and decode the file content (assuming CSV)
-        $rows = array_map('str_getcsv', file($filePath));
-        $header = array_shift($rows); // Extract header row
+        try {
+            $csv = Reader::createFromPath($filePath, 'r');
+            $csv->setHeaderOffset(0); // The header is on the first row
+            $records = $csv->getRecords(); // Get an iterator for the records
+
+            $dataBatch = [];
+            $rowCount = 0;
+            $processedCount = 0;
 
-        foreach ($rows as $index => $row) {
-            try {
-                // Combine header and row data into an associative array
-                $rowData = array_combine($header, $row);
+            // It's difficult to get an accurate total row count from the iterator without iterating twice
+            // or loading everything into memory. We'll report progress based on processed batches.
 
-                // Validate and clean the data
-                $cleanedData = $this->validateAndCleanData($rowData);
+            foreach ($records as $index => $row) {
+                $rowCount++;
+                try {
+                    // $rowData is already an associative array from League\Csv\Reader
+                    $cleanedData = $this->validateAndCleanData($row);
+                    $dataBatch[] = $cleanedData;
 
-                // upsert the data into the database matching on case_enquiry_id
-                DB::table('three_one_one_cases')->upsert($cleanedData, ['case_enquiry_id']);
-                
-            } catch (\Exception $e) {
-                // Log errors without interrupting the seeding process
-                Log::error("Error processing row $index in file $filePath: " . $e->getMessage());
+                    if (count($dataBatch) >= self::BATCH_SIZE) {
+                        $this->insertOrUpdateBatch($dataBatch);
+                        $processedCount += count($dataBatch);
+                        $dataBatch = []; // Reset the batch
+                        $this->command->info("Processed {$processedCount} records...");
+                    }
+                } catch (\Exception $e) {
+                    // Log errors without interrupting the seeding process
+                    Log::error("Error processing row " . ($index + 1) . " in file $filePath: " . $e->getMessage() . " Data: " . json_encode($row));
+                    $this->command->warn("Skipped row " . ($index + 1) . " due to error: " . $e->getMessage());
+                }
             }
+
+            // Process any remaining data in the last batch
+            if (!empty($dataBatch)) {
+                $this->insertOrUpdateBatch($dataBatch);
+                $processedCount += count($dataBatch);
+            }
+            $this->command->info("Finished processing file: " . basename($filePath) . ". Total records processed: {$processedCount}. Total rows read: {$rowCount}.");
+
+        } catch (\Exception $e) {
+            $this->command->error("Failed to read or process CSV file {$filePath}: " . $e->getMessage());
+        }
+    }
+
+    private function insertOrUpdateBatch(array $dataBatch): void
+    {
+        if (empty($dataBatch)) {
+            return;
+        }
+        // Ensure all items in batch have the case_enquiry_id for upsert
+        $validBatch = array_filter($dataBatch, fn($item) => isset($item['case_enquiry_id']));
+
+        if (empty($validBatch)) {
+            $this->command->warn("A batch of records was skipped as no valid 'case_enquiry_id' was found.");
+            return;
+        }
+        
+        // Define columns to update in case of conflict
+        $updateColumns = array_keys($validBatch[0]);
+        // Remove 'case_enquiry_id' from updateColumns as it's the unique key
+        $updateColumns = array_filter($updateColumns, fn($col) => $col !== 'case_enquiry_id');
+        // Ensure 'created_at' is not updated on conflict, 'updated_at' should be.
+        if (!in_array('updated_at', $updateColumns) && array_key_exists('updated_at', $validBatch[0])) {
+             // This logic might be too simplistic if 'updated_at' isn't always present or needs special handling.
+             // For upsert, typically all non-key fields are listed for update.
         }
+
+
+        DB::table('three_one_one_cases')->upsert(
+            $validBatch,
+            ['case_enquiry_id'], // Unique key(s)
+            $updateColumns // Columns to update on duplicate
+        );
     }
 
     /**
@@ -108,9 +165,13 @@ private function validateAndCleanData(array $row): array
             'latitude' => $this->validateDouble($row['latitude'] ?? null),
             'longitude' => $this->validateDouble($row['longitude'] ?? null),
             'source' => $row['source'] ?? null,
-            'checksum' => $row['checksum'] ?? null,
-            'ward_number' => $row['ward_number'] ?? null,
-            'language_code' => 'en-US',
+            // 'checksum' => $row['checksum'] ?? null, // Checksum might not be needed in DB
+            'ward_number' => $row['ward_number'] ?? null, // Often redundant if 'ward' is present
+            'language_code' => 'en-US', // Default
+            'threeoneonedescription' => $row['description'] ?? null, 
+            'source_city' => 'Boston', 
+            'created_at' => now(), // Add created_at
+            'updated_at' => now(), // Add updated_at
         ];
     }
 
@@ -133,21 +194,28 @@ private function validateDouble($value): ?float
         if (is_null($value)) {
             return null;
         }
+        if (empty($value)) {
+            return null; // Allow null or empty values
+        }
         if (!is_numeric($value)) {
-            throw new \Exception("Invalid double value: $value");
+            throw new \Exception("Invalid double value: \"$value\"");
         }
         return floatval($value);
     }
 
     private function validateDateTime($value): ?string
     {
-        if (is_null($value)) {
+        if (is_null($value) || empty(trim($value))) { // Also check for empty string
             return null;
         }
-        $date = date_create($value);
-        if (!$date) {
-            throw new \Exception("Invalid datetime value: $value");
+        try {
+            // Attempt to parse with Carbon for more robust date handling
+            $date = \Carbon\Carbon::parse($value);
+            return $date->format('Y-m-d H:i:s');
+        } catch (\Exception $e) {
+            // Log or handle specific invalid date formats if necessary
+            // For now, throw exception to be caught by the row processing loop
+            throw new \Exception("Invalid datetime value: $value. Error: " . $e->getMessage());
         }
-        return $date->format('Y-m-d H:i:s');
     }
 }
diff --git a/output.txt b/output.txt
deleted file mode 100644
index cff239e..0000000
--- a/output.txt
+++ /dev/null
@@ -1,652910 +0,0 @@
-
-   INFO  Seeding database.  

diff --git a/package-lock.json b/package-lock.json
index c094c35..8741ec4 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -9,6 +9,7 @@
                 "leaflet.markercluster": "^1.5.3",
                 "markdown-it": "^14.1.0",
                 "markdown-it-link-attributes": "^4.0.1",
+                "vue-chartjs": "^5.3.2",
                 "vue-echarts": "^6.6.1"
             },
             "devDependencies": {
@@ -492,6 +493,12 @@
                 "@jridgewell/sourcemap-codec": "^1.4.14"
             }
         },
+        "node_modules/@kurkle/color": {
+            "version": "0.3.4",
+            "resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.4.tgz",
+            "integrity": "sha512-M5UknZPHRu3DEDWoipU6sE8PdkZ6Z/S+v4dD+Ke8IaNlpdSQah50lz1KtcFBa2vsdOnwbbnxJwVM4wty6udA5w==",
+            "peer": true
+        },
         "node_modules/@nodelib/fs.scandir": {
             "version": "2.1.5",
             "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
@@ -926,6 +933,18 @@
                 }
             ]
         },
+        "node_modules/chart.js": {
+            "version": "4.4.9",
+            "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.4.9.tgz",
+            "integrity": "sha512-EyZ9wWKgpAU0fLJ43YAEIF8sr5F2W3LqbS40ZJyHIner2lY14ufqv2VMp69MAiZ2rpwxEUxEhIH/0U3xyRynxg==",
+            "peer": true,
+            "dependencies": {
+                "@kurkle/color": "^0.3.0"
+            },
+            "engines": {
+                "pnpm": ">=8"
+            }
+        },
         "node_modules/chokidar": {
             "version": "3.6.0",
             "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
@@ -2591,6 +2610,15 @@
                 }
             }
         },
+        "node_modules/vue-chartjs": {
+            "version": "5.3.2",
+            "resolved": "https://registry.npmjs.org/vue-chartjs/-/vue-chartjs-5.3.2.tgz",
+            "integrity": "sha512-NrkbRRoYshbXbWqJkTN6InoDVwVb90C0R7eAVgMWcB9dPikbruaOoTFjFYHE/+tNPdIe6qdLCDjfjPHQ0fw4jw==",
+            "peerDependencies": {
+                "chart.js": "^4.1.1",
+                "vue": "^3.0.0-0 || ^2.7.0"
+            }
+        },
         "node_modules/vue-echarts": {
             "version": "6.7.3",
             "resolved": "https://registry.npmjs.org/vue-echarts/-/vue-echarts-6.7.3.tgz",
diff --git a/package.json b/package.json
index dc67575..a2534df 100644
--- a/package.json
+++ b/package.json
@@ -25,6 +25,7 @@
         "leaflet.markercluster": "^1.5.3",
         "markdown-it": "^14.1.0",
         "markdown-it-link-attributes": "^4.0.1",
+        "vue-chartjs": "^5.3.2",
         "vue-echarts": "^6.6.1"
     }
 }
diff --git a/public/images/foodinspectionicon.svg b/public/images/foodinspectionicon.svg
new file mode 100644
index 0000000..771806c
--- /dev/null
+++ b/public/images/foodinspectionicon.svg
@@ -0,0 +1,284 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
+              "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+
+<svg xmlns="http://www.w3.org/2000/svg"
+     width="12.1111in" height="12.0972in"
+     viewBox="0 0 872 871">
+  <path id="Selection"
+        fill="black" stroke="black" stroke-width="1"
+        d="M 411.00,0.21
+           C 411.00,0.21 457.00,0.21 457.00,0.21
+             457.00,0.21 467.00,0.91 467.00,0.91
+             502.62,3.35 536.95,9.73 571.00,20.66
+             625.22,38.05 673.97,65.37 718.00,101.46
+             731.25,112.32 743.44,124.50 755.09,137.00
+             806.86,192.60 840.63,254.51 859.52,328.00
+             866.27,354.27 869.25,380.08 871.09,407.00
+             871.09,407.00 872.00,419.00 872.00,419.00
+             872.00,419.00 872.00,451.00 872.00,451.00
+             872.00,451.00 867.72,501.00 867.72,501.00
+             859.74,560.18 835.68,624.14 802.92,674.00
+             762.63,735.33 709.51,783.80 645.00,818.69
+             598.92,843.61 547.04,861.07 495.00,867.72
+             469.38,870.99 443.81,871.30 418.00,871.00
+             418.00,871.00 395.00,869.17 395.00,869.17
+             358.56,865.64 333.90,860.54 299.00,849.34
+             259.33,836.62 216.70,815.62 183.00,791.15
+             134.34,755.82 97.39,719.05 65.05,668.00
+             32.02,615.85 10.91,554.16 3.28,493.00
+             0.01,466.74 -0.31,440.45 0.00,414.00
+             0.00,414.00 1.00,404.00 1.00,404.00
+             1.00,404.00 1.00,396.00 1.00,396.00
+             1.00,396.00 6.42,356.00 6.42,356.00
+             13.75,315.39 27.20,276.05 45.26,239.00
+             45.26,239.00 61.60,210.00 61.60,210.00
+             107.85,132.92 177.86,72.17 260.00,35.86
+             275.00,29.23 297.14,21.70 313.00,16.88
+             336.50,9.75 362.63,5.19 387.00,2.28
+             387.00,2.28 411.00,0.21 411.00,0.21 Z
+           M 426.00,23.14
+           C 426.00,23.14 397.00,25.17 397.00,25.17
+             373.69,27.40 347.51,32.01 325.00,38.43
+             225.90,66.67 143.77,125.95 87.95,213.00
+             78.51,227.73 69.62,243.09 62.31,259.00
+             49.83,286.18 38.35,318.66 32.45,348.00
+             13.74,440.99 25.27,538.92 67.81,624.00
+             91.61,671.60 132.83,721.14 174.00,754.54
+             208.97,782.91 248.85,805.34 291.00,821.05
+             323.34,833.10 362.57,842.57 397.00,845.09
+             397.00,845.09 407.00,846.00 407.00,846.00
+             407.00,846.00 426.00,847.00 426.00,847.00
+             426.00,847.00 449.00,847.00 449.00,847.00
+             449.00,847.00 461.00,846.09 461.00,846.09
+             506.09,843.00 547.83,834.50 590.00,817.80
+             680.52,781.94 758.04,712.63 802.74,626.00
+             819.61,593.32 830.56,560.82 838.42,525.00
+             843.17,503.41 845.58,481.99 847.09,460.00
+             847.09,460.00 848.00,448.00 848.00,448.00
+             848.00,448.00 848.00,423.00 848.00,423.00
+             848.00,423.00 846.96,411.00 846.96,411.00
+             846.96,411.00 846.96,401.00 846.96,401.00
+             843.97,370.93 838.96,340.90 829.98,312.00
+             788.87,179.76 687.94,81.56 556.00,40.98
+             528.35,32.47 499.84,27.02 471.00,24.91
+             471.00,24.91 461.00,24.00 461.00,24.00
+             461.00,24.00 442.00,23.14 442.00,23.14
+             442.00,23.14 426.00,23.14 426.00,23.14 Z
+           M 663.00,242.00
+           C 666.75,237.05 683.66,229.02 689.97,226.62
+             689.97,226.62 702.28,221.27 702.28,221.27
+             702.28,221.27 726.09,215.06 726.09,215.06
+             726.09,215.06 737.00,215.06 737.00,215.06
+             745.80,215.01 741.95,215.48 748.09,216.75
+             753.95,217.96 753.99,216.94 760.13,219.86
+             768.04,223.62 783.64,230.63 785.00,240.00
+             789.88,242.50 790.99,246.40 793.31,251.13
+             798.67,262.03 797.85,260.57 800.22,272.00
+             801.47,278.03 802.84,278.49 801.00,285.00
+             803.46,287.20 802.98,288.82 803.00,292.00
+             803.00,292.00 803.00,322.00 803.00,322.00
+             802.98,325.18 803.46,326.80 801.00,329.00
+             803.43,337.55 800.93,338.45 800.11,344.04
+             800.11,344.04 798.77,355.83 798.77,355.83
+             798.77,355.83 797.22,361.09 797.22,361.09
+             797.22,361.09 795.85,368.83 795.85,368.83
+             795.85,368.83 791.43,383.17 791.43,383.17
+             790.11,387.48 788.29,397.29 785.00,400.00
+             785.85,404.70 783.07,410.81 781.18,415.15
+             781.18,415.15 776.27,427.58 776.27,427.58
+             776.27,427.58 771.73,437.28 771.73,437.28
+             771.73,437.28 761.42,457.09 761.42,457.09
+             746.64,484.01 731.62,506.78 708.54,527.62
+             708.54,527.62 681.00,547.00 681.00,547.00
+             681.00,547.00 678.00,546.00 678.00,546.00
+             674.88,550.22 665.17,553.36 660.02,554.83
+             655.47,556.13 654.18,557.30 649.00,558.05
+             649.00,558.05 642.09,558.05 642.09,558.05
+             637.11,559.16 640.36,559.99 631.00,560.00
+             619.51,560.01 622.07,558.14 614.00,558.00
+             614.00,558.00 583.00,562.00 583.00,562.00
+             580.88,564.46 579.14,564.27 576.28,565.60
+             571.50,567.83 567.99,570.11 563.71,573.15
+             552.91,580.82 544.66,589.94 536.44,600.21
+             536.44,600.21 523.79,619.39 523.79,619.39
+             523.79,619.39 517.75,627.28 517.75,627.28
+             517.75,627.28 501.30,652.28 501.30,652.28
+             498.01,657.29 489.57,671.26 485.00,674.00
+             485.00,674.00 486.00,677.00 486.00,677.00
+             486.00,677.00 472.45,695.25 472.45,695.25
+             472.45,695.25 469.20,702.87 469.20,702.87
+             469.20,702.87 476.45,714.44 476.45,714.44
+             476.45,714.44 494.24,737.88 494.24,737.88
+             494.24,737.88 511.23,760.69 511.23,760.69
+             511.23,760.69 529.03,783.29 529.03,783.29
+             529.03,783.29 555.00,817.00 555.00,817.00
+             555.00,817.00 555.00,819.00 555.00,819.00
+             555.00,819.00 519.00,828.00 519.00,828.00
+             516.15,828.59 507.41,830.89 505.10,830.52
+             500.74,829.82 497.46,822.86 497.00,819.00
+             497.00,819.00 483.00,800.00 483.00,800.00
+             483.00,800.00 484.00,797.00 484.00,797.00
+             479.09,794.15 476.64,788.17 473.49,783.61
+             473.49,783.61 455.07,754.08 455.07,754.08
+             451.81,748.91 447.56,744.95 446.00,739.00
+             446.00,739.00 440.27,746.28 440.27,746.28
+             437.08,751.24 435.27,757.84 430.00,761.00
+             429.26,767.19 424.31,772.23 421.13,777.42
+             418.68,781.43 418.18,784.22 414.00,787.00
+             414.00,787.00 415.00,790.00 415.00,790.00
+             409.55,794.73 406.07,802.47 402.32,808.57
+             402.32,808.57 387.00,834.00 387.00,834.00
+             371.67,831.24 347.09,828.18 333.00,823.00
+             338.39,813.02 346.28,804.36 352.92,795.20
+             352.92,795.20 396.86,735.75 396.86,735.75
+             396.86,735.75 414.29,712.17 414.29,712.17
+             415.99,709.77 419.96,705.76 420.14,703.00
+             420.32,700.19 415.93,694.27 414.28,691.83
+             414.28,691.83 404.04,676.00 404.04,676.00
+             400.80,671.64 397.69,669.75 397.00,664.00
+             393.29,661.78 392.13,658.87 389.77,655.42
+             389.77,655.42 377.02,636.42 377.02,636.42
+             377.02,636.42 365.97,620.71 365.97,620.71
+             355.14,604.87 343.38,587.63 326.91,577.01
+             310.31,566.30 300.67,567.00 282.00,567.00
+             275.51,567.00 260.37,567.30 256.00,562.00
+             250.62,561.68 243.65,556.47 239.58,552.97
+             230.63,545.27 221.57,537.15 214.14,527.92
+             214.14,527.92 200.26,511.99 200.26,511.99
+             200.26,511.99 186.69,494.31 186.69,494.31
+             186.69,494.31 179.72,485.59 179.72,485.59
+             179.72,485.59 167.54,466.28 167.54,466.28
+             167.54,466.28 145.52,428.97 145.52,428.97
+             145.52,428.97 131.96,404.42 131.96,404.42
+             129.41,399.62 126.29,395.53 126.00,390.00
+             123.14,387.83 121.84,384.20 120.27,381.00
+             117.79,375.93 113.29,369.45 113.00,364.00
+             108.27,361.01 103.51,349.48 100.85,344.13
+             100.85,344.13 83.53,309.58 83.53,309.58
+             83.53,309.58 78.58,299.09 78.58,299.09
+             76.23,294.73 67.88,282.24 71.29,277.83
+             77.21,270.18 82.37,281.84 86.00,285.00
+             86.00,285.00 85.00,288.00 85.00,288.00
+             90.17,291.00 92.65,298.03 95.77,302.99
+             98.44,307.25 100.70,308.84 101.00,314.00
+             105.39,316.63 110.98,327.13 113.72,331.85
+             113.72,331.85 127.87,354.28 127.87,354.28
+             131.75,360.71 138.76,373.19 144.00,378.00
+             144.00,378.00 143.00,381.00 143.00,381.00
+             147.42,383.57 149.95,388.67 152.69,392.87
+             156.47,398.69 168.19,416.45 173.00,420.00
+             173.00,420.00 172.00,423.00 172.00,423.00
+             177.14,425.98 181.04,433.05 184.49,437.83
+             184.49,437.83 199.22,456.93 199.22,456.93
+             199.22,456.93 204.72,462.65 204.72,462.65
+             209.62,468.61 210.47,471.93 218.00,476.00
+             217.98,473.67 218.04,471.31 217.45,469.04
+             217.45,469.04 205.42,445.61 205.42,445.61
+             202.50,440.96 197.32,434.41 197.00,429.00
+             192.45,426.27 190.67,420.58 187.92,416.08
+             187.92,416.08 174.40,392.27 174.40,392.27
+             171.39,386.79 168.34,384.87 168.00,378.00
+             163.80,375.21 155.59,359.91 155.00,355.00
+             151.90,352.65 150.58,348.56 148.85,345.13
+             148.85,345.13 139.49,328.07 139.49,328.07
+             139.49,328.07 125.60,303.58 125.60,303.58
+             125.60,303.58 113.42,279.27 113.42,279.27
+             105.30,263.17 100.38,259.08 110.00,254.00
+             118.81,262.09 126.39,278.47 132.93,288.83
+             136.13,293.90 142.41,302.30 143.00,308.00
+             143.00,308.00 152.22,320.95 152.22,320.95
+             152.22,320.95 167.75,346.05 167.75,346.05
+             167.75,346.05 172.00,356.00 172.00,356.00
+             177.06,358.59 177.25,361.67 180.38,366.20
+             180.38,366.20 193.25,386.29 193.25,386.29
+             196.31,390.72 200.35,395.56 201.00,401.00
+             206.46,404.27 209.60,410.96 213.36,415.92
+             221.61,426.81 232.40,442.82 244.00,450.00
+             243.17,440.23 238.75,434.72 234.18,426.73
+             234.18,426.73 224.60,409.58 224.60,409.58
+             221.51,404.05 216.35,394.17 212.00,390.00
+             212.00,390.00 213.00,387.00 213.00,387.00
+             209.94,384.69 205.81,376.74 203.78,373.13
+             203.78,373.13 196.60,361.58 196.60,361.58
+             196.60,361.58 190.56,350.25 190.56,350.25
+             188.00,345.88 184.26,339.97 184.00,335.00
+             180.49,332.78 180.03,330.65 178.07,327.17
+             174.85,321.43 168.33,312.34 168.00,306.00
+             163.51,302.86 159.26,292.99 156.67,287.85
+             156.67,287.85 141.96,259.42 141.96,259.42
+             141.96,259.42 134.48,243.75 134.48,243.75
+             133.30,237.55 139.58,236.78 144.00,238.00
+             144.00,238.00 143.00,240.00 143.00,240.00
+             147.37,242.62 148.15,246.22 150.59,250.41
+             150.59,250.41 162.63,270.73 162.63,270.73
+             162.63,270.73 177.42,294.08 177.42,294.08
+             177.42,294.08 181.71,301.73 181.71,301.73
+             181.71,301.73 194.43,321.75 194.43,321.75
+             194.43,321.75 198.59,329.41 198.59,329.41
+             202.20,335.09 213.32,350.32 214.00,356.00
+             214.00,356.00 222.11,366.20 222.11,366.20
+             222.11,366.20 235.09,385.20 235.09,385.20
+             235.09,385.20 249.73,404.66 249.73,404.66
+             249.73,404.66 256.46,414.05 256.46,414.05
+             256.46,414.05 279.00,436.00 279.00,436.00
+             279.00,436.00 281.00,433.00 281.00,433.00
+             281.00,433.00 275.90,423.75 275.90,423.75
+             275.90,423.75 270.18,414.72 270.18,414.72
+             270.18,414.72 263.42,402.61 263.42,402.61
+             263.42,402.61 230.13,342.95 230.13,342.95
+             230.13,342.95 216.41,318.27 216.41,318.27
+             216.41,318.27 202.10,291.72 202.10,291.72
+             202.10,291.72 197.00,280.00 197.00,280.00
+             193.40,277.27 190.42,269.19 188.24,264.95
+             188.24,264.95 175.55,240.92 175.55,240.92
+             172.50,235.65 168.30,229.13 168.00,223.00
+             163.82,219.16 172.28,216.18 175.59,218.18
+             177.07,219.08 181.08,225.53 182.44,227.44
+             182.44,227.44 189.80,239.39 189.80,239.39
+             193.44,244.69 200.25,252.74 201.00,259.00
+             205.86,261.92 214.12,276.44 217.21,281.87
+             217.21,281.87 231.36,302.42 231.36,302.42
+             234.81,307.57 239.68,316.04 244.00,320.00
+             244.00,320.00 243.00,323.00 243.00,323.00
+             246.72,325.16 247.44,327.39 250.08,330.58
+             256.78,338.66 265.37,356.36 273.00,362.00
+             273.00,362.00 272.00,365.00 272.00,365.00
+             272.00,365.00 280.15,374.01 280.15,374.01
+             280.15,374.01 297.72,397.07 297.72,397.07
+             297.72,397.07 344.42,453.46 344.42,453.46
+             344.42,453.46 357.00,472.00 357.00,472.00
+             357.00,472.00 356.00,475.00 356.00,475.00
+             359.70,478.05 360.99,487.30 361.00,492.00
+             361.00,492.00 361.00,503.00 361.00,503.00
+             360.96,511.07 359.53,509.63 358.21,517.00
+             358.21,517.00 358.21,534.00 358.21,534.00
+             358.01,542.67 361.70,551.97 365.57,559.73
+             368.31,565.22 371.68,568.65 372.00,575.00
+             374.56,576.94 375.01,578.86 376.94,581.34
+             376.94,581.34 391.46,601.09 391.46,601.09
+             391.46,601.09 428.44,649.39 428.44,649.39
+             432.68,655.23 441.37,664.80 443.00,671.00
+             443.00,671.00 469.87,636.00 469.87,636.00
+             469.87,636.00 483.64,618.73 483.64,618.73
+             483.64,618.73 488.66,611.21 488.66,611.21
+             488.66,611.21 503.29,592.74 503.29,592.74
+             503.29,592.74 516.28,573.85 516.28,573.85
+             516.28,573.85 526.00,559.00 526.00,559.00
+             525.02,553.56 527.98,551.76 529.56,546.83
+             531.22,541.64 533.99,528.36 533.99,523.00
+             533.99,516.77 531.77,506.91 529.68,501.00
+             528.01,496.31 525.08,492.07 526.00,487.00
+             522.53,484.13 523.56,481.14 522.54,477.17
+             519.06,463.64 519.98,457.66 520.00,444.00
+             520.01,435.13 521.18,431.23 523.04,422.96
+             523.04,422.96 525.39,411.28 525.39,411.28
+             527.92,402.70 534.42,389.02 538.40,380.72
+             546.39,364.06 553.93,352.81 564.44,337.75
+             564.44,337.75 574.27,323.66 574.27,323.66
+             574.27,323.66 586.03,310.54 586.03,310.54
+             586.03,310.54 590.23,304.66 590.23,304.66
+             590.23,304.66 612.13,281.63 612.13,281.63
+             620.97,272.79 637.58,258.54 647.75,251.44
+             651.57,248.77 658.86,242.79 663.00,242.00 Z" />
+</svg>
diff --git a/public/images/logoSplash.png b/public/images/logoSplash.png
index 25f0a91..888c214 100644
Binary files a/public/images/logoSplash.png and b/public/images/logoSplash.png differ
diff --git a/resources/css/app.css b/resources/css/app.css
index 367e786..022c991 100644
--- a/resources/css/app.css
+++ b/resources/css/app.css
@@ -20,6 +20,9 @@ :root {
   --permit-icon-color-transparent: rgba(138, 231, 138, 0.9);
   --property-violation-icon-color-transparent: rgba(255, 255, 0, 0.8);
   --construction-off-hour-icon-color-transparent: rgba(114, 203, 209, 0.8);
+  /* add an orange icon for food violations */
+  --food-inspection-icon-color: rgb(255, 165, 0);
+  --food-inspection-icon-color-transparent: rgba(255, 165, 0, 0.8);
 
 
   --center-icon-border-color: black;
@@ -47,16 +50,154 @@ nav {
 button {
   filter: grayscale(0.7);
 }
+/* ...existing code... */
+.assistant-message div {
+  color: #ffffff;
+}
 
+/* Enhanced Typography for Assistant Messages */
+.assistant-message h1,
+.assistant-message h2,
+.assistant-message h3,
+.assistant-message h4,
+.assistant-message h5,
+.assistant-message h6 {
+  font-weight: 600; /* Semi-bold for headings */
+  line-height: 1.3;
+  margin-top: 0.8em;
+  margin-bottom: 0.4em;
+  color: #e5e7eb; /* Lighter gray for better contrast on dark bg */
+}
+
+.assistant-message h1 {
+  font-size: 2.25rem; /* 36px */
+  border-bottom: 1px solid #4b5563; /* Subtle separator */
+  padding-bottom: 0.3em;
+}
+.assistant-message h2 {
+  font-size: 1.875rem; /* 30px */
+  border-bottom: 1px solid #4b5563; /* Subtle separator */
+  padding-bottom: 0.2em;
+}
+.assistant-message  h3 {
+  font-size: 1.5rem; /* 24px */
+}
+.assistant-message h4 {
+  font-size: 1.25rem;  /* 20px */
+}
+.assistant-message h5 {
+  font-size: 1.125rem; /* 18px */
+}
+.assistant-message h6 {
+  font-size: 1rem; /* 16px */
+  color: #d1d5db; /* Slightly dimmer for less emphasis */
+}
+
+.assistant-message p, 
+.user-message { /* Apply base font size to user message text directly */
+  font-size: 1rem; /* 16px - standard readable size */
+  line-height: 1.6;
+  margin-top: 0;
+  margin-bottom: 0.75em; /* Space between paragraphs */
+}
+
+/* Indent only the first paragraph if it's directly inside the assistant message div */
+.assistant-message > div > p:first-child {
+  text-indent: 1.5em;
+}
+/* Remove indent if the first child is a heading or other block element */
+.assistant-message > div > h1:first-child + p,
+.assistant-message > div > h2:first-child + p,
+.assistant-message > div > h3:first-child + p,
+.assistant-message > div > h4:first-child + p,
+.assistant-message > div > h5:first-child + p,
+.assistant-message > div > h6:first-child + p,
+.assistant-message > div > ul:first-child + p,
+.assistant-message > div > ol:first-child + p,
+.assistant-message > div > pre:first-child + p,
+.assistant-message > div > blockquote:first-child + p {
+  text-indent: 0;
+}
+
+
+.assistant-message ul,
+.assistant-message ol {
+  font-size: 1rem;
+  margin-top: 0.5em;
+  margin-bottom: 0.75em;
+  padding-left: 1.5em; /* Standard indentation for lists */
+}
+.assistant-message li {
+  font-size: 1rem;
+  margin-bottom: 0.3em; /* Space between list items */
+  line-height: 1.6;
+}
+.assistant-message ul li {
+  list-style-type: disc;
+}
+.assistant-message ol li {
+  list-style-type: decimal;
+}
+
+.assistant-message a {
+  font-size: 1rem;
+  color: #60a5fa; /* Tailwind's sky-400 for links */
+  text-decoration: underline;
+  text-decoration-thickness: 1px;
+  text-underline-offset: 2px;
+}
+.assistant-message a:hover {
+  color: #93c5fd; /* Lighter shade on hover */
+  text-decoration-thickness: 2px;
+}
+
+.assistant-message code {
+  font-size: 0.9rem; /* Slightly smaller for inline code */
+  background-color: #4b5563; /* gray-600 */
+  padding: 0.2em 0.4em;
+  border-radius: 0.25rem;
+  font-family: 'Courier New', Courier, monospace; /* Monospace font */
+  color: #e5e7eb;
+}
+
+.assistant-message pre {
+  font-size: 0.9rem;
+  background-color: #1f2937; /* gray-800 - darker for code blocks */
+  padding: 0.8em 1em;
+  border-radius: 0.375rem; /* md */
+  overflow-x: auto; /* Allow horizontal scrolling for long lines */
+  margin-top: 0.5em;
+  margin-bottom: 1em;
+  line-height: 1.5;
+}
+.assistant-message pre code {
+  background-color: transparent; /* Code inside pre shouldn't have its own bg */
+  padding: 0;
+  font-size: inherit; /* Inherit pre's font size */
+  color: #d1d5db; /* Slightly lighter for code within pre */
+}
+
+.assistant-message blockquote {
+  font-size: 1rem;
+  margin-top: 0.5em;
+  margin-bottom: 0.75em;
+  padding-left: 1em;
+  border-left: 3px solid #6b7280; /* gray-500 */
+  color: #9ca3af; /* gray-400 - slightly muted for quotes */
+  font-style: italic;
+}
+
+/*
 p {
   color: var(--primary-color);
-}
+} */
 
 a {
   color: var(--secondary-color);
 }
 
-.construction-off-hour-div-icon div {
+.construction-off-hour-div-icon div,
+.construction-off-hour-div-icon {
   background-color: var(--construction-off-hour-icon-color);
   background-image: url("/images/constructionoffhouricon.svg");
   background-size: cover;
@@ -69,7 +210,8 @@ .construction-off-hour-div-icon div {
   position: relative;
 }
 
-.property-violation-div-icon div {
+.property-violation-div-icon div,
+.property-violation-div-icon {
   background-color: var(--case-icon-color);
   /* Use an X icon as the background image */
   background-image: url("/images/propertyviolationicon.svg");
@@ -87,7 +229,8 @@ .property-violation-div-icon div {
 
 
 /* Icon styles */
-.crime-div-icon div {
+.crime-div-icon div,
+.crime-div-icon {
   background-color: var(--crime-icon-color);
   background-image: url("/images/crimeshieldicon.svg");
   background-size: cover;
@@ -100,7 +243,7 @@ .crime-div-icon div {
   position: relative;
 }
 
-.case-div-icon div {
+.case-div-icon div, .case-div-icon {
   background-color: var(--case-icon-color);
   background-size: contain;
   background-position: center;
@@ -112,7 +255,7 @@ .case-div-icon div {
   position: relative;
 }
 
-.case-div-icon.no-photo div {
+.case-div-icon.no-photo div, .case-div-icon.no-photo  {
   background-image: url("/images/boston311icon.svg");
 }
 
@@ -126,7 +269,8 @@ .case-div-icon.submitted-photo, .case-div-icon.closed-photo {
   border-radius: 50%;
 }
 
-.permit-div-icon div {
+.permit-div-icon div, .building-permit-div-icon div,
+.permit-div-icon, .building-permit-div-icon {
   background-color: var(--permit-icon-color);
   background-image: url("/images/permiticon.svg");
   background-size: cover;
@@ -154,6 +298,20 @@ .center-div-icon div {
   z-index: 1000 !important;
 }
 
+.food-inspection-div-icon div,
+.food-inspection-div-icon {
+  background-color: var(--food-inspection-icon-color);
+  background-image: url("/images/foodinspectionicon.svg");
+  background-size: cover;
+  background-position: center;
+  color: white;
+  border-radius: 50%;
+  text-align: center;
+  width: var(--icon-size);
+  height: var(--icon-size);
+  position: relative;
+}
+
 /* Filter button styles */
 .building-permit-filter-button {
   background-image: url("/images/permiticon.svg");
@@ -195,14 +353,46 @@ .construction-off-hour-filter-button {
   background-repeat: no-repeat;
 }
 
+.food-inspection-filter-button {
+  background-image: url("/images/foodinspectionicon.svg");
+  border: 10px solid var(--food-inspection-icon-color-transparent);
+  background-position: left;
+  background-size: contain;
+  background-repeat: no-repeat;
+}
+.checkbox-icon-display {
+  display: inline-block;
+  width: 2.1em; /* Scales with the label's font-size (text-sm) */
+  height: 2.1em;
+  margin-right: 0.35em; /* Space between icon and text */
+  vertical-align: -0.125em; /* Fine-tune vertical alignment with checkbox and text */
+  background-size: contain !important;
+  background-position: center !important;
+  background-repeat: no-repeat !important;
+  border-radius: 50%; /* Assuming original icons are circular */
+  /* The background-image and background-color will come from the specific icon class (e.g., crime-div-icon) */
+}
+.toolbar-icon-display {
+  display: inline-block;
+  width: 1.1em; /* Scales with the label's font-size (text-sm) */
+  height: 1.1em;
+  margin-right: 0.35em; /* Space between icon and text */
+  vertical-align: -0.125em; /* Fine-tune vertical alignment with checkbox and text */
+  background-size: contain !important;
+  background-position: center !important;
+  background-repeat: no-repeat !important;
+  border-radius: 50%; /* Assuming original icons are circular */
+  /* The background-image and background-color will come from the specific icon class (e.g., crime-div-icon) */
+}
 
 /* when screen is less than 768, center the background image on the filter buttons */
-@media (max-width: 768px) {
+@media (max-width: 1024px) {
   .building-permit-filter-button,
   .crime-filter-button,
   .aaa-case-filter-button,
   .property-violation-filter-button,
-  .construction-off-hour-filter-button {
+  .construction-off-hour-filter-button,
+  .food-inspection-filter-button {
     background-position: center;
   }
 }
@@ -232,6 +422,11 @@ .construction-off-hour-filter-button.active {
   color: black;
 }
 
+.food-inspection-filter-button.active {
+  background-color: var(--food-inspection-icon-color);
+  color: black;
+}
+
 .aaa-case-filter-button .filter-button-text {
   background-color: var(--case-icon-color-transparent);
 }
@@ -252,6 +447,9 @@ .construction-off-hour-filter-button .filter-button-text {
   background-color: var(--construction-off-hour-icon-color-transparent);
 }
 
+.food-inspection-filter-button .filter-button-text {
+  background-color: var(--food-inspection-icon-color-transparent);
+}
 
 
 
@@ -264,7 +462,8 @@ .case-div-icon,
 .permit-div-icon,
 .center-div-icon,
 .property-violation-div-icon,
-.construction-off-hour-div-icon {
+.construction-off-hour-div-icon,
+.food-inspection-div-icon {
   transition: width 0.3s ease, height 0.3s ease; /* Smooth resizing */
 }
 
@@ -279,13 +478,12 @@ .leaflet-popup-content {
 }
 
 .leaflet-popup-content > div {
-  display: flex;
+  display: column;
   justify-content: space-between;
-  flex-wrap: wrap;
 }
 
 .leaflet-popup-content div div {
-  margin: 5px;
+  /* margin: 5px; */
 }
 
 .leaflet-popup-content div div.infoname {
diff --git a/resources/js/Components/AiAssistant.vue b/resources/js/Components/AiAssistant.vue
index 78a58e7..117f1c2 100644
--- a/resources/js/Components/AiAssistant.vue
+++ b/resources/js/Components/AiAssistant.vue
@@ -1,281 +1,515 @@
 <template>
-  <div class="ai-assistant border border-gray-700  shadow-lg p-4 bg-gray-900/25 relative z-2">
-      <div ref="chatHistory" class="p-2 bg-transparent chat-history max-h-[69vh]  overflow-y-auto mb-4 scrollbar-thin scrollbar-thumb-gray-500 scrollbar-track-gray-800">
-          <div class="assistant-message text-gray-800 bg-gradient-to-r from-gray-200 to-gray-300 p-4 mr-1  inline-block max-w-[95%] float-left mb-2 text-left">
-              <p>{{ welcomeMessage }}</p>
-          </div>
-          <div v-for="(message, index) in messages" :key="index" class="message-item mb-2 clear-both">
-              <p v-if="message.role === 'user'" class="user-message text-gray-800 bg-gradient-to-r from-blue-100 to-blue-200 p-4 ml-2  inline-block max-w-[95%] float-right mb-2 text-right">
-                  {{ message.content }}
-              </p>
-              <div v-if="message.role === 'assistant'" class="assistant-message text-gray-800 bg-gradient-to-r from-gray-200 to-gray-300 p-4 mr-1  inline-block max-w-[95%] float-left mb-2 text-left">
-                  <div v-html="renderMarkdown(message.content)"></div>
-              </div>
-          </div>
-          <div v-if="loading" class="loading-indicator text-gray-800 mt-4 italic">
-              <p>...</p>
+  <div class="ai-assistant border border-gray-700 shadow-lg p-4 bg-gray-400 text-gray-100 relative z-2">
+      <!-- Data Context Display -->
+      <div class="context-info-bar p-2 mb-3 bg-gray-700 text-md text-gray-300 rounded flex items-center gap-x-4 gap-y-2 flex-wrap">
+          <span title="Total items in context" class="flex items-center">
+              <svg class="inline h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor"> <!-- Heroicon: InformationCircleIcon -->
+                 <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
+              </svg>
+              {{ contextSummary.total }} items
+          </span>
+          <span title="Date range of items" class="flex items-center">
+              <svg class="inline h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor"> <!-- Heroicon: CalendarIcon -->
+                  <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
+              </svg>
+              {{ contextSummary.dateRange }}
+          </span>
+          <div class="context-types flex gap-x-3 gap-y-1 flex-wrap">
+              <span v-for="(count, type) in contextSummary.types" :key="type" :title="`${count} ${type} items`"
+                    class="flex items-center p-1 text-md">
+                  <span class="context-data-icon"
+                        :class="{
+                          'context-icon-crime': type === 'Crime',
+                          'context-icon-311-case': type === '311 Case',
+                          'context-icon-building-permit': type === 'Building Permit',
+                          'context-icon-property-violation': type === 'Property Violation',
+                          'context-icon-construction-off-hour': type === 'Construction Off Hour',
+                          'context-icon-food-inspection': type === 'Food Inspection',
+                          'context-icon-unknown': !['Crime', '311 Case', 'Building Permit', 'Property Violation', 'Construction Off Hour', 'Food Establishment Violation'].includes(type)
+                        }">
+                  </span>
+                  {{ type }}: {{ count }}
+              </span>
           </div>
       </div>
 
-      <div class="suggested-prompts flex flex-row gap-2 mb-4 float-right flex-wrap">
-          <button v-for="(prompt, index) in suggestedPrompts" :key="index" 
-                  @click="insertPrompt(prompt)" 
-                  class="bg-gradient-to-r from-blue-700 to-blue-800 text-white p-2  cursor-pointer">
-              {{ prompt }}
-          </button>
-      </div>
-
-      <form @submit.prevent="handleResponse" class="text-lg">
-          <textarea
-              v-model="form.message"
-              placeholder="Type your message..."
-              class="w-full p-3  border-none bg-gradient-to-r from-blue-100 to-blue-200 text-gray-800 text-lg"
-              rows="2"
-          ></textarea>
-
-          <div class="model-selector mb-4">
-          <button type="submit" class="send-button cursor-pointer  border border-white bg-gradient-to-r from-gray-200 to-gray-300 text-gray-800 p-4 mt-4 w-full">
-              {{ languageButtonLabels[getSingleLanguageCode].sendText }}
-          </button>
-          
-          <label for="model" class="">{{ languageButtonLabels[getSingleLanguageCode].model }}</label>
-          <select id="model" v-model="selectedModel" class="ml-2 p-2 bg-gray-700 text-white">
-              <option value="gemini">Gemini</option>
-              <option value="chatgpt">ChatGPT</option>
-          </select>
-      </div>
-      </form>
+      <ChatHistory
+          ref="chatHistoryComponentRef"
+          :messages="messages"
+          :loading="loading"
+          :editingMessageId="editingMessageId"
+          :editedMessageContent="editedMessageContent"
+          :welcomeMessage="welcomeMessage"
+          :renderMarkdown="renderMarkdown"
+          @update:editedMessageContent="editedMessageContent = $event"
+          @save-edit="saveMessageEdit"
+          @cancel-edit="cancelMessageEdit"
+          @start-edit="startMessageEdit"
+          @delete-message="deleteMessage"
+          @copy-message="copyMessageContent"
+      />
+
+      <ChatInput
+          v-model:modelValueMessage="currentMessageInput"
+          v-model:modelValueSelectedModel="selectedModel"
+          :canStreamReport="canStreamReport"
+          :languageButtonLabels="languageButtonLabels"
+          :currentLocale="getSingleLanguageCodeFromLocale"
+          :suggestedPrompts="suggestedPrompts"
+          @submit-chat="handleRegularChatSubmit"
+          @trigger-stream-report="triggerStreamReport"
+          @insert-prompt="insertPromptText"
+      />
   </div>
 </template>
 
-<style scoped>
-.scrollbar-thin {
-scrollbar-width: thin;
-}
-.scrollbar-thumb-gray-500 {
-scrollbar-color: #6b7280 #1f2937;
-}
-</style>
-
 <script setup>
-import { reactive, ref, nextTick, watch, computed, defineProps } from 'vue';
-import { useForm } from '@inertiajs/vue3';
+import { reactive, ref, nextTick, watch, computed, defineProps, onMounted } from 'vue';
+// Removed useForm as we handle form fields with refs now for child components
 import markdownit from 'markdown-it';
 import markdownItLinkAttributes from 'markdown-it-link-attributes';
+import ChatHistory from './ChatHistory.vue';
+import ChatInput from './ChatInput.vue';
 
 const props = defineProps({
-context: {
-  type: Array,
-  default: () => [],
-},
-language_codes: {
-  type: Array,
-  default: () => ['en-US'],
-},
+// ...existing props...
+  context: {
+    type: Array,
+    default: () => [],
+  },
+  language_codes: { // For UI translations, e.g., ['en-US']
+    type: Array,
+    default: () => ['en-US'],
+  },
+  centralLocation: { // For streaming report API: { latitude, longitude, address }
+    type: Object,
+    default: () => ({ latitude: null, longitude: null, address: '' })
+  },
+  radius: { // For streaming report API
+    type: Number,
+    default: 0.25
+  },
+  currentMapLanguage: { // For streaming report API: 'en', 'es', 'zh-CN' etc.
+    type: String,
+    default: 'en'
+  }
 });
 
 const md = markdownit({
-html: true,
-linkify: true,
-typographer: true
+// ...existing md setup...
+  html: true,
+  linkify: true,
+  typographer: true,
+  breaks: true,
 });
 
 md.use(markdownItLinkAttributes, {
-attrs: {
-  target: "_blank",
-  rel: "noopener",
-},
+  attrs: {
+    target: "_blank",
+    rel: "noopener",
+  },
 });
 
-const form = reactive(useForm({
-message: '',
-errors: {}
-}));
-
+const currentMessageInput = ref(''); // Replaces form.message
 const messages = ref([]);
 const loading = ref(false);
-const chatHistory = ref(null);
-const context = ref(props.context); // Store context
+const chatHistoryComponentRef = ref(null); // Ref for ChatHistory component instance
+const localContext = ref(props.context);
+const editingMessageId = ref(null);
+const editedMessageContent = ref('');
+const selectedModel = ref('gemini'); // Default model, managed here
+
+// ...existing baseSuggestedPrompts, promptTranslations, languageButtonLabels, welcomeMessageTranslations...
+const baseSuggestedPrompts = [
+  { id: 'ask_about_context', textKey: 'askAboutContext' },
+];
+
+const promptTranslations = {
+  'en-US': { askAboutContext: "What can you tell me about these events?" },
+  'es-MX': { askAboutContext: "¿Qué me puedes decir sobre estos eventos?" },
+  'zh-CN': { askAboutContext: "关于这些事件你能告诉我什么？" },
+  'ht-HT': { askAboutContext: "Kisa ou ka di mwen sou evènman sa yo?" },
+  'vi-VN': { askAboutContext: "Bạn có thể cho tôi biết gì về những sự kiện này?" },
+  'pt-BR': { askAboutContext: "O que você pode me dizer sobre esses eventos?" },
+};
 
-const suggestedPrompts = ref([
-  "Summarize all the events on this report for me",
-  "Write a daily report of all the events",
-]);
+const suggestedPrompts = ref([]);
 
 const languageButtonLabels = {
-  'en-US': {
-    sendText: 'Send',
-    model: 'Select AI Model',
-  },
-  'es-MX': {
-    sendText: 'Enviar',
-    model: 'Seleccionar modelo de IA',
-  },
-  'zh-CN': {
-    sendText: '发送',
-    model: '选择AI模型',
-  },
-  'ht-HT': {
-    sendText: 'Voye',
-    model: 'Chwazi modèl AI',
-  },
-  'vi-VN': {
-    sendText: 'Gửi',
-    model: 'Chọn mô hình AI',
-  },
-  'pt-BR': {
-    sendText: 'Enviar',
-    model: 'Selecione o modelo de IA',
-  },
+  'en-US': { sendText: 'Send', model: 'Select AI Model', generateReportText: 'Generate Full Report' },
+  'es-MX': { sendText: 'Enviar', model: 'Seleccionar modelo de IA', generateReportText: 'Generar Informe Completo' },
+  'zh-CN': { sendText: '发送', model: '选择AI模型', generateReportText: '生成完整报告' },
+  'ht-HT': { sendText: 'Voye', model: 'Chwazi modèl AI', generateReportText: 'Jenere Rapò Konplè' },
+  'vi-VN': { sendText: 'Gửi', model: 'Chọn mô hình AI', generateReportText: 'Tạo Báo cáo Đầy đủ' },
+  'pt-BR': { sendText: 'Enviar', model: 'Selecione o modelo de IA', generateReportText: 'Gerar Relatório Completo' },
 };
 
-const setSuggestedPrompts = () => {
-  // get the language codes from the props
-  const languageCodes = props.language_codes;
-  //could be one of six languages. Define translations of the two suggested prompts for each lanaguge code
-  const translations = {
-    'en-US': [
-      "Summarize all the events on this report for me",
-      "Write a daily story of all the events",
-    ],
-    'es-MX': [
-      "Resuma todos los eventos de este informe para mí",
-      "Escribe una historia diaria de todos los eventos",
-    ],
-    'zh-CN': [
-      "为我总结此报告中的所有事件",
-      "写一篇关于所有事件的日常故事",
-    ],
-    'ht-HT': [
-      "Resime tout evènman nan rapò sa a pou mwen",
-      "Ekri yon istwa chak jou sou tout evènman yo",
-    ],
-    'vi-VN': [
-      "Tóm tắt tất cả các sự kiện trong báo cáo này cho tôi",
-      "Viết một câu chuyện hàng ngày về tất cả các sự kiện",
-    ],
-    'pt-BR': [
-      "Resuma todos os eventos deste relatório para mim",
-      "Escreva uma história diária de todos os eventos",
-    ],
-  };
+const welcomeMessage = ref("");
+const welcomeMessageTranslations = {
+  'en-US': "Hi! I'm the BostonScope AI Assistant. I can see all the data points in the map and answer questions about them. How can I help you today?",
+  'es-MX': "¡Hola! Soy el asistente de IA de la aplicación de Boston. Puedo ver todos los puntos de datos en el mapa y responder preguntas sobre ellos. ¿Cómo puedo ayudarte hoy?",
+  'zh-CN': "你好！我是波士顿应用程序的AI助手。我可以查看地图中的所有数据点并用多种语言回答有关它们的问题。我今天能帮你什么？",
+  'ht-HT': "Bonjou! Mwen se asistan AI nan aplikasyon Boston an. Mwen ka wè tout pwen done nan kat la ak reponn kesyon sou yo. Kijan mwen ka ede ou jodi a?",
+  'vi-VN': "Chào bạn! Tôi là trợ lý trí tuệ nhân tạo của ứng dụng Boston. Tôi có thể xem tất cả các điểm dữ liệu trên bản đồ và trả lời câu hỏi về chúng. Hôm nay tôi có thể giúp gì cho bạn?",
+  'pt-BR': "Oi! Eu sou o assistente de IA do aplicativo Boston. Eu posso ver todos os pontos de dados no mapa e responder perguntas sobre eles. Como posso te ajudar hoje?",
+};
 
-  // get the translations for the current language code
-  const currentTranslations = translations[languageCodes[0]];
 
-  // set the suggested prompts to the translations
-  suggestedPrompts.value = currentTranslations;
-};
+const getSingleLanguageCodeFromLocale = computed(() => props.language_codes[0] || 'en-US');
 
-const welcomeMessage = ref("Hi! I'm the Boston App AI Assistant, based on Gemini's model. I can see all the data points in the map and answer questions about them in many languages. How can I help you today?")
+const contextSummary = computed(() => {
+// ...existing contextSummary logic...
+  if (!localContext.value || localContext.value.length === 0) {
+    return { total: 0, types: {}, dateRange: 'N/A' };
+  }
+  const types = localContext.value.reduce((acc, item) => {
+    const type = item.alcivartech_type || 'Unknown';
+    acc[type] = (acc[type] || 0) + 1;
+    return acc;
+  }, {});
+
+  const dates = localContext.value
+                  .map(item => item.alcivartech_date ? new Date(item.alcivartech_date) : null)
+                  .filter(date => date && !isNaN(date.getTime()));
+  let dateRange = 'N/A';
+  if (dates.length > 0) {
+    const minDate = new Date(Math.min.apply(null, dates));
+    const maxDate = new Date(Math.max.apply(null, dates));
+    if (!isNaN(minDate.getTime()) && !isNaN(maxDate.getTime())) {
+        dateRange = `${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`;
+    } else {
+        dateRange = 'Invalid date range';
+    }
+  }
+  
+  return {
+    total: localContext.value.length,
+    types,
+    dateRange,
+  };
+});
 
-const welcomeMessageTranslations = {
-  'en-US': "Hi! I'm the Boston App AI Assistant, based on Gemini's model. I can see all the data points in the map and answer questions about them in many languages. How can I help you today?",
-  'es-MX': "¡Hola! Soy el asistente de IA de la aplicación de Boston, basado en el modelo de Gemini. Puedo ver todos los puntos de datos en el mapa y responder preguntas sobre ellos en muchos idiomas. ¿Cómo puedo ayudarte hoy?",
-  'zh-CN': "你好！我是波士顿应用程序的AI助手，基于Gemini的模型。我可以查看地图中的所有数据点并用多种语言回答有关它们的问题。我今天能帮你什么？",
-  'ht-HT': "Bonjou! Mwen se asistan AI nan aplikasyon Boston an, ki baze sou modèl Gemini. Mwen ka wè tout pwen done nan kat la ak reponn kesyon sou yo nan anpil lang. Kijan mwen ka ede ou jodi a?",
-  'vi-VN': "Chào bạn! Tôi là trợ lý trí tuệ nhân tạo của ứng dụng Boston, dựa trên mô hình Gemini. Tôi có thể xem tất cả các điểm dữ liệu trên bản đồ và trả lời câu hỏi về chúng bằng nhiều ngôn ngữ. Hôm nay tôi có thể giúp gì cho bạn?",
-  'pt-BR': "Oi! Eu sou o assistente de IA do aplicativo Boston, baseado no modelo Gemini. Eu posso ver todos os pontos de dados no mapa e responder perguntas sobre eles em muitos idiomas. Como posso te ajudar hoje?",
-}
 
-const setWelcomeMessage = () => {
-  // get the language codes from the props
-  const languageCodes = props.language_codes;
-  // get the welcome message translations
-  const translations = welcomeMessageTranslations;
-  // get the translations for the current language code
-  const currentTranslation = translations[languageCodes[0]];
-  // set the welcome message to the current translation
-  welcomeMessage.value = currentTranslation;
+const canStreamReport = computed(() => {
+// ...existing canStreamReport logic...
+  console.log('Central Location:', props.centralLocation);
+  return props.centralLocation && 
+         props.centralLocation.latitude !== null && 
+         props.centralLocation.longitude !== null &&
+         props.centralLocation.address && 
+         props.centralLocation.address.trim() !== '';
+});
+
+const setUiText = () => {
+// ...existing setUiText logic...
+  const langCode = getSingleLanguageCodeFromLocale.value;
+  welcomeMessage.value = welcomeMessageTranslations[langCode] || welcomeMessageTranslations['en-US'];
+  
+  let availableBasePrompts = [...baseSuggestedPrompts];
+
+  suggestedPrompts.value = availableBasePrompts.map(p => ({
+    id: p.id,
+    text: promptTranslations[langCode]?.[p.textKey] || 
+          (promptTranslations['en-US']?.[p.textKey] || p.textKey)
+  }));
 };
 
-const getSingleLanguageCode = computed(() => props.language_codes[0]);
 
-const scrollToBottom = () => {
-nextTick(() => {
-  if (chatHistory.value) {
-    chatHistory.value.scrollTop = chatHistory.value.scrollHeight;
-  }
-});
+const scrollToBottomInChild = () => {
+  nextTick(() => {
+    if (chatHistoryComponentRef.value) {
+      chatHistoryComponentRef.value.scrollToBottom();
+    }
+  });
 };
 
-// Insert prompt into the textarea
-const insertPrompt = (prompt) => {
-form.message = prompt;
-handleResponse();
-suggestedPrompts.value = suggestedPrompts.value.filter((item) => item !== prompt);
+
+const insertPromptText = (promptText) => {
+  currentMessageInput.value = promptText;
+  //submit the prompt
+  handleRegularChatSubmit(promptText, selectedModel.value);
 };
 
-const selectedModel = ref('gemini'); // Default model
 
-const handleResponse = async () => {
-if (form.message.trim() === '') return;
+const handleRegularChatSubmit = (messageText, model) => { // Receives params from ChatInput emit
+  if (messageText.trim() === '') return;
+  const userMessageText = messageText;
+  currentMessageInput.value = ''; // Clear input after 
+  scrollToBottomInChild();
+  handleChatResponse(userMessageText, model, localContext.value);
+};
 
-messages.value.push({ role: 'user', content: form.message });
-loading.value = true;
+const generateUniqueId = () => {
+// ...existing generateUniqueId logic...
+  return `msg_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
+};
 
-const userMessage = form.message;
-form.message = '';
+const handleChatResponse = async (userMessageText, modelToUse, contextForChat) => {
+  messages.value.push({ id: generateUniqueId(), role: 'user', content: userMessageText });
+  loading.value = true;
+  //scrollToBottomInChild();
+
+  const requestBody = {
+// ...existing requestBody for chat...
+    message: userMessageText,
+    history: messages.value.slice(0, -1),
+    context: JSON.stringify(contextForChat),
+    model: modelToUse,
+  };
 
-scrollToBottom(); // Scroll after user message is added
+  try {
+    const response = await fetch(route('ai.assistant'), {
+// ...existing fetch options for chat...
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
+      },
+      body: JSON.stringify(requestBody)
+    });
+
+// ...existing response handling for chat...
+    if (!response.ok) {
+        throw new Error(`HTTP error! status: ${response.status}`);
+    }
+    if (!response.body) {
+        throw new Error('Response body is null');
+    }
+
+    const reader = response.body.getReader();
+    const decoder = new TextDecoder();
+    let assistantMessageContent = '';
+    const assistantMessageId = generateUniqueId();
+    messages.value.push({ id: assistantMessageId, role: 'assistant', content: '' });
+
+    while (true) {
+      const { done, value } = await reader.read();
+      if (done) break;
+      assistantMessageContent += decoder.decode(value, { stream: true });
+      const assistantMsgIndex = messages.value.findIndex(m => m.id === assistantMessageId);
+      if (assistantMsgIndex !== -1) {
+        messages.value[assistantMsgIndex].content = assistantMessageContent;
+      }
+      //scrollToBottomInChild();
+    }
+  } catch (error) {
+// ...existing error handling for chat...
+    console.error('Error fetching AI chat response:', error);
+    messages.value.push({ id: generateUniqueId(), role: 'assistant', content: `Error: Could not get response. ${error.message}` });
+  } finally {
+    loading.value = false;
+    //scrollToBottomInChild();
+  }
+};
 
-const requestBody = {
-  message: userMessage,
-  history: messages.value,
-  context: JSON.stringify(context.value),
-  model: selectedModel.value, // Use selected model
+const triggerStreamReport = () => {
+// ...existing triggerStreamReport logic...
+  if (!canStreamReport.value) return;
+  const langCode = getSingleLanguageCodeFromLocale.value;
+  const reportPromptText = languageButtonLabels[langCode]?.generateReportText || 
+                           languageButtonLabels['en-US'].generateReportText;
+
+  scrollToBottomInChild();
+  handleStreamReportRequest(reportPromptText);
 };
 
-const response = await fetch(route('ai.assistant'), {
-  method: 'POST',
-  headers: {
-    'Content-Type': 'application/json',
-    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
-  },
-  body: JSON.stringify(requestBody)
-});
+const handleStreamReportRequest = async (userPromptText) => {
+// ...existing handleStreamReportRequest logic...
+  console.log('Can stream Report:', canStreamReport.value);
+  if (!canStreamReport.value) {
+    messages.value.push({ id: generateUniqueId(), role: 'assistant', content: 'Cannot generate report: Central location details are missing or invalid.' });
+    //scrollToBottomInChild();
+    return;
+  }
 
-const reader = response.body.getReader();
-const decoder = new TextDecoder();
-let assistantMessage = '';
-let chunk;
+  messages.value.push({ id: generateUniqueId(), role: 'user', content: userPromptText });
+  loading.value = true;
+  //scrollToBottomInChild();
+  
+  const assistantMessageId = generateUniqueId();
+  messages.value.push({ id: assistantMessageId, role: 'assistant', content: '' });
+  let accumulatedContent = "";
+
+  try {
+    const requestBody = {
+// ...existing requestBody for stream report...
+      latitude: props.centralLocation.latitude,
+      longitude: props.centralLocation.longitude,
+      address: props.centralLocation.address,
+      radius: props.radius,
+      language: props.currentMapLanguage,
+    };
+
+    const response = await fetch(route('ai.stream-location-report'), {
+// ...existing fetch options for stream report...
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
+        'Accept': 'text/event-stream'
+      },
+      body: JSON.stringify(requestBody)
+    });
+
+// ...existing response handling for stream report...
+    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
+    if (!response.body) throw new Error('Response body is null');
+
+    const reader = response.body.getReader();
+    const decoder = new TextDecoder();
+
+    let buffer = '';
+    while (true) {
+      const { done, value } = await reader.read();
+      if (done) break;
+      
+      buffer += decoder.decode(value, { stream: true });
+      
+      let position;
+      while ((position = buffer.indexOf('\n\n')) >= 0) {
+        const chunk = buffer.slice(0, position);
+        buffer = buffer.slice(position + 2);
+
+        if (chunk.startsWith('data: ')) {
+          const jsonData = chunk.substring(6);
+          try {
+            const parsedData = JSON.parse(jsonData);
+            const assistantMsgIndex = messages.value.findIndex(m => m.id === assistantMessageId);
+            if (assistantMsgIndex === -1) continue;
+
+            if (parsedData.type === 'markdown' && parsedData.content) {
+              accumulatedContent += parsedData.content;
+              messages.value[assistantMsgIndex].content = accumulatedContent;
+            } else if (parsedData.type === 'status' && parsedData.message) {
+              accumulatedContent += `\n*Status: ${parsedData.message}*\n`;
+              messages.value[assistantMsgIndex].content = accumulatedContent;
+            } else if (parsedData.type === 'error' && parsedData.message) {
+              accumulatedContent += `\n**Error: ${parsedData.message}**\n`;
+              messages.value[assistantMsgIndex].content = accumulatedContent;
+            } else if (parsedData.type === 'control' && parsedData.action === 'close') {
+              loading.value = false;
+              //scrollToBottomInChild();
+              return;
+            }
+            //scrollToBottomInChild();
+          } catch (e) {
+            console.error('Error parsing streamed JSON:', e, jsonData);
+          }
+        }
+      }
+    }
+  } catch (error) {
+// ...existing error handling for stream report...
+    console.error('Error fetching streaming report:', error);
+    const assistantMsgIndex = messages.value.findIndex(m => m.id === assistantMessageId);
+    if (assistantMsgIndex !== -1) {
+        messages.value[assistantMsgIndex].content = accumulatedContent + `\n**Error generating report: ${error.message}**`;
+    } else {
+        messages.value.push({ id: generateUniqueId(), role: 'assistant', content: accumulatedContent + `\n**Error generating report: ${error.message}**` });
+    }
+  } finally {
+    loading.value = false;
+    //scrollToBottomInChild();
+  }
+};
 
-messages.value.push({ role: 'assistant', content: '' }); // Prepare to append the assistant message
+const renderMarkdown = (content) => {
+// ...existing renderMarkdown logic...
+  return md.render(content);
+};
 
-while (!(chunk = await reader.read()).done) {
-  assistantMessage += decoder.decode(chunk.value, { stream: true });
+// Message Management Functions (now called by emits from ChatHistory)
+const deleteMessage = (messageId) => {
+// ...existing deleteMessage logic...
+  if (window.confirm("Are you sure you want to delete this message?")) {
+    messages.value = messages.value.filter(msg => msg.id !== messageId);
+  }
+};
 
-  const assistantMessageIndex = messages.value.findLastIndex((message) => message.role === 'assistant');
-  messages.value[assistantMessageIndex].content = assistantMessage;
+const copyMessageContent = async (content, isAssistantMarkdown = false) => {
+// ...existing copyMessageContent logic...
+  try {
+    let textToCopy = content;
+    await navigator.clipboard.writeText(textToCopy);
+    alert('Content copied to clipboard!'); 
+  } catch (err) {
+    console.error('Failed to copy: ', err);
+    alert('Failed to copy content.');
+  }
+};
 
-  scrollToBottom();
-}
+const startMessageEdit = (message) => {
+// ...existing startMessageEdit logic...
+  editingMessageId.value = message.id;
+  editedMessageContent.value = message.content;
+};
 
-loading.value = false;
+const saveMessageEdit = (messageId) => { // messageId is passed from emit
+  const messageIndex = messages.value.findIndex(msg => msg.id === messageId);
+  if (messageIndex !== -1) {
+    messages.value[messageIndex].content = editedMessageContent.value;
+  }
+  cancelMessageEdit();
 };
 
-const renderMarkdown = (content) => {
-return md.render(content);
+const cancelMessageEdit = () => {
+// ...existing cancelMessageEdit logic...
+  editingMessageId.value = null;
+  editedMessageContent.value = '';
 };
 
-//watch for changes in the context and update the context
+
 watch(() => props.context, (newContext) => {
-  context.value = newContext;
+  localContext.value = newContext;
 });
 
-watch(() => props.language_codes, (newLanguageCodes) => {
-  setSuggestedPrompts();
-  setWelcomeMessage();
+watch(() => props.language_codes, () => {
+  setUiText();
+}, { immediate: true });
+
+watch(() => props.centralLocation, (newValue, oldValue) => {
+  if (JSON.stringify(newValue) !== JSON.stringify(oldValue)) {
+    setUiText();
+  }
+}, { deep: true, immediate: true });
+
+onMounted(() => {
+  setUiText();
 });
+
 </script>
 
 <style scoped>
+/* Styles for context display icons */
+.context-data-icon {
+  display: inline-block;
+  width: 16px;
+  height: 16px;
+  background-size: contain;
+  background-repeat: no-repeat;
+  background-position: center;
+  margin-right: 5px;
+  vertical-align: middle;
+  filter: invert(0.9) saturate(0.5) brightness(1.5); /* Adjust to make icons visible on dark bg if they are dark */
+}
 
-@media screen and (min-width: 768px) {
+.context-icon-crime { background-image: url("/images/crimeshieldicon.svg"); }
+.context-icon-311-case { background-image: url("/images/boston311icon.svg"); }
+.context-icon-building-permit { background-image: url("/images/permiticon.svg"); }
+.context-icon-property-violation { background-image: url("/images/propertyviolationicon.svg"); }
+.context-icon-construction-off-hour { background-image: url("/images/constructionoffhouricon.svg"); }
+.context-icon-food-inspection { background-image: url("/images/foodinspectionicon.svg"); }
+.context-icon-unknown { /* Basic fallback shape or leave blank */
+  border: 1px solid currentColor; 
+  border-radius: 3px;
+}
 
-  .ai-assistant {
-    width: 50%;
-  }
+/* Ensure chat history takes up available space if AI assistant is in a flex container */
+.ai-assistant {
+    display: flex;
+    flex-direction: column;
+    height: 100%; /* Or a specific height like 80vh */
 }
+/* ChatHistory component now has its own flex-grow: 1 */
 
-</style>
\ No newline at end of file
+</style>
diff --git a/resources/js/Components/BuildingPermit.vue b/resources/js/Components/BuildingPermit.vue
index 4944986..98fe636 100644
--- a/resources/js/Components/BuildingPermit.vue
+++ b/resources/js/Components/BuildingPermit.vue
@@ -1,5 +1,5 @@
 <template>
-  <div v-if="data" class="p-4 bg-gray-100 rounded-lg h-full">
+  <div v-if="data" class="p-4 bg-gray-100 rounded-lg">
     <h2 class="text-xl font-bold text-gray-800">
       {{ LabelsByLanguageCode[getSingleLanguageCode].buildingPermitTitle }}
     </h2>
@@ -9,12 +9,27 @@
     <ul class="space-y-2">
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].permitNumber }}:</strong> {{ data.permitnumber }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].workType }}:</strong> {{ data.worktype }}</li>
+      <li v-if="data.permittypedescr"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].permitTypeDescription }}:</strong> {{ data.permittypedescr }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].description }}:</strong> {{ data.description }}</li>
+      <li v-if="data.applicant"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].applicant }}:</strong> {{ data.applicant }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].status }}:</strong> {{ data.status }}</li>
+      <li v-if="data.occupancytype"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].occupancyType }}:</strong> {{ data.occupancytype }}</li>
+      <li v-if="data.sq_feet"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].sqFeet }}:</strong> {{ data.sq_feet }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].declaredValue }}:</strong> {{ data.declared_valuation }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].totalFees }}:</strong> {{ data.total_fees }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].expirationDate }}:</strong> {{ formatDate(data.expiration_date) }}</li>
       <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].address }}:</strong> {{ data.address }}, {{ data.city }}, {{ data.state }} {{ data.zip }}</li>
+      <li v-if="data.property_id"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].propertyId }}:</strong> {{ data.property_id }}</li>
+      <li v-if="data.parcel_id"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].parcelId }}:</strong> {{ data.parcel_id }}</li>
+      <li v-if="data.gpsy"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].gpsY }}:</strong> {{ data.gpsy }}</li>
+      <li v-if="data.gpsx"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].gpsX }}:</strong> {{ data.gpsx }}</li>
+      <li v-if="data.y_latitude"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].yLatitude }}:</strong> {{ data.y_latitude }}</li>
+      <li v-if="data.x_longitude"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].xLongitude }}:</strong> {{ data.x_longitude }}</li>
+      <!-- add comments if they exist -->
+      <li v-if="data.comments" >
+        <strong>{{ LabelsByLanguageCode[getSingleLanguageCode].comments }}:</strong>
+        <pre class="whitespace-pre-wrap text-sm text-gray-600">{{ data.comments }}</pre>
+      </li>
     </ul>
   </div>
 </template>
@@ -33,8 +48,6 @@ const props = defineProps({
   },
 });
 
-
-
 const LabelsByLanguageCode = {
   'en-US': {
     buildingPermitTitle: 'Building Permit',
@@ -47,6 +60,17 @@ const LabelsByLanguageCode = {
     totalFees: 'Total Fees',
     expirationDate: 'Expiration Date',
     address: 'Address',
+    comments: 'Comments',
+    permitTypeDescription: 'Permit Type Description',
+    applicant: 'Applicant',
+    occupancyType: 'Occupancy Type',
+    sqFeet: 'Square Feet',
+    propertyId: 'Property ID',
+    parcelId: 'Parcel ID',
+    gpsY: 'GPS Y',
+    gpsX: 'GPS X',
+    yLatitude: 'Latitude (Y)',
+    xLongitude: 'Longitude (X)',
   },
   'es-MX': {
     buildingPermitTitle: 'Permiso de Construcción',
@@ -59,6 +83,17 @@ const LabelsByLanguageCode = {
     totalFees: 'Tarifas Totales',
     expirationDate: 'Fecha de Expiración',
     address: 'Dirección',
+    comments: 'Comentarios',
+    permitTypeDescription: 'Descripción del Tipo de Permiso',
+    applicant: 'Solicitante',
+    occupancyType: 'Tipo de Ocupación',
+    sqFeet: 'Pies Cuadrados',
+    propertyId: 'ID de Propiedad',
+    parcelId: 'ID de Parcela',
+    gpsY: 'GPS Y',
+    gpsX: 'GPS X',
+    yLatitude: 'Latitud (Y)',
+    xLongitude: 'Longitud (X)',
   },
   'zh-CN': {
     buildingPermitTitle: '建筑许可',
@@ -71,6 +106,17 @@ const LabelsByLanguageCode = {
     totalFees: '总费用',
     expirationDate: '到期日',
     address: '地址',
+    comments: '评论',
+    permitTypeDescription: '许可证类型说明',
+    applicant: '申请人',
+    occupancyType: '占用类型',
+    sqFeet: '平方英尺',
+    propertyId: '物业编号',
+    parcelId: '地块编号',
+    gpsY: 'GPS Y坐标',
+    gpsX: 'GPS X坐标',
+    yLatitude: '纬度 (Y)',
+    xLongitude: '经度 (X)',
   },
   'ht-HT': {
     buildingPermitTitle: 'Pèmi Bati',
@@ -83,6 +129,17 @@ const LabelsByLanguageCode = {
     totalFees: 'Frais Total',
     expirationDate: 'Dat Eksperyasyon',
     address: 'Adrès',
+    comments: 'Kòmantè',
+    permitTypeDescription: 'Deskripsyon Kalite Pèmi',
+    applicant: 'Aplikan',
+    occupancyType: 'Kalite Okipasyon',
+    sqFeet: 'Pye Kare',
+    propertyId: 'ID Pwopriyete',
+    parcelId: 'ID Pasèl',
+    gpsY: 'GPS Y',
+    gpsX: 'GPS X',
+    yLatitude: 'Latitid (Y)',
+    xLongitude: 'Lonjitid (X)',
   },
   'pt-BR': {
     buildingPermitTitle: 'Licença de Construção',
@@ -95,6 +152,17 @@ const LabelsByLanguageCode = {
     totalFees: 'Taxas Totais',
     expirationDate: 'Data de Expiração',
     address: 'Endereço',
+    comments: 'Comentários',
+    permitTypeDescription: 'Descrição do Tipo de Permissão',
+    applicant: 'Requerente',
+    occupancyType: 'Tipo de Ocupação',
+    sqFeet: 'Pés Quadrados',
+    propertyId: 'ID da Propriedade',
+    parcelId: 'ID do Terreno',
+    gpsY: 'GPS Y',
+    gpsX: 'GPS X',
+    yLatitude: 'Latitude (Y)',
+    xLongitude: 'Longitude (X)',
   },
 };
 
diff --git a/resources/js/Components/CenterManagement.vue b/resources/js/Components/CenterManagement.vue
new file mode 100644
index 0000000..ee67b75
--- /dev/null
+++ b/resources/js/Components/CenterManagement.vue
@@ -0,0 +1,145 @@
+<template>
+  <div>
+    <!-- Engaging Title -->
+    <h2 class="text-2xl font-bold text-center text-gray-800 mb-4">
+      {{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].setYourHubTitle || 'Pinpoint Your Hub!' }}
+    </h2>
+    <p class="text-center text-gray-600 mb-6">
+      {{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].setYourHubDescription || 'Set your central location to personalize your map experience. Choose your preferred method below:' }}
+    </p>
+
+    <!-- Coordinates Display -->
+    <div v-if="tempNewCenterForDisplay" class="p-4 bg-green-50 border border-green-300 rounded-lg shadow text-center mb-6">
+      <p class="font-bold text-green-800">{{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].newCenterPreviewTitle || 'New Center Preview:' }}</p>
+      <p class="text-green-700">{{ tempNewCenterForDisplay.lat }}, {{ tempNewCenterForDisplay.lng }}</p>
+      <!-- Removed confirm prompt as confirmation is now implicit -->
+    </div>
+    <div v-else-if="centralLocation && centralLocation.latitude && centralLocation.longitude" class="p-4 bg-blue-50 border border-blue-300 rounded-lg shadow text-center mb-6">
+      <p class="font-bold text-blue-800">{{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].currentSavedCenterTitle || 'Current Saved Center:' }}</p>
+      <p class="text-blue-700">{{ centralLocation.latitude }}, {{ centralLocation.longitude }}</p>
+    </div>
+    <div v-else class="p-4 bg-gray-100 rounded-lg shadow text-center mb-6">
+      <p class="font-bold text-gray-800">{{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].noCenterSetTitle || 'No central location set yet.' }}</p>
+      <p class="text-gray-600">{{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].setupPrompt || "Let's get one set up!" }}</p>
+    </div>
+
+    <!-- Action Methods - Revamped Layout -->
+    <div class="mb-2">
+      <!-- Method 1: Search Address -->
+      <div class="p-2 md:p-4 border rounded-lg shadow hover:shadow-lg transition-shadow bg-white mb-2 md:mb-4">
+        <AddressSearch @address-selected="handleAddressSelected" :language_codes="language_codes" :placeholder_text="translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].searchAddressPlaceholder || 'Search for an address'" />
+      </div>
+
+      <!-- Container for the two buttons: Click on Map and Use Current Location -->
+      <div class="grid grid-cols-2 gap-2 md:gap-4">
+        <!-- Method 2: Click on Map -->
+        <div class="p-2 md:p-4 border rounded-lg shadow hover:shadow-lg transition-shadow bg-white">
+          <button
+            type="button"
+            @click="handleToggleCenterSelection"
+            class="w-full h-full px-2 py-2 text-xs sm:text-sm md:px-4 md:py-3 md:text-base text-white rounded-lg shadow-md transition-colors flex items-center justify-center space-x-1 md:space-x-2"
+            :class="isCenterSelectionActive ? 'bg-red-500 hover:bg-red-600' : 'bg-teal-500 hover:bg-teal-600'"
+          >
+            <svg v-if="!isCenterSelectionActive" xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 md:h-5 md:w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path d="M17.293 3.293A1 1 0 0118 4v12a1 1 0 01-1.707.707L10 10.414l-6.293 6.293A1 1 0 012 16V4a1 1 0 011.707-.707L10 9.586l6.293-6.293a1 1 0 011.000 0z" clip-rule="evenodd" /></svg>
+            <svg v-else xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 md:h-5 md:w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L10 8.586 7.707 6.293a1 1 0 00-1.414 1.414L8.586 10l-2.293 2.293a1 1 0 001.414 1.414L10 11.414l2.293 2.293a1 1 0 001.414-1.414L11.414 10l2.293-2.293z" clip-rule="evenodd" /></svg>
+            <span class="">{{ isCenterSelectionActive ? (translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].cancelMapSelectionButton || 'Cancel Map Selection') : (translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].selectByMapClickButton || 'Select by Map Click') }}</span>
+          </button>
+          <p v-if="isCenterSelectionActive" class="text-center text-blue-600 mt-1 md:mt-2 text-xs md:text-sm animate-pulse">
+            {{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].clickOnMapInstruction || 'Now, click on the map to choose your center!' }}
+          </p>
+        </div>
+
+        <!-- Method 3: Use Current Location -->
+        <div class="p-2 md:p-4 border rounded-lg shadow hover:shadow-lg transition-shadow bg-white">
+          <button
+            type="button"
+            @click="requestCurrentLocation"
+            :disabled="geolocationLoading"
+            class="w-full h-full px-2 py-2 text-xs sm:text-sm md:px-4 md:py-3 md:text-base text-white bg-blue-600 rounded-lg shadow-md hover:bg-indigo-700 transition-colors flex items-center justify-center space-x-1 md:space-x-2 disabled:bg-gray-400"
+          >
+            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 md:h-5 md:w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" /></svg>
+            <span class="">{{ geolocationLoading ? (translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].locatingButton || 'Locating...') : (translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse].useCurrentLocationButton || 'Use My Current Location') }}</span>
+          </button>
+          <p v-if="geolocationError" class="text-red-500 text-xs md:text-sm text-center mt-1 md:mt-2">{{ geolocationError }}</p>
+        </div>
+      </div>
+    </div>
+    
+    <!-- Removed Form to Confirm/Submit -->
+    
+    <!-- The SaveLocation component remains -->
+      <SaveLocation :location="centralLocation" :language_codes="language_codes" @load-location="handleLoadSavedLocation" :translations="translations" />
+    
+  </div>
+</template>
+
+<script setup>
+import { defineProps, defineEmits, computed, ref } from 'vue';
+import AddressSearch from '@/Components/AddressSearch.vue';
+import SaveLocation from '@/Components/SaveLocation.vue';
+
+const props = defineProps({
+  centralLocation: Object,
+  tempNewCenterForDisplay: Object,
+  isCenterSelectionActive: Boolean,
+  language_codes: Array,
+  translations: Object,
+  singleLanguageCode: String,
+});
+
+const emit = defineEmits([
+  'toggle-center-selection-mode',
+  'address-search-coordinates-selected',
+  'load-saved-location',
+]);
+
+const singleLanguageCodeToUse = computed(() => props.singleLanguageCode || 'en-US');
+
+const geolocationLoading = ref(false);
+const geolocationError = ref(null);
+
+const requestCurrentLocation = () => {
+  if (navigator.geolocation) {
+    geolocationLoading.value = true;
+    geolocationError.value = null;
+    navigator.geolocation.getCurrentPosition(
+      (position) => {
+        const coordinates = {
+          lat: position.coords.latitude,
+          lng: position.coords.longitude,
+        };
+        emit('address-search-coordinates-selected', coordinates);
+        geolocationLoading.value = false;
+      },
+      (error) => {
+        console.error("Geolocation error: ", error);
+        let message = translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse.value]?.geolocationGenericError || 'Could not retrieve your location.';
+        if (error.code === error.PERMISSION_DENIED) {
+          message = translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse.value]?.geolocationPermissionDeniedError || 'Permission denied. Please enable location services in your browser settings.';
+        } else if (error.code === error.POSITION_UNAVAILABLE) {
+          message = translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse.value]?.geolocationPositionUnavailableError || 'Location information is unavailable.';
+        } else if (error.code === error.TIMEOUT) {
+          message = translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse.value]?.geolocationTimeoutError || 'The request to get user location timed out.';
+        }
+        geolocationError.value = message;
+        geolocationLoading.value = false;
+      }
+    );
+  } else {
+    geolocationError.value = translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse.value]?.geolocationNotSupportedError || 'Geolocation is not supported by this browser.';
+  }
+};
+
+const handleAddressSelected = (coordinates) => {
+  geolocationError.value = null; // Clear geolocation error if address is selected
+  emit('address-search-coordinates-selected', coordinates);
+};
+
+const handleToggleCenterSelection = () => {
+  emit('toggle-center-selection-mode');
+};
+
+const handleLoadSavedLocation = (location) => {
+  emit('load-saved-location', location);
+};
+</script>
\ No newline at end of file
diff --git a/resources/js/Components/ChatHistory.vue b/resources/js/Components/ChatHistory.vue
new file mode 100644
index 0000000..2623df4
--- /dev/null
+++ b/resources/js/Components/ChatHistory.vue
@@ -0,0 +1,210 @@
+<template>
+  <div ref="chatHistoryContainerRef" class="p-2 bg-gray-600 chat-history max-h-[60vh] overflow-y-auto mb-4 scrollbar-thin scrollbar-thumb-gray-500 scrollbar-track-gray-700">
+    <!--FLoating scroll the the bottom button on the right, transparent, round with a downward arrow-->
+    <div class="absolute top-4 right-6 z-10">
+      <button @click="scrollToBottom" class="bg-gray-700 text-white rounded-full p-2 shadow hover:bg-gray-800 focus:outline-none">
+        ⬇️
+      </button>
+    </div>
+    <div class="relative assistant-message bg-gray-700 text-gray-100 p-3 rounded-lg shadow mr-10 inline-block max-w-[95%] float-left mb-2 text-left">
+      <p class="text-gray-100">&nbsp;&nbsp;&nbsp;&nbsp;{{ welcomeMessage }}</p>
+      <!-- Three dots for welcome message -->
+      <div class="absolute top-1 left-1 sm:top-2 sm:left-2">
+        <button @click="toggleWelcomeMessageActions" title="Actions" class="action-button">⋮</button>
+        <div v-if="welcomeMessageActionsVisible" class="absolute left-0 top-full mt-1 flex flex-col gap-1 bg-gray-800 p-1 rounded shadow-lg z-20 min-w-max">
+          <button @click="handleCopyWelcomeMessage" class="action-button-menu-item">📋 Copy</button>
+        </div>
+      </div>
+    </div>
+    <div v-for="message in messages" :key="message.id" class="message-item mb-2 clear-both relative">
+      <p v-if="message.role === 'user' && editingMessageId !== message.id" class="user-message bg-sky-600 text-white p-3 rounded-lg shadow ml-10 inline-block max-w-[95%] float-right mb-2 text-right pr-10">
+        {{ message.content }}
+      </p>
+      <div v-if="message.role === 'assistant' && editingMessageId !== message.id" class="assistant-message bg-gray-700 text-gray-100 p-3 rounded-lg shadow mr-10 inline-block max-w-[95%] float-left mb-2 text-left">
+        <div v-html="renderMarkdown(message.content)"></div>
+      </div>
+
+      <!-- Editing UI -->
+      <div v-if="editingMessageId === message.id" class="message-edit-area my-2 p-2 bg-gray-700 rounded">
+        <textarea
+          :value="editedMessageContent"
+          @input="$emit('update:editedMessageContent', $event.target.value)"
+          class="w-full p-2 border border-gray-500 bg-gray-600 text-white rounded text-sm"
+          rows="3"
+        ></textarea>
+        <div class="edit-actions mt-2 text-right">
+          <button @click="$emit('save-edit', message.id)" class="text-xs bg-green-500 hover:bg-green-600 text-white py-1 px-3 rounded mr-2">Save</button>
+          <button @click="$emit('cancel-edit')" class="text-xs bg-gray-500 hover:bg-gray-600 text-white py-1 px-3 rounded">Cancel</button>
+        </div>
+      </div>
+
+      <!-- Container for "three dots" button and action menu -->
+      <div v-if="editingMessageId !== message.id"
+           class="absolute"
+           :class="message.role === 'user' ? 'top-1 right-1 sm:top-2 sm:right-2' : 'top-1 left-1 sm:top-2 sm:left-2'">
+        <button @click="toggleMessageActions(message.id)" title="Actions" class="action-button">
+          ⋮
+        </button>
+        <!-- Action Buttons Menu -->
+        <div v-if="activeMessageMenuId === message.id"
+             class="absolute mt-1 flex flex-col gap-1 bg-gray-800 p-1 rounded shadow-lg z-20 min-w-max"
+             :class="message.role === 'user' ? 'right-0 top-full' : 'left-0 top-full'">
+          <button @click="handleEdit(message)" class="action-button-menu-item">✏️ Edit</button>
+          <button @click="handleCopy(message.content, message.role === 'assistant')" class="action-button-menu-item">📋 Copy</button>
+          <button @click="handleDelete(message.id)" class="action-button-menu-item">🗑️ Delete</button>
+        </div>
+      </div>
+    </div>
+    <div v-if="loading" class="loading-indicator text-gray-400 mt-4 italic">
+      <p>...</p>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { ref, watch, nextTick, defineProps, defineEmits, defineExpose } from 'vue';
+
+const props = defineProps({
+  messages: Array,
+  loading: Boolean,
+  editingMessageId: String,
+  editedMessageContent: String,
+  welcomeMessage: String,
+  renderMarkdown: Function,
+});
+
+const emit = defineEmits([
+  'update:editedMessageContent',
+  'save-edit',
+  'cancel-edit',
+  'start-edit',
+  'delete-message',
+  'copy-message',
+]);
+
+const chatHistoryContainerRef = ref(null);
+const activeMessageMenuId = ref(null);
+const welcomeMessageActionsVisible = ref(false);
+
+const scrollToBottom = () => {
+  if (chatHistoryContainerRef.value) {
+    chatHistoryContainerRef.value.scrollTop = chatHistoryContainerRef.value.scrollHeight;
+  }
+};
+
+const toggleMessageActions = (messageId) => {
+  if (activeMessageMenuId.value === messageId) {
+    activeMessageMenuId.value = null;
+  } else {
+    activeMessageMenuId.value = messageId;
+    // Close welcome message menu if open
+    welcomeMessageActionsVisible.value = false;
+  }
+};
+
+const toggleWelcomeMessageActions = () => {
+  welcomeMessageActionsVisible.value = !welcomeMessageActionsVisible.value;
+  // Close dynamic message menu if open
+  if (welcomeMessageActionsVisible.value) {
+    activeMessageMenuId.value = null;
+  }
+};
+
+const handleEdit = (message) => {
+  emit('start-edit', message);
+  activeMessageMenuId.value = null;
+};
+
+const handleCopy = (content, isAssistant) => {
+  emit('copy-message', content, isAssistant);
+  activeMessageMenuId.value = null;
+};
+
+const handleDelete = (messageId) => {
+  emit('delete-message', messageId);
+  activeMessageMenuId.value = null;
+};
+
+const handleCopyWelcomeMessage = () => {
+  emit('copy-message', props.welcomeMessage, true); // true because welcome message is from assistant
+  welcomeMessageActionsVisible.value = false;
+};
+
+/* auto scrolling is annoying all the time, so we will only scroll when the user clicks the button
+watch(() => props.messages, () => {
+  nextTick(() => scrollToBottom());
+}, { deep: true });
+
+watch(() => props.loading, (newValue, oldValue) => {
+  if (newValue === false && oldValue === true) { // When loading finishes
+    nextTick(() => scrollToBottom());
+  }
+});
+*/
+
+defineExpose({ scrollToBottom });
+</script>
+
+<style scoped>
+.scrollbar-thin {
+  scrollbar-width: thin;
+}
+.scrollbar-thumb-gray-500 {
+  scrollbar-color: #6b7280 #374151; /* thumb / track (gray-500 / gray-700) */
+}
+
+.action-button {
+  background-color: rgba(107, 114, 128, 0.3); /* gray-500 with less opacity */
+  color: white;
+  padding: 2px 6px; /* Slightly smaller */
+  border-radius: 4px;
+  font-size: 0.9rem; /* Adjusted for better visibility of dots */
+  cursor: pointer;
+  border: none;
+  line-height: 1;
+  opacity: 0.7;
+}
+.action-button:hover {
+  background-color: rgba(75, 85, 99, 0.5); /* gray-600 with opacity */
+  opacity: 1;
+}
+
+.message-item:hover .action-button,
+.assistant-message:hover .action-button {
+    opacity: 1;
+}
+
+
+.action-button-menu-item {
+  background-color: transparent;
+  color: white;
+  padding: 6px 10px;
+  border-radius: 3px;
+  font-size: 0.85rem;
+  cursor: pointer;
+  border: none;
+  text-align: left;
+  width: 100%;
+  display: flex;
+  align-items: center;
+  gap: 8px; /* Space between icon and text */
+}
+.action-button-menu-item:hover {
+  background-color: rgba(75, 85, 99, 0.9); /* gray-600 for hover */
+}
+
+.chat-history {
+  flex-grow: 1;
+}
+
+.user-message {
+  border-top-right-radius: 0.25rem; /* Slightly flatter on one corner */
+}
+.assistant-message {
+  border-top-left-radius: 0.25rem; /* Slightly flatter on one corner */
+}
+.assistant-message div {
+  color: #ffffff;
+}
+
+</style>
diff --git a/resources/js/Components/ChatInput.vue b/resources/js/Components/ChatInput.vue
new file mode 100644
index 0000000..b728926
--- /dev/null
+++ b/resources/js/Components/ChatInput.vue
@@ -0,0 +1,85 @@
+<template>
+  <div>
+    <div class="suggested-prompts flex flex-row items-baseline gap-2 mb-4 justify-end flex-wrap"> 
+        <p class="text-sm text-gray-900 mr-2"> 
+          {{ languageButtonLabels[currentLocale]?.suggestedPromptsText || 'Suggested Prompts:' }}
+        </p>
+      <button v-for="prompt in suggestedPrompts" :key="prompt.id"
+              @click="$emit('insert-prompt', prompt.text)"
+              class="bg-sky-600 hover:bg-sky-700 text-white p-2 rounded-md cursor-pointer text-sm">
+        {{ prompt.text }}
+      </button>
+    </div>
+
+    <form @submit.prevent="handleSubmit" class="text-base clear-both">
+      <textarea
+        :value="modelValueMessage"
+        @input="$emit('update:modelValueMessage', $event.target.value)"
+        placeholder="Type your message..."
+        class="w-full p-3 border border-gray-600 bg-gray-700 text-white rounded-md text-base focus:ring-sky-500 focus:border-sky-500"
+        rows="2"
+      ></textarea>
+
+      <div class="flex items-center justify-between mt-3">
+        
+        <div class="model-selector">
+            <!--
+          <label for="model" class="text-sm text-gray-300">{{ languageButtonLabels[currentLocale]?.model || 'Select AI Model' }}</label>
+          <select 
+            id="model" 
+            :value="modelValueSelectedModel"
+            @change="$emit('update:modelValueSelectedModel', $event.target.value)"
+            class="ml-2 p-2 bg-gray-700 text-white border border-gray-600 rounded-md text-sm focus:ring-sky-500 focus:border-sky-500"
+          >
+            <option value="gemini">Gemini</option>
+            <option value="chatgpt">ChatGPT</option>
+          </select>
+        -->
+        </div>
+        <div class="flex gap-2">
+           <button
+              type="button"
+              @click="$emit('trigger-stream-report')"
+              :disabled="!canStreamReport"
+              class="persistent-report-button bg-teal-600 hover:bg-teal-700 text-white p-3 rounded-md cursor-pointer text-sm disabled:opacity-50 disabled:cursor-not-allowed">
+              {{ languageButtonLabels[currentLocale]?.generateReportText || 'Generate Full Report' }}
+          </button>
+          <button type="submit" class="send-button cursor-pointer bg-sky-600 hover:bg-sky-700 text-white p-3 rounded-md text-sm w-auto">
+              {{ languageButtonLabels[currentLocale]?.sendText || 'Send' }}
+          </button>
+        </div>
+      </div>
+    </form>
+  </div>
+</template>
+
+<script setup>
+import { defineProps, defineEmits } from 'vue';
+
+const props = defineProps({
+  modelValueMessage: String,
+  modelValueSelectedModel: String,
+  canStreamReport: Boolean,
+  languageButtonLabels: Object,
+  currentLocale: String,
+  suggestedPrompts: Array,
+});
+
+const emit = defineEmits([
+  'update:modelValueMessage',
+  'update:modelValueSelectedModel',
+  'submit-chat',
+  'trigger-stream-report',
+  'insert-prompt',
+]);
+
+const handleSubmit = () => {
+  if (props.modelValueMessage.trim() === '') return;
+  emit('submit-chat', props.modelValueMessage, props.modelValueSelectedModel);
+};
+</script>
+
+<style scoped>
+/* Styles specific to ChatInput can be added here if any */
+/* For now, most relevant styles are global or handled by Tailwind classes */
+</style>
diff --git a/resources/js/Components/CombinedDataMapComponent.vue b/resources/js/Components/CombinedDataMapComponent.vue
new file mode 100644
index 0000000..7412a65
--- /dev/null
+++ b/resources/js/Components/CombinedDataMapComponent.vue
@@ -0,0 +1,437 @@
+<template>
+  <div class="combined-data-map-container p-4">
+    <h2 class="text-2xl font-bold text-center mb-6">Combined Data Map</h2>
+
+    <!-- NLP Query Section -->
+    <div class="nlp-query-section mb-6 p-4 border rounded-md shadow-sm bg-white">
+      <h3 class="text-xl font-semibold mb-3">Natural Language Query (Combined)</h3>
+      <p class="text-sm text-gray-600 mb-2">
+        Select data types and ask a question (e.g., "Show incidents and violations last week").
+      </p>
+      <div class="flex items-center space-x-2 mb-3">
+        <input 
+          v-model="nlpQueryText" 
+          type="text" 
+          placeholder="Query selected data types..."
+          class="p-2 border rounded-md w-full text-sm"
+          @keyup.enter="submitCombinedNlpQuery"
+        >
+        <button 
+          @click="submitCombinedNlpQuery" 
+          class="p-2 bg-indigo-500 text-white rounded-md text-sm hover:bg-indigo-600 whitespace-nowrap"
+          :disabled="isGlobalLoading || nlpSelectedDataTypes.length === 0"
+        >
+          {{ isGlobalLoading && nlpQuerySubmitted ? 'Processing...' : 'Submit Query' }}
+        </button>
+      </div>
+      <div class="mb-3">
+        <span class="text-sm font-medium mr-2">Query Targets:</span>
+        <label v-for="dt in availableDataTypes" :key="`nlp-${dt}`" class="mr-4 text-sm inline-flex items-center">
+          <input type="checkbox" :value="dt" v-model="nlpSelectedDataTypes" class="mr-1 form-checkbox h-4 w-4 text-indigo-600">
+          <span
+            v-if="getIconClassForDataType(dt)"
+            :class="[getIconClassForDataType(dt), 'checkbox-icon-display']"
+          ></span>
+          {{ getModelNameForHumans(dt) }}
+        </label>
+      </div>
+      <div v-if="Object.keys(nlpErrorsByType).length > 0" class="mt-2 text-red-500 text-sm">
+        <p v-for="(error, type) in nlpErrorsByType" :key="`nlp-error-${type}`">Error for {{ getModelNameForHumans(type) }}: {{ error }}</p>
+      </div>
+    </div>
+
+    <!-- Map Data Type Selection Section -->
+    <div class="map-data-selection mb-6 p-4 border rounded-md shadow-sm bg-white">
+        <h3 class="text-xl font-semibold mb-3">Display Data Types on Map</h3>
+        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2">
+        <label v-for="dt in availableDataTypes" :key="`map-select-${dt}`" class="text-sm inline-flex items-center p-2 border rounded-md hover:bg-gray-50 cursor-pointer">
+            <input type="checkbox" :value="dt" v-model="mapSelectedDataTypes" class="mr-2 form-checkbox h-4 w-4 text-indigo-600">
+            <span
+              v-if="getIconClassForDataType(dt)"
+              :class="[getIconClassForDataType(dt), 'checkbox-icon-display']"
+            ></span>
+            {{ getModelNameForHumans(dt) }}
+        </label>
+    </div>
+    </div>
+
+    <!-- Map Display Section -->
+    <div class="mb-6">
+      <DataMapDisplay
+        ref="dataMapDisplayRef"
+        :mapCenterCoordinates="mapCenter"
+        :dataPointsToDisplay="combinedDataPointsForMap"
+        :externalIdFieldProp="'alcivartech_external_id'" 
+        @marker-data-point-clicked="handleMarkerClick"
+        @map-initialized-internal="handleMapInitialized"
+        class="h-[70vh] w-full rounded-md shadow-md generic-map" 
+      />
+    </div>
+    
+    <!-- Filters Section - Tabbed Interface -->
+    <div class="filters-tab-section mb-6 p-4 border rounded-md shadow-sm bg-white">
+        <h3 class="text-xl font-semibold mb-3">Filters</h3>
+        <div class="border-b border-gray-200">
+            <nav class="-mb-px flex space-x-4 overflow-x-auto" aria-label="Tabs">
+                <button
+                    v-for="dataType in availableDataTypes"
+                    :key="`tab-${dataType}`"
+                    @click="activeFilterTab = dataType"
+                    :class="[
+                        'whitespace-nowrap py-3 px-4 border-b-2 font-medium text-sm',
+                        activeFilterTab === dataType
+                            ? 'border-indigo-500 text-indigo-600'
+                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
+                    ]"
+                >
+                <span :class="getIconClassForDataType(dataType)" class="toolbar-icon-display"></span>
+                    {{ getModelNameForHumans(dataType) }} 
+                    <span class="text-xs bg-gray-200 text-gray-700 rounded-full px-1.5 py-0.5 ml-1">
+                        {{ (allDataPointsByType[dataType] || []).length }}
+                    </span>
+                </button>
+            </nav>
+        </div>
+        <div class="mt-4">
+            <div v-for="dataType in availableDataTypes" :key="`filter-content-${dataType}`">
+                <GenericFiltersControl
+                    v-show="activeFilterTab === dataType"
+                    :filter-fields-description="allDataTypeDetailsProp[dataType]?.filterFieldsDescription || []"
+                    :initial-filters="currentFiltersByType[dataType] || {}"
+                    :date-field="allDataTypeDetailsProp[dataType]?.dateField"
+                    :data-type="dataType" 
+                    @filters-updated="(newFilters) => handleFiltersUpdatedForType(dataType, newFilters)"
+                    class="mt-2"
+                />
+            </div>
+        </div>
+    </div>
+    
+    <!-- Selected Item Details -->
+    <div class="selected-item-details p-4 border rounded-md shadow-sm bg-white my-6 max-h-[40vh] overflow-y-auto">
+      <h3 class="text-lg font-semibold mb-3">Selected Item Details (Type: {{ selectedDataPoint?.alcivartech_type_display || 'N/A' }})</h3>
+      <div v-if="selectedDataPoint" class="text-sm">
+        <div v-for="(value, key) in selectedDataPoint" :key="key" class="mb-1">
+          <strong class="capitalize">{{ key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) }}:</strong> 
+          <span v-if="typeof value === 'object'">{{ JSON.stringify(value) }}</span>
+          <span v-else>{{ value }}</span>
+        </div>
+      </div>
+      <div v-else class="text-gray-500">Click a marker or list item to see details.</div>
+    </div>
+
+    <!-- AI Assistant -->
+    <AiAssistant 
+      v-if="combinedDataPointsForMap.length > 0 && !isGlobalLoading"
+      :context="combinedDataPointsForMap" 
+      :language_codes="language_codes" 
+      :currentMapLanguage="currentReportLanguage"
+      class="my-6"
+    />
+
+    <!-- Data List Section -->
+    <GenericDataList
+      :totalData="combinedDataPointsForMap"
+      :itemsPerPage="10"
+      @handle-goto-marker="handleListItemClick"
+      :language_codes="language_codes"
+      class="mt-6"
+    />
+
+    <!-- Download CSV Button -->
+    <div class="mt-6 text-right">
+      <button 
+        @click="downloadCombinedCSV" 
+        class="p-2 bg-green-500 text-white rounded-md text-sm hover:bg-green-600"
+        :disabled="combinedDataPointsForMap.length === 0"
+      >
+        Download Displayed Data as CSV
+      </button>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { ref, computed, onMounted, watch, inject } from 'vue';
+import axios from 'axios';
+import { usePage } from '@inertiajs/vue3';
+
+import DataMapDisplay from '@/Components/DataMapDisplay.vue';
+import GenericFiltersControl from '@/Components/GenericFiltersControl.vue';
+import AiAssistant from '@/Components/AiAssistant.vue';
+import GenericDataList from '@/Components/GenericDataList.vue';
+
+const props = defineProps({
+  modelMappingProp: Object,
+  initialDataTypeProp: String,
+  initialDataProp: Array,
+  initialFiltersProp: Object,
+  allDataTypeDetailsProp: Object, // Keyed by dataType: { dateField, externalIdField, filterFieldsDescription, modelNameForHumans }
+});
+
+const page = usePage();
+const csrfToken = computed(() => page.props.csrf_token || document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'));
+
+const dataMapDisplayRef = ref(null);
+const allDataPointsByType = ref({}); // { dataType1: [], dataType2: [] }
+const currentFiltersByType = ref({}); // { dataType1: {}, dataType2: {} }
+const isLoadingByType = ref({}); // { dataType1: false, dataType2: true }
+const nlpErrorsByType = ref({}); // { dataType1: "error message" }
+
+const nlpQueryText = ref('');
+const nlpSelectedDataTypes = ref([]);
+const nlpQuerySubmitted = ref(false);
+
+const selectedDataPoint = ref(null);
+const mapCenter = ref([42.3601, -71.0589]);
+const isMapInitialized = ref(false);
+const language_codes = ref(['en-US']);
+
+// const filterVisibility = ref({}); // To toggle filter sections - REMOVED for tabs
+const activeFilterTab = ref(''); // For tabbed filters
+const mapSelectedDataTypes = ref([]); // For selecting which data types appear on map
+
+const availableDataTypes = computed(() => Object.keys(props.modelMappingProp || {}));
+
+const isGlobalLoading = computed(() => {
+  return Object.values(isLoadingByType.value).some(loading => loading) || nlpQuerySubmitted.value;
+});
+
+const getIconClassForDataType = (dataType) => {
+  if (!dataType) return '';
+  const dtLower = dataType.toLowerCase();
+  if (dtLower.includes('crime')) return 'crime-div-icon';
+  if (dtLower.includes('case') || dtLower.includes('311')) return 'case-div-icon no-photo'; // Example for 311/cases
+  if (dtLower.includes('permit')) return 'permit-div-icon'; // Or 'building-permit-div-icon' if that's the class
+  if (dtLower.includes('property_violation') || dtLower.includes('violation')) return 'property-violation-div-icon';
+  if (dtLower.includes('construction_off_hour') || dtLower.includes('construction')) return 'construction-off-hour-div-icon';
+  if (dtLower.includes('food_inspection') || dtLower.includes('food') || dtLower.includes('inspection')) return 'food-inspection-div-icon';
+  // Add more mappings as needed based on your dataTypes and CSS classes
+  return ''; // Return empty string or a default icon class if no match
+};
+
+const getModelNameForHumans = (dataType) => {
+    return props.allDataTypeDetailsProp[dataType]?.modelNameForHumans || dataType.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
+};
+
+const currentReportLanguage = computed(() => {
+  const locale = language_codes.value[0] || 'en-US';
+  const mapping = { 'en-US': 'en', 'es-MX': 'es', /* ... */ };
+  return mapping[locale] || 'en';
+});
+
+const combinedDataPointsForMap = computed(() => {
+  let combined = [];
+  for (const dataType of mapSelectedDataTypes.value) { // Filter by mapSelectedDataTypes
+    if (availableDataTypes.value.includes(dataType)) { // Ensure it's a valid type
+        const points = allDataPointsByType.value[dataType] || [];
+        combined.push(...points.map(p => ({ 
+            ...p, 
+            alcivartech_external_id: `${dataType}-${p[props.allDataTypeDetailsProp[dataType]?.externalIdField || 'id']}`,
+            alcivartech_type_display: getModelNameForHumans(dataType) 
+        })));
+    }
+  }
+  return combined;
+});
+
+const fetchDataForType = async (dataType, filters) => {
+  if (!dataType) return;
+  isLoadingByType.value = { ...isLoadingByType.value, [dataType]: true };
+  nlpErrorsByType.value = { ...nlpErrorsByType.value, [dataType]: '' };
+
+  try {
+    const response = await axios.post(`/api/data/${dataType}`, {
+      filters: filters,
+    }, {
+      headers: { 'X-CSRF-TOKEN': csrfToken.value },
+    });
+    allDataPointsByType.value = { ...allDataPointsByType.value, [dataType]: response.data.data || [] };
+    currentFiltersByType.value = { ...currentFiltersByType.value, [dataType]: filters }; // Store applied filters
+  } catch (error) {
+    console.error(`Error fetching ${dataType} data:`, error);
+    nlpErrorsByType.value = { ...nlpErrorsByType.value, [dataType]: `Failed to fetch data. ${error.response?.data?.error || error.message}` };
+    allDataPointsByType.value = { ...allDataPointsByType.value, [dataType]: [] };
+  } finally {
+    isLoadingByType.value = { ...isLoadingByType.value, [dataType]: false };
+  }
+};
+
+const submitCombinedNlpQuery = async () => {
+  if (!nlpQueryText.value.trim() || nlpSelectedDataTypes.value.length === 0) return;
+  
+  nlpQuerySubmitted.value = true;
+  nlpErrorsByType.value = {}; // Clear previous errors
+
+  const queryPromises = nlpSelectedDataTypes.value.map(async (dataType) => {
+    isLoadingByType.value = { ...isLoadingByType.value, [dataType]: true };
+    try {
+      const response = await axios.post(`/api/natural-language-query/${dataType}`, {
+        query: nlpQueryText.value,
+      }, {
+        headers: { 'X-CSRF-TOKEN': csrfToken.value },
+      });
+      allDataPointsByType.value = { ...allDataPointsByType.value, [dataType]: response.data.data || [] };
+      if (response.data.filtersApplied) {
+        currentFiltersByType.value = { ...currentFiltersByType.value, [dataType]: response.data.filtersApplied };
+      }
+    } catch (error) {
+      console.error(`Error processing NLP query for ${dataType}:`, error);
+      nlpErrorsByType.value = { ...nlpErrorsByType.value, [dataType]: `NLP query failed. ${error.response?.data?.error || error.message}` };
+      allDataPointsByType.value = { ...allDataPointsByType.value, [dataType]: [] }; // Clear data on error for this type
+    } finally {
+      isLoadingByType.value = { ...isLoadingByType.value, [dataType]: false };
+    }
+  });
+
+  await Promise.all(queryPromises);
+  nlpQuerySubmitted.value = false;
+  
+  // Optionally, recenter map based on the first piece of data found
+  const firstDataTypeWithData = nlpSelectedDataTypes.value.find(dt => (allDataPointsByType.value[dt] || []).length > 0);
+  if (firstDataTypeWithData) {
+      const firstPoint = (allDataPointsByType.value[firstDataTypeWithData] || [])[0];
+      if (firstPoint && firstPoint.latitude && firstPoint.longitude && dataMapDisplayRef.value?.getMapInstance()) {
+          mapCenter.value = [parseFloat(firstPoint.latitude), parseFloat(firstPoint.longitude)];
+          dataMapDisplayRef.value.getMapInstance().setView(mapCenter.value, 13);
+      }
+  }
+};
+
+const handleFiltersUpdatedForType = (dataType, newFilters) => {
+  fetchDataForType(dataType, newFilters);
+};
+
+const handleMarkerClick = (dataPoint) => {
+  selectedDataPoint.value = dataPoint; // dataPoint here is already enriched by combinedDataPointsForMap
+};
+
+const handleListItemClick = (dataPoint) => {
+  selectedDataPoint.value = dataPoint;
+  const lat = parseFloat(dataPoint.latitude); // Assuming normalized latitude
+  const lon = parseFloat(dataPoint.longitude); // Assuming normalized longitude
+
+  if (dataMapDisplayRef.value && !isNaN(lat) && !isNaN(lon)) {
+    // panToAndOpenPopup expects the original externalIdField, which we've mapped to alcivartech_external_id
+    dataMapDisplayRef.value.panToAndOpenPopup(dataPoint, 'alcivartech_external_id');
+  }
+};
+
+const escapeCSVField = (field) => {
+  if (field === null || typeof field === 'undefined') return '';
+  let stringField = String(field);
+  if (stringField.includes(',') || stringField.includes('"') || stringField.includes('\n')) {
+    stringField = stringField.replace(/"/g, '""');
+    return `"${stringField}"`;
+  }
+  return stringField;
+};
+
+const downloadCombinedCSV = () => {
+  const dataToDownload = combinedDataPointsForMap.value;
+  if (dataToDownload.length === 0) return;
+
+  // Create a superset of all headers
+  const allHeaders = new Set();
+  dataToDownload.forEach(row => Object.keys(row).forEach(key => allHeaders.add(key)));
+  const headersArray = Array.from(allHeaders);
+
+  const csvRows = [
+    headersArray.map(escapeCSVField).join(','),
+    ...dataToDownload.map(row => 
+      headersArray.map(header => escapeCSVField(row[header])).join(',')
+    )
+  ];
+  
+  const csvString = csvRows.join('\n');
+  const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
+  const link = document.createElement('a');
+  const url = URL.createObjectURL(blob);
+  link.setAttribute('href', url);
+  link.setAttribute('download', `combined_data_map_export.csv`);
+  document.body.appendChild(link);
+  link.click();
+  document.body.removeChild(link);
+};
+
+// REMOVED: toggleFilterVisibility as accordion is replaced by tabs
+
+onMounted(async () => {
+  // Initialize with initial data type
+  if (props.initialDataTypeProp && props.initialDataProp) {
+    allDataPointsByType.value[props.initialDataTypeProp] = props.initialDataProp;
+    currentFiltersByType.value[props.initialDataTypeProp] = { ...(props.initialFiltersProp || {}), limit: 100 };
+    nlpSelectedDataTypes.value =  availableDataTypes.value;
+    activeFilterTab.value = props.initialDataTypeProp; // Set initial active tab
+    // enable all data types
+    mapSelectedDataTypes.value = availableDataTypes.value;
+  } else if (availableDataTypes.value.length > 0) {
+    // Fallback if no initialDataTypeProp is specified
+    const firstAvailableType = availableDataTypes.value[0];
+    activeFilterTab.value = firstAvailableType;
+    mapSelectedDataTypes.value = [firstAvailableType];
+    nlpSelectedDataTypes.value = [firstAvailableType];
+  }
+
+
+  // Initialize filter visibility and fetch data for other types
+  const fetchPromises = [];
+  availableDataTypes.value.forEach(dataType => {
+    // filterVisibility.value[dataType] = (dataType === props.initialDataTypeProp); // REMOVED
+
+    if (dataType !== props.initialDataTypeProp) {
+      const defaultFilters = { limit: 100 }; 
+      currentFiltersByType.value[dataType] = defaultFilters;
+      fetchPromises.push(fetchDataForType(dataType, defaultFilters));
+    } else if (props.initialDataProp && props.initialDataProp.length === 0 && Object.keys(currentFiltersByType.value[props.initialDataTypeProp] || {}).length > 0) {
+        fetchPromises.push(fetchDataForType(props.initialDataTypeProp, currentFiltersByType.value[props.initialDataTypeProp]));
+    }
+  });
+
+  await Promise.all(fetchPromises);
+
+  // Set map center based on initial data if available
+  if (props.initialDataProp && props.initialDataProp.length > 0) {
+    const firstPoint = props.initialDataProp[0];
+    if (firstPoint.latitude && firstPoint.longitude) {
+      mapCenter.value = [parseFloat(firstPoint.latitude), parseFloat(firstPoint.longitude)];
+    }
+  } else if (mapSelectedDataTypes.value.length > 0) {
+    // If no initial data, but some types are selected for map, try to center on first point of first selected type
+    const firstMapSelectedType = mapSelectedDataTypes.value[0];
+    const dataForFirstType = allDataPointsByType.value[firstMapSelectedType] || [];
+    if (dataForFirstType.length > 0) {
+        const firstPoint = dataForFirstType[0];
+         if (firstPoint.latitude && firstPoint.longitude) {
+            mapCenter.value = [parseFloat(firstPoint.latitude), parseFloat(firstPoint.longitude)];
+        }
+    }
+  }
+});
+
+const handleMapInitialized = (map) => {
+    isMapInitialized.value = true;
+    if (mapCenter.value && map) {
+        map.setView(mapCenter.value, 13);
+    }
+};
+
+</script>
+
+<style scoped>
+.combined-data-map-container {
+  display: flex;
+  flex-direction: column;
+  gap: 1.5rem;
+}
+.generic-map {
+  height: 70vh;
+  width: 100%;
+  border-radius: 0.5rem;
+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
+}
+
+/* Basic Tab Styling - customize as needed */
+/* Consider moving to a global style or a dedicated Tab component if used elsewhere */
+/* For Tailwind, you'd use classes directly in the template */
+</style>
diff --git a/resources/js/Components/Crime.vue b/resources/js/Components/Crime.vue
index 944a99b..f5b88a1 100644
--- a/resources/js/Components/Crime.vue
+++ b/resources/js/Components/Crime.vue
@@ -1,5 +1,5 @@
 <template>
-  <div v-if="data" class="p-4 bg-gray-100 h-full">
+  <div v-if="data" class="p-4 bg-gray-100">
     <h2 class="text-xl font-bold text-gray-800">
       {{ LabelsByLanguageCode[getSingleLanguageCode].crimeReportTitle }}
     </h2>
diff --git a/resources/js/Components/DataMapComponent.vue b/resources/js/Components/DataMapComponent.vue
new file mode 100644
index 0000000..faa8fe9
--- /dev/null
+++ b/resources/js/Components/DataMapComponent.vue
@@ -0,0 +1,342 @@
+<template>
+  <div class="data-map-container p-4">
+    <!-- NLP Query Section -->
+    <div class="nlp-query-section mb-6 p-4 border rounded-md shadow-sm bg-white">
+      <h3 class="text-xl font-semibold mb-3">Natural Language Query</h3>
+      <p class="text-sm text-gray-600 mb-2">
+        Ask a question about the data (e.g., "Show all incidents last week", "Find entries related to 'vandalism' in January").
+      </p>
+      <div class="flex items-center space-x-2">
+        <input 
+          v-model="naturalLanguageQuery" 
+          type="text" 
+          :placeholder="`Query ${dataTypeForHumans} data...`"
+          class="p-2 border rounded-md w-full text-sm"
+          @keyup.enter="submitNlpQuery"
+        >
+        <button 
+          @click="submitNlpQuery" 
+          class="p-2 bg-indigo-500 text-white rounded-md text-sm hover:bg-indigo-600 whitespace-nowrap"
+          :disabled="isLoading"
+        >
+          {{ isLoading && nlpSubmitted ? 'Processing...' : 'Submit Query' }}
+        </button>
+      </div>
+       <div v-if="nlpError" class="mt-2 text-red-500 text-sm">{{ nlpError }}</div>
+       <div v-if="isLoading && nlpSubmitted" class="mt-2 text-sm text-indigo-500">Fetching data based on your query...</div>
+    </div>
+
+
+    
+    <!-- Map Display Section -->
+    <div class="mb-6"> <!-- Wrapper for the map, similar to CrimeMapComponent's map div -->
+        <DataMapDisplay
+            ref="dataMapDisplayRef"
+            :mapCenterCoordinates="mapCenter"
+            :dataPointsToDisplay="dataPoints"
+            :externalIdFieldProp="externalIdFieldProp"
+            @marker-data-point-clicked="handleMarkerClick"
+            @map-initialized-internal="handleMapInitialized"
+            class="h-[70vh] w-full rounded-md shadow-md generic-map" 
+        />
+    </div>
+    
+    <!-- Selected Item Details -->
+    <div class="selected-item-details p-4 border rounded-md shadow-sm bg-white mb-6 max-h-[40vh] overflow-y-auto"> <!-- Placed below map -->
+        <h3 class="text-lg font-semibold mb-3">Selected Item Details</h3>
+        <div v-if="selectedDataPoint" class="text-sm">
+            <!-- Basic generic display of selectedDataPoint -->
+            <div v-for="(value, key) in selectedDataPoint" :key="key" class="mb-1">
+                <strong class="capitalize">{{ key.replace(/_/g, ' ') }}:</strong> 
+                <span v-if="typeof value === 'object'">{{ JSON.stringify(value) }}</span>
+                <span v-else>{{ value }}</span>
+            </div>
+            <!-- TODO: Implement dynamic component loading for specific data types if needed -->
+            <!-- Example: <component :is="detailComponentForDataType" :data="selectedDataPoint" /> -->
+        </div>
+        <div v-else class="text-gray-500">Click a marker or list item to see details.</div>
+    </div>
+    <!-- Manual Filters Section -->
+    <GenericFiltersControl
+      :filter-fields-description="filterFieldsDescriptionProp"
+      :initial-filters="currentFilters"
+      :date-field="dateFieldProp"
+      :data-type="dataTypeProp"
+      @filters-updated="handleFiltersUpdated"
+      class="mb-6"
+    />
+    <!-- AI Assistant -->
+    <AiAssistant 
+      v-if="dataPoints.length > 0 && !isLoading"
+      :context="dataPoints" 
+      :language_codes="language_codes" 
+      :currentMapLanguage="currentReportLanguage"
+      class="my-6"
+    />
+
+    <!-- Data List Section -->
+    <GenericDataList
+      :totalData="dataPoints"
+      :itemsPerPage="10"
+      @handle-goto-marker="handleListItemClick"
+      :language_codes="language_codes"
+      class="mt-6"
+    />
+
+    <!-- Download CSV Button -->
+     <div class="mt-6 text-right">
+        <button 
+            @click="downloadCSV" 
+            class="p-2 bg-green-500 text-white rounded-md text-sm hover:bg-green-600"
+            :disabled="dataPoints.length === 0"
+        >
+            Download Displayed Data as CSV
+        </button>
+    </div>
+
+  </div>
+</template>
+
+<script setup>
+import { ref, computed, onMounted, watch, inject } from 'vue';
+import axios from 'axios';
+import { usePage } from '@inertiajs/vue3';
+
+// import MapDisplay from '@/Components/MapDisplay.vue'; // Replaced
+import DataMapDisplay from '@/Components/DataMapDisplay.vue'; // Added
+import GenericFiltersControl from '@/Components/GenericFiltersControl.vue';
+import AiAssistant from '@/Components/AiAssistant.vue';
+import GenericDataList from '@/Components/GenericDataList.vue';
+
+const props = defineProps({
+  initialDataProp: Array,
+  pageFiltersProp: Object,
+  dataTypeProp: String,
+  dateFieldProp: String,
+  externalIdFieldProp: String,
+  filterFieldsDescriptionProp: [String, Array, Object],
+});
+
+const page = usePage();
+const csrfToken = computed(() => page.props.csrf_token || document.querySelector('meta[name="csrf-token"]')?.getAttribute('content'));
+const translations = inject('translations'); // Assuming translations are provided globally
+
+const dataMapDisplayRef = ref(null); // Renamed from mapDisplayRef
+const dataPoints = ref([]);
+const currentFilters = ref({});
+const naturalLanguageQuery = ref('');
+const nlpError = ref('');
+const nlpSubmitted = ref(false); // To distinguish general loading from NLP loading
+
+const selectedDataPoint = ref(null);
+const mapCenter = ref([42.3601, -71.0589]); // Default Boston center, adjust as needed
+const isLoading = ref(false);
+const isMapInitialized = ref(false);
+
+const language_codes = ref(['en-US']); // Default, make dynamic if needed
+
+const dataTypeForHumans = computed(() => {
+    if (!props.dataTypeProp) return 'Data';
+    return props.dataTypeProp.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
+});
+
+const currentReportLanguage = computed(() => {
+  const locale = language_codes.value[0] || 'en-US';
+  const mapping = { 'en-US': 'en', 'es-MX': 'es', /* ... more mappings */ };
+  return mapping[locale] || 'en';
+});
+
+const fetchData = async (filtersToApply) => {
+  if (!props.dataTypeProp) return;
+  isLoading.value = true;
+  nlpError.value = '';
+  try {
+    const response = await axios.post(`/api/data/${props.dataTypeProp}`, {
+      filters: filtersToApply,
+    }, {
+      headers: { 'X-CSRF-TOKEN': csrfToken.value },
+    });
+    dataPoints.value = response.data.data || [];
+    if (dataPoints.value.length > 0) {
+        // Recenter map if data points exist and map is initialized
+        if (isMapInitialized.value && dataMapDisplayRef.value?.getMapInstance()) {
+            const firstPointWithCoords = dataPoints.value.find(dp => (dp.latitude || dp.lat) && (dp.longitude || dp.long || dp.lng));
+            if (firstPointWithCoords) {
+                const lat = parseFloat(firstPointWithCoords.latitude || firstPointWithCoords.lat);
+                const lon = parseFloat(firstPointWithCoords.longitude || firstPointWithCoords.long || firstPointWithCoords.lng);
+                if (!isNaN(lat) && !isNaN(lon)) {
+                    mapCenter.value = [lat, lon];
+                    dataMapDisplayRef.value.getMapInstance().setView(mapCenter.value, 13); // Adjust zoom as needed
+                }
+            }
+        }
+    } else {
+        // console.log("No data points returned for the current filters.");
+    }
+  } catch (error) {
+    console.error(`Error fetching ${props.dataTypeProp} data:`, error);
+    nlpError.value = `Failed to fetch data. ${error.response?.data?.error || error.message}`;
+    dataPoints.value = [];
+  } finally {
+    isLoading.value = false;
+    nlpSubmitted.value = false;
+  }
+};
+
+const submitNlpQuery = async () => {
+  if (!naturalLanguageQuery.value.trim() || !props.dataTypeProp) return;
+  isLoading.value = true;
+  nlpSubmitted.value = true; // Mark that NLP query initiated loading
+  nlpError.value = '';
+  try {
+    const response = await axios.post(`/api/natural-language-query/${props.dataTypeProp}`, {
+      query: naturalLanguageQuery.value,
+    }, {
+      headers: { 'X-CSRF-TOKEN': csrfToken.value },
+    });
+    dataPoints.value = response.data.data || [];
+    // Update currentFilters based on what the NLP query resolved to, if provided
+    if (response.data.filtersApplied) {
+      currentFilters.value = { ...response.data.filtersApplied };
+    }
+     if (dataPoints.value.length > 0 && isMapInitialized.value && dataMapDisplayRef.value?.getMapInstance()) {
+        const firstPointWithCoords = dataPoints.value.find(dp => (dp.latitude || dp.lat) && (dp.longitude || dp.long || dp.lng));
+        if (firstPointWithCoords) {
+            const lat = parseFloat(firstPointWithCoords.latitude || firstPointWithCoords.lat);
+            const lon = parseFloat(firstPointWithCoords.longitude || firstPointWithCoords.long || firstPointWithCoords.lng);
+            if (!isNaN(lat) && !isNaN(lon)) {
+                mapCenter.value = [lat, lon];
+                dataMapDisplayRef.value.getMapInstance().setView(mapCenter.value, 13);
+            }
+        }
+    }
+  } catch (error) {
+    console.error(`Error processing NLP query for ${props.dataTypeProp}:`, error);
+    nlpError.value = `NLP query failed. ${error.response?.data?.error || error.message}`;
+    dataPoints.value = []; // Clear data on NLP error
+  } finally {
+    isLoading.value = false;
+    nlpSubmitted.value = false;
+  }
+};
+
+const handleFiltersUpdated = (newFilters) => {
+  currentFilters.value = { ...newFilters };
+  fetchData(currentFilters.value);
+};
+
+const handleMarkerClick = (dataPoint) => {
+  selectedDataPoint.value = dataPoint;
+};
+
+const handleListItemClick = (dataPoint) => {
+  selectedDataPoint.value = dataPoint;
+  const lat = parseFloat(dataPoint.latitude || dataPoint.lat);
+  const lon = parseFloat(dataPoint.longitude || dataPoint.long || dataPoint.lng);
+
+  if (dataMapDisplayRef.value && !isNaN(lat) && !isNaN(lon)) {
+    dataMapDisplayRef.value.panToAndOpenPopup(dataPoint, props.externalIdFieldProp);
+  }
+};
+
+const escapeCSVField = (field) => {
+  if (field === null || typeof field === 'undefined') return '';
+  let stringField = String(field);
+  if (stringField.includes(',') || stringField.includes('"') || stringField.includes('\n')) {
+    stringField = stringField.replace(/"/g, '""'); // Escape double quotes
+    return `"${stringField}"`; // Enclose in double quotes
+  }
+  return stringField;
+};
+
+const downloadCSV = () => {
+  if (dataPoints.value.length === 0) return;
+
+  const headers = Object.keys(dataPoints.value[0] || {});
+  const csvRows = [
+    headers.map(escapeCSVField).join(','), // Header row
+    ...dataPoints.value.map(row => 
+      headers.map(header => escapeCSVField(row[header])).join(',')
+    )
+  ];
+  
+  const csvString = csvRows.join('\n');
+  const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
+  const link = document.createElement('a');
+  const url = URL.createObjectURL(blob);
+  link.setAttribute('href', url);
+  link.setAttribute('download', `${props.dataTypeProp}_data.csv`);
+  link.style.visibility = 'hidden';
+  document.body.appendChild(link);
+  link.click();
+  document.body.removeChild(link);
+};
+
+onMounted(() => {
+  dataPoints.value = props.initialDataProp || [];
+  currentFilters.value = { ...(props.pageFiltersProp || {}), limit: 1000 }; 
+
+  const initialFetchRequired = Object.keys(currentFilters.value).filter(k => k !== 'limit').length > 0 || dataPoints.value.length === 0;
+
+  if (initialFetchRequired) {
+      fetchData(currentFilters.value);
+  } else if (dataPoints.value.length > 0) {
+        const firstPointWithCoords = dataPoints.value.find(dp => (dp.latitude || dp.lat) && (dp.longitude || dp.long || dp.lng));
+        if (firstPointWithCoords) {
+            const lat = parseFloat(firstPointWithCoords.latitude || firstPointWithCoords.lat);
+            const lon = parseFloat(firstPointWithCoords.longitude || firstPointWithCoords.long || firstPointWithCoords.lng);
+            if (!isNaN(lat) && !isNaN(lon)) {
+                 mapCenter.value = [lat, lon];
+                 // If map is already initialized by DataMapDisplay, we might want to set view here too
+                 // However, DataMapDisplay itself watches mapCenterCoordinates, so this might be redundant
+                 // if (isMapInitialized.value && dataMapDisplayRef.value?.getMapInstance()) {
+                 //    dataMapDisplayRef.value.getMapInstance().setView(mapCenter.value, 13);
+                 // }
+            }
+        }
+  }
+});
+
+const handleMapInitialized = (map) => {
+    isMapInitialized.value = true;
+    // If there was an initial centering based on data before map was ready, apply it now.
+    if (mapCenter.value && map) {
+        map.setView(mapCenter.value, 13); // Ensure map is centered correctly after init
+    }
+     // If initial data exists, and map just initialized, ensure markers are shown
+    if (props.initialDataProp && props.initialDataProp.length > 0 && dataMapDisplayRef.value) {
+       // DataMapDisplay's watch on dataPointsToDisplay should handle this,
+       // but an explicit call might be needed if timing is an issue.
+       // dataMapDisplayRef.value.updateMarkers(dataPoints.value);
+    }
+};
+
+
+// Watch for dataType changes if this component could be reused without full page reload
+watch(() => props.dataTypeProp, (newDataType, oldDataType) => {
+  if (newDataType !== oldDataType) {
+    naturalLanguageQuery.value = '';
+    selectedDataPoint.value = null;
+    // Reset filters or fetch new filter descriptions if they change with dataType
+    currentFilters.value = { limit: 1000 }; // Reset to default
+    fetchData(currentFilters.value);
+  }
+});
+
+</script>
+
+<style scoped>
+.data-map-container {
+  display: flex;
+  flex-direction: column;
+  gap: 1.5rem; /* Equivalent to mb-6 for spacing between major sections */
+}
+
+.generic-map {
+  height: 70vh; /* Adjust as needed */
+  width: 100%;
+  border-radius: 0.5rem; /* Equivalent to rounded-md */
+  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); /* Equivalent to shadow-md */
+}
+/* Add any additional specific styles here */
+</style>
diff --git a/resources/js/Components/DataMapDisplay.vue b/resources/js/Components/DataMapDisplay.vue
new file mode 100644
index 0000000..969a580
--- /dev/null
+++ b/resources/js/Components/DataMapDisplay.vue
@@ -0,0 +1,435 @@
+<template>
+  <div :id="mapId" class="h-full w-full"></div>
+</template>
+
+<script setup>
+import { ref, onMounted, onBeforeUnmount, watch, markRaw, nextTick} from 'vue';
+import 'leaflet/dist/leaflet.css';
+import * as L from 'leaflet';
+import 'leaflet.markercluster/dist/MarkerCluster.css';
+import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
+import 'leaflet.markercluster';
+
+// Fix for default icon path issues with Vite/Leaflet
+delete L.Icon.Default.prototype._getIconUrl;
+// Remove the global override for iconUrl, as we'll set icons individually.
+// L.Icon.Default.mergeOptions({
+//   iconRetinaUrl: "/images/foodinspectionicon.svg", // No longer needed here
+//   iconUrl: "/images/foodinspectionicon.svg",       // No longer needed here
+//   shadowUrl: false,
+// });
+
+
+const props = defineProps({
+  mapCenterCoordinates: {
+    type: Array,
+    default: () => [42.3601, -71.0589] // Default Boston center
+  },
+  dataPointsToDisplay: {
+    type: Array,
+    default: () => []
+  },
+  // mapIsLoading: { // This prop might not be directly used by this component for overlay, parent handles loading state
+  //   type: Boolean,
+  //   default: false
+  // },
+  externalIdFieldProp: { // To uniquely identify markers if needed, e.g., for panToAndOpenPopup
+    type: String,
+    default: 'id' // Default to 'id', models should have an 'id' or provide the correct field name
+  },
+  zoomLevel: {
+    type: Number,
+    default: 13
+  }
+});
+
+const emit = defineEmits(['marker-data-point-clicked', 'map-initialized-internal']);
+
+const mapId = `leaflet-map-${Math.random().toString(36).substring(2, 9)}`;
+const mapInstance = ref(null);
+// const markerClusterGroup = ref(null); // Changed: Will use multiple groups
+const markerClusterGroups = ref({}); // Changed: To store type-specific cluster groups
+const activeMarkersMap = ref(new Map()); // To store markers by their external ID for quick access
+
+const iconSettings = {
+  iconSize: [38, 38],    // Icon size (width, height)
+  iconAnchor: [19, 38],  // Point of the icon which will correspond to marker's location (bottom-center)
+  popupAnchor: [0, -38]  // Point from which the popup should open relative to the iconAnchor (top-center of anchor)
+};
+
+const getMarkerIcon = (alcivartechType) => {
+  let iconUrl = '/images/leaflet/marker-icon.png'; // Default Leaflet icon as a fallback
+    let iconClassName = 'default-div-icon'; // Default class name for the icon
+
+  switch (alcivartechType) {
+    case 'Crime':
+      iconUrl = '/images/crimeshieldicon.svg';
+      iconClassName = 'crime-div-icon';
+      break;
+    case '311 Case':
+      iconUrl = '/images/boston311icon.svg';
+      iconClassName = 'case-div-icon';
+      break;
+    case 'Building Permit':
+      iconUrl = '/images/permiticon.svg';
+        iconClassName = 'permit-div-icon';
+      break;
+    case 'Property Violation':
+      iconUrl = '/images/propertyviolationicon.svg';
+        iconClassName = 'property-violation-div-icon';
+      break;
+    case 'Construction Off Hour':
+      iconUrl = '/images/constructionoffhouricon.svg';
+        iconClassName = 'construction-off-hour-div-icon';
+      break;
+    case 'Food Inspection':
+      iconUrl = '/images/foodinspectionicon.svg';
+        iconClassName = 'food-inspection-div-icon';
+      break;
+    default:
+      // console.warn(`No specific icon for type: ${alcivartechType}, using default Leaflet icon.`);
+      // For the default Leaflet icon, we might not need to specify all settings if defaults are fine
+      // However, to ensure consistency if you have a custom default icon:
+      // iconUrl = '/images/custom-default-marker.svg';
+      return L.icon({ // Return Leaflet's default icon if type not matched
+          iconUrl: '/images/leaflet/marker-icon.png', // Standard Leaflet marker
+          iconRetinaUrl: '/images/leaflet/marker-icon-2x.png', // Standard Leaflet marker retina
+          shadowUrl: '/images/leaflet/marker-shadow.png', // Standard Leaflet marker shadow
+          iconSize: [25, 41],
+          iconAnchor: [12, 41],
+          popupAnchor: [1, -34],
+          shadowSize: [41, 41]
+      });
+  }
+
+  return L.icon({
+    iconUrl: iconUrl,
+    iconRetinaUrl: iconUrl, // Assuming SVGs or that retina versions are same as standard for these custom icons
+    iconSize: iconSettings.iconSize,
+    iconAnchor: iconSettings.iconAnchor,
+    popupAnchor: iconSettings.popupAnchor,
+    shadowUrl: false, // No shadow for custom icons, consistent with previous setup
+    className: iconClassName || 'default-div-icon' // Default class if not specified
+  });
+};
+
+const getClusterRadius = (zoom) => {
+  if (zoom < 10) {
+    return 80; // Larger radius when zoomed out
+  } else if (zoom < 13) {
+    return 60;
+  } else if (zoom < 16) {
+    return 40;
+  } else {
+    return 10; // Smaller radius when zoomed in, showing more individual markers or smaller clusters
+  }
+};
+
+// Helper function to create the iconCreateFunction for a given type
+const createTypedIconCreateFunction = (type) => {
+  return function(cluster) {
+    const childCount = cluster.getChildCount();
+    let classNames = 'marker-cluster';
+
+    // Use 'mixed' for 'Unknown' type, otherwise derive from type
+    const typeClass = (type === 'Unknown' || !type) 
+                      ? 'mixed' 
+                      : type.toLowerCase().replace(/\s+/g, '-');
+    classNames += ` cluster-${typeClass}`;
+
+    if (childCount < 10) {
+      classNames += ' marker-cluster-small';
+    } else if (childCount < 100) {
+      classNames += ' marker-cluster-medium';
+    } else {
+      classNames += ' marker-cluster-large';
+    }
+
+    return L.divIcon({
+      html: `<div><span>${childCount}</span></div>`,
+      className: classNames,
+      iconSize: L.point(40, 40)
+    });
+  };
+};
+
+const initializeMap = () => {
+  if (mapInstance.value) return; // Already initialized
+
+  mapInstance.value = markRaw(L.map(mapId, {
+      // scrollWheelZoom: false,
+  }).setView(props.mapCenterCoordinates, props.zoomLevel));
+
+  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
+    maxZoom: 20,
+    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
+  }).addTo(mapInstance.value);
+
+  // Removed single markerClusterGroup initialization here.
+  // Groups will be created dynamically in updateMarkers.
+
+  emit('map-initialized-internal', mapInstance.value);
+  updateMarkers(props.dataPointsToDisplay); // Initial marker update
+};
+
+const createPopupContent = (dataPoint) => {
+  const buildHtmlRecursive = (data, isNested = false) => {
+    let html = isNested ? '<div style="padding-left: 15px; border-left: 1px solid #eee; margin-top: 5px;">' : '';
+
+    for (const key in data) {
+      if (Object.prototype.hasOwnProperty.call(data, key)) {
+        const label = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
+        let value = data[key];
+
+        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
+          // For nested objects, print the label, then recursively build its content
+          html += `<div><strong>${label}:</strong>`;
+          html += buildHtmlRecursive(value, true); // Recursive call
+          html += `</div>`;
+        } else if (Array.isArray(value)) {
+          // For arrays, print the label and each item
+          html += `<div><strong>${label}:</strong>`;
+          value.forEach(item => {
+            html += buildHtmlRecursive(item, true); // Recursive call for each item
+          });
+          html += `</div>`;
+        } else {
+          // For simple key-value pairs
+          html += `<div><strong>${label}:</strong> ${value}</div>`;
+        }
+      }
+    }
+    html += isNested ? '</div>' : '';
+    return html;
+  };
+
+  let content = '<div style="max-height: 250px; overflow-y: auto; font-size: 0.9em; line-height: 1.4;">';
+  content += buildHtmlRecursive(dataPoint);
+  content += '</div>';
+  return content;
+};
+
+const updateMarkers = (newDataPoints) => {
+  if (!mapInstance.value) {
+    return;
+  }
+
+  // Clear layers from all existing cluster groups
+  Object.values(markerClusterGroups.value).forEach(group => {
+    group.clearLayers();
+  });
+  activeMarkersMap.value.clear();
+
+  // Optional: Remove cluster groups that will no longer have data.
+  // For simplicity, we'll keep them, and they'll just be empty.
+  // If removal is desired, track current types and remove unused groups from map and markerClusterGroups.value
+
+  newDataPoints.forEach(dp => {
+    const lat = parseFloat(dp.latitude || dp.lat);
+    const long = parseFloat(dp.longitude || dp.long || dp.lng);
+    const alcivartechType = dp.alcivartech_type || 'Unknown'; // Default to 'Unknown' if type is missing
+
+    if (!isNaN(lat) && !isNaN(long)) {
+      // Ensure a cluster group exists for this type
+      if (!markerClusterGroups.value[alcivartechType]) {
+        const newClusterGroup = markRaw(L.markerClusterGroup({
+          maxClusterRadius: getClusterRadius,
+          iconCreateFunction: createTypedIconCreateFunction(alcivartechType)
+        }));
+        mapInstance.value.addLayer(newClusterGroup);
+        markerClusterGroups.value[alcivartechType] = newClusterGroup;
+      }
+
+      const markerIcon = getMarkerIcon(alcivartechType);
+      const marker = markRaw(L.marker([lat, long], { icon: markerIcon, alcivartechType: alcivartechType }));
+      marker.bindPopup(createPopupContent(dp));
+      marker.on('click', () => {
+        emit('marker-data-point-clicked', dp);
+      });
+      
+      markerClusterGroups.value[alcivartechType].addLayer(marker);
+      
+      const externalId = dp[props.externalIdFieldProp];
+      if (externalId !== undefined) {
+        activeMarkersMap.value.set(String(externalId), marker);
+      }
+    } else {
+      // console.warn('Skipping data point due to invalid coordinates:', dp);
+    }
+  });
+};
+
+const panToAndOpenPopup = (dataPoint, idField) => {
+  const externalId = dataPoint[idField || props.externalIdFieldProp];
+  const marker = activeMarkersMap.value.get(String(externalId));
+
+  if (marker && mapInstance.value) {
+    const latLng = marker.getLatLng();
+    mapInstance.value.setView(latLng, Math.max(mapInstance.value.getZoom(), 15)); // Zoom in if not already
+    
+    // Open popup after a slight delay to ensure map pan/zoom is complete
+    nextTick(() => {
+        marker.openPopup();
+    });
+  } else {
+    // console.warn(`Marker with ID ${externalId} not found for panToAndOpenPopup.`);
+  }
+};
+
+
+onMounted(() => {
+  initializeMap();
+});
+
+onBeforeUnmount(() => {
+  if (mapInstance.value) {
+    // Remove all type-specific cluster groups
+    Object.values(markerClusterGroups.value).forEach(group => {
+      if (mapInstance.value.hasLayer(group)) {
+        mapInstance.value.removeLayer(group);
+      }
+    });
+    markerClusterGroups.value = {}; // Clear the stored groups
+
+    mapInstance.value.remove();
+    mapInstance.value = null;
+  }
+});
+
+watch(() => props.dataPointsToDisplay, (newDataPoints) => {
+  updateMarkers(newDataPoints);
+}, { deep: true });
+
+watch(() => props.mapCenterCoordinates, (newCenter) => {
+  if (mapInstance.value && newCenter && newCenter.length === 2) {
+    mapInstance.value.setView(newCenter, props.zoomLevel);
+  }
+}, { deep: true });
+
+
+// Expose methods to parent component
+defineExpose({
+  getMapInstance: () => mapInstance.value,
+  panToAndOpenPopup,
+});
+
+</script>
+
+<style scoped>
+/* Ensure the map container has a defined height in its parent or here */
+
+
+</style>
+
+<style>
+/* Global styles for Leaflet DivIcons if not scoped */
+.marker-cluster {
+  background-clip: padding-box;
+  border-radius: 20px; /* Should match iconSize / 2 if a perfect circle is desired for the 40x40 icon */
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  font-weight: bold;
+}
+.marker-cluster div {
+  width: 30px;
+  height: 30px;
+  margin-left: 0;
+  margin-top: 0;
+  text-align: center;
+  border-radius: 15px; /* Should match width/height / 2 for a perfect circle */
+  font: 12px "Helvetica Neue", Arial, Helvetica, sans-serif;
+  display: flex;
+  justify-content: center;
+  align-items: center;
+}
+.marker-cluster span {
+  line-height: 30px; /* Adjust if div height changes */
+}
+
+/* Default cluster size-based colors (will be overridden by type-specific if !important is used) */
+.marker-cluster-small {
+  background-color: rgba(181, 226, 140, 0.6);
+}
+.marker-cluster-small div {
+  background-color: rgba(110, 204, 57, 0.6);
+}
+.marker-cluster-medium {
+  background-color: rgba(241, 211, 87, 0.6);
+}
+.marker-cluster-medium div {
+  background-color: rgba(240, 194, 12, 0.6);
+}
+.marker-cluster-large {
+  background-color: rgba(253, 156, 115, 0.6);
+}
+.marker-cluster-large div {
+  background-color: rgba(241, 128, 23, 0.6);
+}
+
+/* Type-specific cluster colors, derived from app.css variables, made darker, with 0.6 alpha */
+
+/* Crime: base rgb(252, 127, 127) */
+.cluster-crime {
+  background-color: rgba(222, 97, 97, 0.6) !important; 
+}
+.cluster-crime div {
+  background-color: rgba(192, 67, 67, 0.6) !important;
+  color: white;
+}
+
+/* 311 Case: base rgb(59, 130, 246) */
+.cluster-311-case {
+  background-color: rgba(29, 100, 216, 0.6) !important; 
+}
+.cluster-311-case div {
+  background-color: rgba(0, 70, 186, 0.6) !important; /* Clamped blue to 0 */
+  color: white;
+}
+
+/* Building Permit: base rgb(138, 231, 138) */
+.cluster-building-permit {
+  background-color: rgba(108, 201, 108, 0.6) !important; 
+}
+.cluster-building-permit div {
+  background-color: rgba(78, 171, 78, 0.6) !important;
+  color: white;
+}
+
+/* Property Violation: base rgb(255, 255, 0) */
+.cluster-property-violation {
+  background-color: rgba(225, 225, 0, 0.6) !important;
+}
+.cluster-property-violation div {
+  background-color: rgba(195, 195, 0, 0.6) !important;
+  color: #333; /* Darker text for yellow background */
+}
+
+/* Construction Off Hour: base rgb(114, 203, 209) */
+.cluster-construction-off-hour {
+  background-color: rgba(84, 173, 179, 0.6) !important;
+}
+.cluster-construction-off-hour div {
+  background-color: rgba(54, 143, 149, 0.6) !important;
+  color: white;
+}
+
+/* Food Inspection: base rgb(255, 165, 0) */
+.cluster-food-inspection {
+  background-color: rgba(225, 135, 0, 0.6) !important;
+}
+.cluster-food-inspection div {
+  background-color: rgba(195, 105, 0, 0.6) !important;
+  color: white;
+}
+
+/* Fallback for clusters with no dominant type or if type is not set */
+.cluster-mixed { 
+  background-color: rgba(169, 169, 169, 0.6) !important; /* Grey for mixed/unknown */
+}
+.cluster-mixed div {
+  background-color: rgba(128, 128, 128, 0.6) !important;
+  color: white;
+}
+
+</style>
diff --git a/resources/js/Components/DataVisibilityBanner.vue b/resources/js/Components/DataVisibilityBanner.vue
new file mode 100644
index 0000000..420b1b0
--- /dev/null
+++ b/resources/js/Components/DataVisibilityBanner.vue
@@ -0,0 +1,90 @@
+<template>
+  <div class="bg-gradient-to-r from-white to-sky-50 border border-sky-200 rounded-lg p-5 mb-6 shadow">
+    <div class="flex flex-col md:flex-row md:justify-between md:items-center">
+      <div>
+        <h3 class="text-xl font-bold text-sky-900">Your Plan: {{ planLabel }}</h3>
+        <p class="text-sm text-sky-700 mt-1">Here’s what you can see:</p>
+      </div>
+      <div v-if="promptAction" class="mt-4 md:mt-0">
+        <Link
+          v-if="!isAuthenticated"
+          :href="route('register')"
+          class="inline-block bg-sky-600 text-white text-sm px-4 py-2 rounded-md hover:bg-sky-700 mr-2"
+        >Sign Up</Link>
+        <Link
+          v-if="!isAuthenticated"
+          :href="route('login')"
+          class="inline-block bg-slate-200 text-slate-800 text-sm px-4 py-2 rounded-md hover:bg-slate-300"
+        >Log In</Link>
+        <Link
+          v-if="isAuthenticated && !isPro"
+          :href="route('subscription.index')"
+          class="inline-block bg-green-500 text-white text-sm px-4 py-2 rounded-md hover:bg-green-600"
+        >Upgrade</Link>
+      </div>
+    </div>
+
+    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-5 text-sm text-sky-800">
+      <div class="p-3 bg-white border rounded">
+        <h4 class="font-semibold mb-1">Quick Map</h4>
+        <p>{{ radialMapText }}</p>
+      </div>
+      <div class="p-3 bg-white border rounded">
+        <h4 class="font-semibold mb-1">Full Map</h4>
+        <p>{{ fullMapText }}</p>
+      </div>
+    </div>
+
+    <p v-if="isPro" class="mt-4 text-green-700 font-medium">
+      🎉 You have full historical access!
+    </p>
+  </div>
+</template>
+
+<script setup>
+import { computed } from 'vue'
+import { usePage, Link } from '@inertiajs/vue3'
+
+const page = usePage()
+const user = computed(() => page.props.auth?.user)
+const isAuthenticated = computed(() => !!user.value)
+const plan = computed(() => page.props.auth?.currentPlan?.name || (isAuthenticated.value ? 'Registered User' : 'Guest'))
+const isPro = computed(() => plan.value === 'Pro Insights')
+
+const planLabel = computed(() => {
+  if (plan.value === 'Resident Awareness') return 'Resident Awareness'
+  if (plan.value === 'Pro Insights') return 'Pro Insights'
+  if (plan.value === 'Registered User') return 'Registered User'
+  return 'Guest'
+})
+
+const fmt = (n, u) => {
+  const now = new Date(), start = new Date(now)
+  if (u === 'days') start.setDate(now.getDate() - n)
+  else if (u === 'months') start.setMonth(now.getMonth() - n)
+  const d1 = start.toLocaleDateString(), d2 = now.toLocaleDateString()
+  return `${d1} – ${d2}`
+}
+
+const radialMapText = computed(() => {
+  if (!isAuthenticated.value) return `Last 7 days of data (${fmt(7,'days')})`
+  if (plan.value === 'Registered User') return `Last 14 days (${fmt(14,'days')})`
+  if (plan.value === 'Resident Awareness') return `Last 21 days (${fmt(21,'days')})`
+  if (isPro.value) return `Last 31 days (${fmt(31,'days')})`
+  return 'Data access info unavailable'
+})
+
+const fullMapText = computed(() => {
+  if (!isAuthenticated.value) return 'Log in to unlock more data.'
+  if (plan.value === 'Registered User') return `Last 2 months (${fmt(2,'months')})`
+  if (plan.value === 'Resident Awareness') return `Last 6 months (${fmt(6,'months')})`
+  if (isPro.value) return 'All available history'
+  return 'Data access info unavailable'
+})
+
+const promptAction = computed(() => !isPro.value)
+</script>
+
+<style scoped>
+/* Tailwind overall; no extra styles needed */
+</style>
diff --git a/resources/js/Components/EnrichWithApi.vue b/resources/js/Components/EnrichWithApi.vue
new file mode 100644
index 0000000..745a730
--- /dev/null
+++ b/resources/js/Components/EnrichWithApi.vue
@@ -0,0 +1,77 @@
+<template>
+  <div class="mb-4 p-3 border border-gray-300 bg-white shadow rounded" v-if="caseData">
+    <button
+      @click="fetchLiveData"
+      :disabled="isLoading || !caseData.case_enquiry_id"
+      class="mb-3 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-400"
+    >
+      {{ isLoading ? 'Loading Live Data...' : 'Refresh Live Data' }}
+    </button>
+  
+    <div v-if="liveData && Object.keys(liveData).length > 0">
+      <h3 class="text-md font-semibold text-gray-700">Live Data from BOS:311</h3>
+      <ul class="mt-2 text-sm text-gray-600 space-y-1">
+        <li v-if="liveData.status"><strong>Status:</strong> {{ liveData.status }}</li>
+        <li v-if="liveData.status_notes"><strong>Status Notes:</strong> {{ liveData.status_notes }}</li>
+        <li v-if="liveData.service_name"><strong>Service Name:</strong> {{ liveData.service_name }}</li>
+        <li v-if="liveData.description"><strong>Description:</strong> {{ liveData.description }}</li>
+        <li v-if="liveData.address"><strong>Address:</strong> {{ liveData.address }}</li>
+        <li v-if="liveData.agency_responsible"><strong>Agency Responsible:</strong> {{ liveData.agency_responsible }}</li>
+        <li v-if="liveData.service_notice"><strong>Service Notice:</strong> {{ liveData.service_notice }}</li>
+        <li v-if="liveData.requested_datetime"><strong>Reported:</strong> {{ formatDate(liveData.requested_datetime) }}</li>
+        <li v-if="liveData.updated_datetime"><strong>Last Updated:</strong> {{ formatDate(liveData.updated_datetime) }}</li>
+        <li v-if="liveData.expected_datetime"><strong>Expected Resolution:</strong> {{ formatDate(liveData.expected_datetime) }}</li>
+      </ul>
+      <div v-if="liveData.media_url" class="mt-2">
+        <img :src="liveData.media_url" alt="Live media" class="max-h-[80vh] w-auto border rounded"/>
+      </div>
+    </div>
+    <div v-else-if="!isLoading && !liveDataError" class="text-sm text-gray-500">
+      <p>No live data available.</p>
+    </div>
+    <div v-if="liveDataError" class="mt-3 text-sm text-red-600 bg-red-100 p-2 rounded border border-red-300">
+      <p><strong>Error:</strong> {{ liveDataError }}</p>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { ref } from 'vue';
+import axios from 'axios';
+
+const props = defineProps({
+  caseData: { type: Object, required: true },
+  liveData: { type: Object, required: false },
+});
+
+const isLoading = ref(false);
+const liveDataError = ref(null);
+
+function formatDate(date) {
+  return date ? new Date(date).toLocaleString() : 'N/A';
+}
+
+const fetchLiveData = async () => {
+  if (!props.caseData.case_enquiry_id) return;
+  isLoading.value = true;
+  liveDataError.value = null;
+  try {
+    const response = await axios.get(`/api/311-case/live/${props.caseData.case_enquiry_id}`);
+    console.log('Live data response:', response.data && response.data.data);
+    if (response.data && response.data.data) {
+      liveData.value = response.data.data;
+    } else {
+      liveData.value = {};
+    }
+  } catch (error) {
+    liveDataError.value = 'Failed to fetch live data.';
+  } finally {
+    isLoading.value = false;
+  }
+};
+
+// Automatically fetch live data when component mounts if conditions met.
+if (props.caseData.source_city === 'Boston') {
+  fetchLiveData();
+}
+</script>
diff --git a/resources/js/Components/FoodInspection.vue b/resources/js/Components/FoodInspection.vue
new file mode 100644
index 0000000..612e1e6
--- /dev/null
+++ b/resources/js/Components/FoodInspection.vue
@@ -0,0 +1,276 @@
+<template>
+  <div v-if="data" class="p-4 border border-black-200 rounded-lg h-full overflow-y-auto">
+    <h2 class="text-xl font-bold  mb-1">
+      {{ (data.violation_summary || isNonViolationRecord) ? LabelsByLanguageCode[getSingleLanguageCode].foodEstablishmentRecordTitle : LabelsByLanguageCode[getSingleLanguageCode].foodEstablishmentViolationTitle }}
+    </h2>
+    <p class=" text-gray-600 mb-3">
+      <strong>{{ data.violation_summary ? LabelsByLanguageCode[getSingleLanguageCode].mostRecentActivityDate : (isNonViolationRecord ? LabelsByLanguageCode[getSingleLanguageCode].inspectionDate : LabelsByLanguageCode[getSingleLanguageCode].violationDate) }}:</strong>
+      {{ formatDate(data.violation_summary ? data.alcivartech_date : (isNonViolationRecord ? data.resultdttm : data.violdttm)) }}
+    </p>
+
+    <!-- Common Establishment Details -->
+    <div class="mb-4 text-sm border-t border-b border-black-100 py-3">
+      <h3 class=" font-semibold mb-1.5">{{ LabelsByLanguageCode[getSingleLanguageCode].establishmentDetails }}</h3>
+      <p><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].businessName }}:</strong> {{ data.businessname || 'N/A' }}</p>
+      <p v-if="data.dbaname"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].dbaName }}:</strong> {{ data.dbaname }}</p>
+      <p><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].licenseNumber }}:</strong> {{ data.licenseno || 'N/A' }}</p>
+      <p><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].licenseStatus }}:</strong> {{ data.licstatus || 'N/A' }}</p>
+      <p><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].licenseCategory }}:</strong> {{ data.licensecat || 'N/A' }}</p>
+      <p><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].address }}:</strong> {{ data.address || 'N/A' }}, {{ data.city || 'N/A' }}, {{ data.state || 'N/A' }} {{ data.zip || 'N/A' }}</p>
+    </div>
+
+    <!-- Violation History (if aggregated) -->
+    <div v-if="data.violation_summary" class="text-sm">
+      <h3 class=" font-semibold  mb-2">
+        {{ LabelsByLanguageCode[getSingleLanguageCode].violationHistory }}
+        <span class="font-normal text-gray-600">({{ data.violation_summary.reduce((sum, s) => sum + s.entries.length, 0) }} {{ LabelsByLanguageCode[getSingleLanguageCode].totalRecords }})</span>
+      </h3>
+      <div v-for="summaryItem in data.violation_summary" :key="summaryItem.violdesc" class="mb-3 p-2.5 bg-white rounded shadow-sm border border-black-100">
+        <p class="font-semibold  text-sm">{{ summaryItem.violdesc }}</p>
+        <p class=" text-gray-500 mb-1.5"> ({{ summaryItem.entries.length }} {{ summaryItem.entries.length === 1 ? LabelsByLanguageCode[getSingleLanguageCode].recordSingular : LabelsByLanguageCode[getSingleLanguageCode].recordPlural }})</p>
+        <ul class="space-y-2">
+          <li v-for="(entry, index) in summaryItem.entries" :key="index" class="p-2  rounded  border-l-2 border-black-300">
+            <p><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].dateLabel }}:</strong> {{ formatDate(entry.alcivartech_date) }}</p>
+            <p v-if="entry.viol_status"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].violationStatus }}:</strong> <span :class="entry.viol_status === 'Fail' || (entry.result && entry.result.toLowerCase().includes('fail')) ? ' font-bold' : 'text-green-700 font-bold'">{{ entry.viol_status }}</span></p>
+            <p v-if="entry.result"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].inspectionResult }}:</strong> {{ entry.result }}</p>
+            <p v-if="entry.viol_level"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].violationLevel }}:</strong> {{ entry.viol_level }}</p>
+            <p v-if="entry.comments" class="mt-1"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].comments }}:</strong> <span class="italic">{{ entry.comments }}</span></p>
+          </li>
+        </ul>
+      </div>
+    </div>
+
+    <!-- Single Record Details (if not aggregated) -->
+    <div v-else class="text-sm">
+        <h3 class=" font-semibold  mb-1.5">
+            {{ isNonViolationRecord ? LabelsByLanguageCode[getSingleLanguageCode].inspectionDetails : LabelsByLanguageCode[getSingleLanguageCode].violationDetails }}
+        </h3>
+        <ul class="space-y-1">
+            <li v-if="data.result"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].inspectionResult }}:</strong> {{ data.result }}</li>
+            <li v-if="data.resultdttm"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].resultDate }}:</strong> {{ formatDate(data.resultdttm) }}</li>
+            
+            <template v-if="data.violdttm">
+              <li v-if="data.violation"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].violationCode }}:</strong> {{ data.violation }} <span v-if="data.viol_level"> ({{ data.viol_level }})</span></li>
+              <li v-if="data.violdesc"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].violationDescription }}:</strong> {{ data.violdesc }}</li>
+              <li v-if="data.viol_status"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].violationStatus }}:</strong> {{ data.viol_status }}</li>
+            </template>
+            
+            <li v-if="data.comments"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].comments }}:</strong> {{ data.comments }}</li>
+        </ul>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { computed, defineProps } from 'vue';
+
+const props = defineProps({
+  data: {
+    type: Object,
+    required: true,
+  },
+  language_codes: {
+    type: Array,
+    default: () => ['en-US'],
+  },
+});
+
+const LabelsByLanguageCode = {
+  'en-US': {
+    foodEstablishmentViolationTitle: 'Food Inspection',
+    foodEstablishmentRecordTitle: 'Food Inspection Record',
+    mostRecentActivityDate: 'Most Recent Activity',
+    businessName: 'Business Name',
+    dbaName: 'DBA Name',
+    licenseNumber: 'License No.',
+    licenseStatus: 'License Status',
+    licenseCategory: 'License Category',
+    inspectionResult: 'Inspection Result',
+    resultDate: 'Result Date',
+    violationCode: 'Violation Code',
+    violationDescription: 'Violation Description',
+    violationStatus: 'Status',
+    comments: 'Comments',
+    address: 'Address',
+    establishmentDetails: 'Establishment Details',
+    violationHistory: 'Violation History',
+    violationDetails: 'Violation Details',
+    totalRecords: 'total records',
+    recordSingular: 'record',
+    recordPlural: 'records',
+    violationLevel: 'Level',
+    // New labels
+    dateLabel: 'Date', // Kept for history list items if needed, or can be more specific there too.
+    inspectionDate: 'Inspection Date',
+    violationDate: 'Violation Date',
+    inspectionDetails: 'Inspection Details',
+  },
+  'es-MX': {
+    foodEstablishmentViolationTitle: 'Violación de Establecimiento de Comida',
+    foodEstablishmentRecordTitle: 'Registro de Establecimiento de Comida',
+    mostRecentActivityDate: 'Actividad Más Reciente',
+    businessName: 'Nombre del Negocio',
+    dbaName: 'Nombre DBA',
+    licenseNumber: 'No. de Licencia',
+    licenseStatus: 'Estado de Licencia',
+    licenseCategory: 'Categoría de Licencia',
+    inspectionResult: 'Resultado de Inspección',
+    resultDate: 'Fecha de Resultado',
+    violationCode: 'Código de Violación',
+    violationDescription: 'Descripción de Violación',
+    violationStatus: 'Estado',
+    comments: 'Comentarios',
+    address: 'Dirección',
+    establishmentDetails: 'Detalles del Establecimiento',
+    violationHistory: 'Historial de Violaciones',
+    violationDetails: 'Detalles de la Violación',
+    totalRecords: 'registros totales',
+    recordSingular: 'registro',
+    recordPlural: 'registros',
+    violationLevel: 'Nivel',
+    // New labels
+    dateLabel: 'Fecha',
+    inspectionDate: 'Fecha de Inspección',
+    violationDate: 'Fecha de Violación',
+    inspectionDetails: 'Detalles de la Inspección',
+  },
+  'zh-CN': {
+    foodEstablishmentViolationTitle: '食品机构违规',
+    foodEstablishmentRecordTitle: '食品机构记录',
+    mostRecentActivityDate: '最近活动',
+    businessName: '企业名称',
+    dbaName: 'DBA名称',
+    licenseNumber: '许可证号',
+    licenseStatus: '许可证状态',
+    licenseCategory: '许可证类别',
+    inspectionResult: '检查结果',
+    resultDate: '结果日期',
+    violationCode: '违规代码',
+    violationDescription: '违规描述',
+    violationStatus: '状态',
+    comments: '评论',
+    address: '地址',
+    establishmentDetails: '机构详情',
+    violationHistory: '违规历史',
+    violationDetails: '违规详情',
+    totalRecords: '总记录',
+    recordSingular: '条记录',
+    recordPlural: '条记录',
+    violationLevel: '级别',
+    // New labels
+    dateLabel: '日期',
+    inspectionDate: '检查日期',
+    violationDate: '违规日期',
+    inspectionDetails: '检查详情',
+  },
+  'ht-HT': {
+    foodEstablishmentViolationTitle: 'Vyolasyon Etablisman Manje',
+    foodEstablishmentRecordTitle: 'Dosye Etablisman Manje',
+    mostRecentActivityDate: 'Aktivite Pi Resan',
+    businessName: 'Non Biznis',
+    dbaName: 'Non DBA',
+    licenseNumber: 'Nimewo Lisans',
+    licenseStatus: 'Estati Lisans',
+    licenseCategory: 'Kategori Lisans',
+    inspectionResult: 'Rezilta Enspeksyon',
+    resultDate: 'Dat Rezilta',
+    violationCode: 'Kòd Vyolasyon',
+    violationDescription: 'Deskripsyon Vyolasyon',
+    violationStatus: 'Estati',
+    comments: 'Kòmantè',
+    address: 'Adrès',
+    establishmentDetails: 'Detay Etablisman',
+    violationHistory: 'Istwa Vyolasyon',
+    violationDetails: 'Detay Vyolasyon',
+    totalRecords: 'dosye total',
+    recordSingular: 'dosye',
+    recordPlural: 'dosye yo',
+    violationLevel: 'Nivo',
+    // New labels
+    dateLabel: 'Dat',
+    inspectionDate: 'Dat Enspeksyon',
+    violationDate: 'Dat Vyolasyon',
+    inspectionDetails: 'Detay Enspeksyon',
+  },
+  'pt-BR': {
+    foodEstablishmentViolationTitle: 'Violação de Estabelecimento Alimentar',
+    foodEstablishmentRecordTitle: 'Registro de Estabelecimento Alimentar',
+    mostRecentActivityDate: 'Atividade Mais Recente',
+    businessName: 'Nome da Empresa',
+    dbaName: 'Nome DBA',
+    licenseNumber: 'Nº da Licença',
+    licenseStatus: 'Status da Licença',
+    licenseCategory: 'Categoria da Licença',
+    inspectionResult: 'Resultado da Inspeção',
+    resultDate: 'Data do Resultado',
+    violationCode: 'Código da Violação',
+    violationDescription: 'Descrição da Violação',
+    violationStatus: 'Status',
+    comments: 'Comentários',
+    address: 'Endereço',
+    establishmentDetails: 'Detalhes do Estabelecimento',
+    violationHistory: 'Histórico de Violações',
+    violationDetails: 'Detalhes da Violação',
+    totalRecords: 'registros totais',
+    recordSingular: 'registro',
+    recordPlural: 'registros',
+    violationLevel: 'Nível',
+    // New labels
+    dateLabel: 'Data',
+    inspectionDate: 'Data da Inspeção',
+    violationDate: 'Data da Violação',
+    inspectionDetails: 'Detalhes da Inspeção',
+  },
+  'vi-VN': {
+    foodEstablishmentViolationTitle: 'Vi phạm Cơ sở Thực phẩm',
+    foodEstablishmentRecordTitle: 'Biên bản Cơ sở Thực phẩm',
+    mostRecentActivityDate: 'Hoạt động gần nhất',
+    businessName: 'Tên doanh nghiệp',
+    dbaName: 'Tên DBA',
+    licenseNumber: 'Số giấy phép',
+    licenseStatus: 'Tình trạng giấy phép',
+    licenseCategory: 'Loại giấy phép',
+    inspectionResult: 'Kết quả kiểm tra',
+    resultDate: 'Ngày có kết quả',
+    violationCode: 'Mã vi phạm',
+    violationDescription: 'Mô tả vi phạm',
+    violationStatus: 'Trạng thái',
+    comments: 'Bình luận',
+    address: 'Địa chỉ',
+    establishmentDetails: 'Chi tiết Cơ sở',
+    violationHistory: 'Lịch sử Vi phạm',
+    violationDetails: 'Chi tiết Vi phạm',
+    totalRecords: 'tổng số hồ sơ',
+    recordSingular: 'hồ sơ',
+    recordPlural: 'hồ sơ',
+    violationLevel: 'Cấp độ',
+    // New labels
+    dateLabel: 'Ngày',
+    inspectionDate: 'Ngày kiểm tra',
+    violationDate: 'Ngày vi phạm',
+    inspectionDetails: 'Chi tiết kiểm tra',
+  }
+};
+
+const isNonViolationRecord = computed(() => {
+  return props.data && !props.data.violation_summary && !props.data.violdttm;
+});
+
+const getSingleLanguageCode = computed(() => {
+  // Fallback to 'en-US' if the provided language code is not in LabelsByLanguageCode
+  if (props.language_codes && props.language_codes.length > 0 && LabelsByLanguageCode[props.language_codes[0]]) {
+    return props.language_codes[0];
+  }
+  return 'en-US';
+});
+
+function formatDate(dateString) {
+  if (!dateString) return 'N/A';
+  // Check if dateString is already a Date object or a valid date string
+  const date = new Date(dateString);
+  if (isNaN(date.getTime())) { // Invalid date
+    return dateString; // Return original string if it's not a valid date
+  }
+  return date.toLocaleString(getSingleLanguageCode.value, { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });
+}
+</script>
diff --git a/resources/js/Components/FoodInspectionTeaser.vue b/resources/js/Components/FoodInspectionTeaser.vue
new file mode 100644
index 0000000..54bcf4f
--- /dev/null
+++ b/resources/js/Components/FoodInspectionTeaser.vue
@@ -0,0 +1,515 @@
+<template>
+  <div v-if="(isAuthenticated && hasDetailedFoodData) || (!isAuthenticated && hasTeaserData)" 
+       class="my-8 rounded-lg shadow-lg border"
+       :class="{
+         'bg-green-50 border-green-200': isAuthenticated,
+         'bg-sky-50 border-sky-200': !isAuthenticated
+       }">
+
+    <!-- Collapsible Header -->
+    <div @click="toggleCollapse" 
+         class="p-4 cursor-pointer flex justify-between items-center"
+         :class="{
+           'text-green-800 hover:bg-green-100': isAuthenticated,
+           'text-sky-800 hover:bg-sky-100': !isAuthenticated
+         }">
+      <div class="font-bold text-lg">
+        <template v-if="!isAuthenticated">
+          <span v-if="mostSevereGroupForTeaser" class="text-amber-800">
+            ⚠️ {{ LabelsByLanguageCode[getSingleLanguageCode].guestCollapsedTitle(totalViolationsForTeaser, mostSevereGroupForTeaser.count, mostSevereGroupForTeaser.severityLabel) }}
+          </span>
+          <span v-else>{{ LabelsByLanguageCode[getSingleLanguageCode].guestCollapsedTitleDefault }}</span>
+        </template>
+        <template v-else>
+          {{ LabelsByLanguageCode[getSingleLanguageCode].loggedInCollapsedTitle }}
+        </template>
+      </div>
+      <svg class="w-6 h-6 transition-transform duration-300" :class="{'rotate-180': !isCollapsed}" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
+    </div>
+
+    <!-- Collapsible Content -->
+    <div v-if="!isCollapsed" class="p-6 border-t"
+         :class="{
+           'border-green-200': isAuthenticated,
+           'border-sky-200': !isAuthenticated
+         }">
+      <!-- Authenticated User View -->
+      <div v-if="isAuthenticated">
+        <h3 class="text-3xl font-bold mb-3 tracking-tight text-green-800">{{ LabelsByLanguageCode[getSingleLanguageCode].loggedInTitle }}</h3>
+        <p class="text-lg mb-5 text-green-700">{{ LabelsByLanguageCode[getSingleLanguageCode].loggedInSubtitle }}</p>
+
+        <div v-for="item in detailedFoodInspections" :key="item.id || item.licenseno + item.alcivartech_date" class="mb-5 p-4 bg-white text-gray-800 rounded-md shadow">
+          <h4 class="text-xl font-semibold text-green-700 mb-1">{{ item.businessname || LabelsByLanguageCode[getSingleLanguageCode].unknownEstablishment }}</h4>
+          <p class="text-sm text-gray-500 mb-2">{{ LabelsByLanguageCode[getSingleLanguageCode].addressLabel }}: {{ item.address || 'N/A' }}</p>
+          <p class="text-sm text-gray-600 mb-2">
+            <strong>{{ item._is_aggregated_food_violation ? LabelsByLanguageCode[getSingleLanguageCode].mostRecentActivityDate : (item.violdttm ? LabelsByLanguageCode[getSingleLanguageCode].violationDate : LabelsByLanguageCode[getSingleLanguageCode].inspectionDate) }}:</strong>
+            {{ formatDate(item.alcivartech_date) }}
+          </p>
+
+          <div v-if="item._is_aggregated_food_violation && item.violation_summary">
+            <p class="text-sm font-medium mt-2 mb-1">{{ LabelsByLanguageCode[getSingleLanguageCode].summaryOfFindings }}:</p>
+            <ul class="list-disc list-inside ml-4 text-xs space-y-1">
+              <li v-for="summary in item.violation_summary" :key="summary.violdesc">
+                <strong>{{ summary.violdesc }}</strong> ({{ summary.entries.length }} {{ summary.entries.length === 1 ? LabelsByLanguageCode[getSingleLanguageCode].recordSingular : LabelsByLanguageCode[getSingleLanguageCode].recordPlural }}):
+                <ul class="list-circle list-inside ml-4">
+                  <li v-for="entry in summary.entries.slice(0,2)" :key="entry.alcivartech_date + entry.comments">
+                    {{ formatDate(entry.alcivartech_date) }}: {{ entry.viol_status || entry.result || 'N/A' }}. {{ LabelsByLanguageCode[getSingleLanguageCode].levelLabel }}: {{entry.viol_level || 'N/A'}}. "{{ truncateComment(entry.comments, 40) }}"
+                  </li>
+                  <li v-if="summary.entries.length > 2">... {{ LabelsByLanguageCode[getSingleLanguageCode].andXMore(summary.entries.length - 2) }}</li>
+                </ul>
+              </li>
+            </ul>
+          </div>
+          <div v-else-if="item.violdttm">
+            <p class="text-sm mt-2"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].violationDescLabel }}:</strong> {{ item.violdesc || 'N/A' }}</p>
+            <p class="text-sm"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].levelLabel }}:</strong> {{ item.viol_level || 'N/A' }}</p>
+            <p class="text-sm"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].statusLabel }}:</strong> {{ item.viol_status || item.result || 'N/A' }}</p>
+            <p class="text-sm italic"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].commentsLabel }}:</strong> "{{ item.comments || 'N/A' }}"</p>
+          </div>
+          <div v-else>
+            <p class="text-sm mt-2"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].inspectionResultLabel }}:</strong> {{ item.result || 'N/A' }}</p>
+            <p class="text-sm italic"><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].commentsLabel }}:</strong> "{{ item.comments || 'N/A' }}"</p>
+          </div>
+        </div>
+        <p v-if="detailedFoodInspections.length === 0" class="text-center text-gray-600 py-4">{{ LabelsByLanguageCode[getSingleLanguageCode].noFoodInspectionData }}</p>
+      </div>
+
+      <!-- Guest User Teaser View -->
+      <div v-else>
+        <h3 class="text-3xl font-bold mb-3 tracking-tight text-sky-800">{{ LabelsByLanguageCode[getSingleLanguageCode].teaserTitle }}</h3>
+        <p class="text-lg mb-5 text-sky-700">{{ LabelsByLanguageCode[getSingleLanguageCode].teaserSubtitle }}</p>
+
+        <div v-for="group in sortedViolationGroups" :key="group.severityLabel" class="mb-5 p-4 bg-white text-gray-800 rounded-md shadow">
+          <p class="text-xl font-bold mb-2">
+            <span :class="{
+              'text-amber-600': group.order === severityMap['***'].order, 
+              'text-sky-600': group.order !== severityMap['***'].order
+            }">{{ group.count }}</span>
+            {{ group.severityLabel }} {{ LabelsByLanguageCode[getSingleLanguageCode].alerts }}
+          </p>
+          <p class="text-sm text-gray-600 mb-2">{{ LabelsByLanguageCode[getSingleLanguageCode].inspectorsNoted }}</p>
+          <ul v-if="group.comments.length > 0" class="list-disc list-inside ml-4 text-sm italic text-gray-700 space-y-1">
+            <li v-for="(comment, index) in group.comments.slice(0, 2)" :key="index">
+              "...{{ truncateComment(comment, 60) }}..."
+            </li>
+          </ul>
+        </div>
+
+        <div class="mt-8 pt-6 border-t border-sky-200 text-center">
+          <p class="text-xl font-semibold mb-4 text-sky-800">{{ LabelsByLanguageCode[getSingleLanguageCode].ctaTitle }}</p>
+          
+          <p class="text-md mb-4 text-sky-700 font-medium">{{ LabelsByLanguageCode[getSingleLanguageCode].guestUnlockDetailsPrompt }}</p>
+
+          <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + route('map.index')"
+            class="flex items-center justify-center w-full max-w-xs mx-auto mb-4 px-6 py-3 border border-gray-300 rounded-md shadow-sm text-base font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors">
+            <img class="h-5 w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+            {{ LabelsByLanguageCode[getSingleLanguageCode].googleLoginButton }}
+          </a>
+
+          <p class="text-sm mb-2 text-sky-700">{{ LabelsByLanguageCode[getSingleLanguageCode].dataAccessInfoFree }}</p>
+          <p class="text-sm mb-4 text-sky-700">{{ LabelsByLanguageCode[getSingleLanguageCode].dataAccessInfoPremium }}</p>
+
+          <Link :href="route('subscription.index')" 
+                class="inline-block bg-sky-600 hover:bg-sky-700 text-white font-bold py-3 px-8 rounded-lg text-lg shadow-md transition-colors">
+            {{ LabelsByLanguageCode[getSingleLanguageCode].viewPlansButton }}
+          </Link>
+          
+          <p class="mt-4 text-xs text-sky-600">
+            {{ LabelsByLanguageCode[getSingleLanguageCode].manualLoginPrompt }}
+            <Link :href="route('login')" class="hover:underline font-medium">{{ LabelsByLanguageCode[getSingleLanguageCode].manualLoginLink }}</Link> / 
+            <Link :href="route('register')" class="hover:underline font-medium">{{ LabelsByLanguageCode[getSingleLanguageCode].manualRegisterLink }}</Link>.
+          </p>
+        </div>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { computed, defineProps, ref } from 'vue';
+import { Link } from '@inertiajs/vue3';
+
+const props = defineProps({
+  dataPoints: {
+    type: Array,
+    required: true,
+  },
+  language_codes: {
+    type: Array,
+    default: () => ['en-US'],
+  },
+  isAuthenticated: {
+    type: Boolean,
+    default: false,
+  }
+});
+
+const isCollapsed = ref(true);
+
+const toggleCollapse = () => {
+  isCollapsed.value = !isCollapsed.value;
+};
+
+const severityMap = {
+  '***': { labelKey: 'highSeverity', order: 1 },
+  '**': { labelKey: 'moderateSeverity', order: 2 },
+  '*': { labelKey: 'lowSeverity', order: 3 },
+  'Unspecified': { labelKey: 'unspecifiedSeverity', order: 4 },
+};
+
+const LabelsByLanguageCode = {
+  'en-US': {
+    teaserTitle: "Food Safety In Your Neighborhood: Know Before You Go.",
+    teaserSubtitle: "Your health and your family's well-being are paramount. We provide transparent access to recent food inspection findings. This is a glimpse – log in or register for FREE to see full details, including establishment names and locations.",
+    alerts: "Key Findings Reported",
+    inspectorsNoted: "Recent inspector observations include:",
+    ctaTitle: "Unlock Full Food Safety Transparency – It's Your Right:",
+    googleLoginButton: "Login / Register with Google (Free)",
+    dataAccessInfoFree: "Access the latest 2 weeks of detailed food safety reports for FREE upon registration.",
+    dataAccessInfoPremium: "Need more? Our affordable plans unlock 6 months of data or ALL available historical reports.",
+    viewPlansButton: "View Subscription Plans",
+    manualLoginPrompt: "Prefer to ",
+    manualLoginLink: "Login",
+    manualRegisterLink: "Register",
+    guestUnlockDetailsPrompt: "Log in or register (it's free!) to see the names and locations of these establishments and access detailed reports.",
+    highSeverity: "High Concern",
+    moderateSeverity: "Moderate Concern",
+    lowSeverity: "Low Concern",
+    unspecifiedSeverity: "Unspecified Concern",
+    // Logged-in user labels
+    loggedInTitle: "Your Local Food Safety Report",
+    loggedInSubtitle: "Thank you for logging in! Here are the recent food inspection details for your selected area:",
+    unknownEstablishment: "Unknown Establishment",
+    addressLabel: "Address",
+    mostRecentActivityDate: "Most Recent Activity",
+    violationDate: "Violation Date",
+    inspectionDate: "Inspection Date",
+    summaryOfFindings: "Summary of Findings",
+    recordSingular: "record",
+    recordPlural: "records",
+    andXMore: (count) => `and ${count} more.`,
+    violationDescLabel: "Violation",
+    levelLabel: "Level",
+    statusLabel: "Status/Result",
+    commentsLabel: "Inspector Comments",
+    inspectionResultLabel: "Inspection Result",
+    noFoodInspectionData: "No food inspection data available for this area in the current filter.",
+    guestCollapsedTitle: (total, severeCount, severeCategory) => `EMPOWER YOUR CHOICES: ${total} Food Safety Reports Nearby, Including ${severeCount} ${severeCategory} Findings. Click to Uncover Details.`,
+    guestCollapsedTitleDefault: "Local Food Safety: Click to See Critical Insights",
+    loggedInCollapsedTitle: "View Your Local Food Safety Report",
+  },
+  // Add other languages with similar structure
+  'es-MX': {
+    teaserTitle: "Seguridad Alimentaria en Tu Vecindario: Infórmate Antes de Ir.",
+    teaserSubtitle: "Tu salud y el bienestar de tu familia son primordiales. Proporcionamos acceso transparente a hallazgos recientes de inspección de alimentos. Esto es un vistazo – inicia sesión o regístrate GRATIS para ver todos los detalles, incluyendo nombres y ubicaciones de establecimientos.",
+    alerts: "Hallazgos Clave Reportados",
+    inspectorsNoted: "Observaciones recientes de inspectores incluyen:",
+    ctaTitle: "Desbloquea la Transparencia Total en Seguridad Alimentaria – Es Tu Derecho:",
+    googleLoginButton: "Iniciar Sesión / Registrarse con Google (Gratis)",
+    dataAccessInfoFree: "Accede GRATIS a los informes detallados de seguridad alimentaria de las últimas 2 semanas al registrarte.",
+    dataAccessInfoPremium: "¿Necesitas más? Nuestros planes asequibles desbloquean 6 meses de datos o TODOS los informes históricos disponibles.",
+    viewPlansButton: "Ver Planes de Suscripción",
+    manualLoginPrompt: "Prefieres ",
+    manualLoginLink: "Iniciar Sesión",
+    manualRegisterLink: "Registrarte",
+    guestUnlockDetailsPrompt: "Inicia sesión o regístrate (¡es gratis!) para ver los nombres y ubicaciones de estos establecimientos y acceder a informes detallados.",
+    highSeverity: "Preocupación Alta",
+    moderateSeverity: "Preocupación Moderada",
+    lowSeverity: "Preocupación Baja",
+    unspecifiedSeverity: "Preocupación no Especificada",
+    loggedInTitle: "Tu Informe Local de Seguridad Alimentaria",
+    loggedInSubtitle: "¡Gracias por iniciar sesión! Aquí están los detalles recientes de inspección de alimentos para tu área seleccionada:",
+    unknownEstablishment: "Establecimiento Desconocido",
+    addressLabel: "Dirección",
+    mostRecentActivityDate: "Actividad Más Reciente",
+    violationDate: "Fecha de Violación",
+    inspectionDate: "Fecha de Inspección",
+    summaryOfFindings: "Resumen de Hallazgos",
+    recordSingular: "registro",
+    recordPlural: "registros",
+    andXMore: (count) => `y ${count} más.`,
+    violationDescLabel: "Violación",
+    levelLabel: "Nivel",
+    statusLabel: "Estado/Resultado",
+    commentsLabel: "Comentarios del Inspector",
+    inspectionResultLabel: "Resultado de Inspección",
+    noFoodInspectionData: "No hay datos de inspección de alimentos disponibles para esta área en el filtro actual.",
+    guestCollapsedTitle: (total, severeCount, severeCategory) => `EMPODERA TUS DECISIONES: ${total} Informes de Seguridad Alimentaria Cercanos, Incluyendo ${severeCount} Hallazgos de ${severeCategory}. Haz Clic para Descubrir Detalles.`,
+    guestCollapsedTitleDefault: "Seguridad Alimentaria Local: Clic para Ver Información Crítica",
+    loggedInCollapsedTitle: "Ver Tu Informe Local de Seguridad Alimentaria",
+  },
+    'zh-CN': {
+    teaserTitle: "您社区的食品安全：出行前请了解。",
+    teaserSubtitle: "您和您家人的健康至关重要。我们提供对近期食品检查结果的透明访问。这只是概览 – 免费登录或注册即可查看完整详情，包括机构名称和位置。",
+    alerts: "报告的主要发现",
+    inspectorsNoted: "近期检查员的观察包括：",
+    ctaTitle: "解锁全面的食品安全透明度 – 这是您的权利：",
+    googleLoginButton: "使用Google登录/注册 (免费)",
+    dataAccessInfoFree: "注册后免费访问最近两周的详细食品安全报告。",
+    dataAccessInfoPremium: "需要更多？我们经济实惠的计划可解锁6个月的数据或所有可用的历史报告。",
+    viewPlansButton: "查看订阅计划",
+    manualLoginPrompt: "或者 ",
+    manualLoginLink: "登录",
+    manualRegisterLink: "注册",
+    guestUnlockDetailsPrompt: "登录或注册（免费！），即可查看这些机构的名称和位置，并访问详细报告。",
+    highSeverity: "高度关注",
+    moderateSeverity: "中度关注",
+    lowSeverity: "低度关注",
+    unspecifiedSeverity: "未指明关注度",
+    loggedInTitle: "您当地的食品安全报告",
+    loggedInSubtitle: "感谢您的登录！以下是您所选区域最近的食品检查详细信息：",
+    unknownEstablishment: "未知机构",
+    addressLabel: "地址",
+    mostRecentActivityDate: "最近活动日期",
+    violationDate: "违规日期",
+    inspectionDate: "检查日期",
+    summaryOfFindings: "调查结果摘要",
+    recordSingular: "条记录",
+    recordPlural: "条记录",
+    andXMore: (count) => `及另外 ${count} 条。`,
+    violationDescLabel: "违规行为",
+    levelLabel: "级别",
+    statusLabel: "状态/结果",
+    commentsLabel: "检查员评论",
+    inspectionResultLabel: "检查结果",
+    noFoodInspectionData: "当前筛选条件下，该区域无食品检查数据。",
+    guestCollapsedTitle: (total, severeCount, severeCategory) => `自主选择，保障健康：附近共有 ${total} 份食品安全报告，其中包括 ${severeCount} 项${severeCategory}发现。点击了解详情。`,
+    guestCollapsedTitleDefault: "本地食品安全：点击查看关键信息",
+    loggedInCollapsedTitle: "查看您当地的食品安全报告",
+  },
+  'ht-HT': {
+    teaserTitle: "Sekirite Manje nan Kominote Ou: Konnen Anvan Ou Ale.",
+    teaserSubtitle: "Sante ou ak byennèt fanmi ou esansyèl. Nou bay aksè transparan a dènye rezilta enspeksyon manje. Sa a se yon apèsi – konekte oswa enskri GRATIS pou wè tout detay, enkli non etablisman ak kote yo ye.",
+    alerts: "Konklizyon Kle Yo Rapòte",
+    inspectorsNoted: "Obsèvasyon enspektè ki fèk fèt gen ladan:",
+    ctaTitle: "Debloke Transparans Total nan Sekirite Manje – Se Dwa Ou:",
+    googleLoginButton: "Konekte / Enskri ak Google (Gratis)",
+    dataAccessInfoFree: "Aksede GRATIS dènye 2 semèn rapò detaye sou sekirite manje lè ou enskri.",
+    dataAccessInfoPremium: "Ou bezwen plis? Plan abòdab nou yo debloke 6 mwa done oswa TOUT rapò istorik ki disponib.",
+    viewPlansButton: "Gade Plan Abònman",
+    manualLoginPrompt: "Prefere ",
+    manualLoginLink: "Konekte",
+    manualRegisterLink: "Enskri",
+    guestUnlockDetailsPrompt: "Konekte oswa enskri (li gratis!) pou wè non ak kote etablisman sa yo epitou pou aksede rapò detaye.",
+    highSeverity: "Gwo Enkyetid",
+    moderateSeverity: "Enkyetid Modere",
+    lowSeverity: "Ti Enkyetid",
+    unspecifiedSeverity: "Enkyetid Pa Espesifye",
+    loggedInTitle: "Rapò Sekirite Manje Lokal Ou",
+    loggedInSubtitle: "Mèsi dèske ou konekte! Men detay enspeksyon manje ki fèk fèt pou zòn ou chwazi a:",
+    unknownEstablishment: "Etablisman Enkoni",
+    addressLabel: "Adrès",
+    mostRecentActivityDate: "Aktivite Pi Resan",
+    violationDate: "Dat Vyolasyon",
+    inspectionDate: "Dat Enspeksyon",
+    summaryOfFindings: "Rezime Konklizyon",
+    recordSingular: "dosye",
+    recordPlural: "dosye yo",
+    andXMore: (count) => `ak ${count} lòt.`,
+    violationDescLabel: "Vyolasyon",
+    levelLabel: "Nivo",
+    statusLabel: "Estati/Rezilta",
+    commentsLabel: "Kòmantè Enspektè",
+    inspectionResultLabel: "Rezilta Enspeksyon",
+    noFoodInspectionData: "Pa gen done enspeksyon manje ki disponib pou zòn sa a nan filtè aktyèl la.",
+    guestCollapsedTitle: (total, severeCount, severeCategory) => `POUVWA CHWA OU: ${total} Rapò Sekirite Manje Toupre, Ak ${severeCount} Konklizyon ${severeCategory}. Klike pou Dekouvri Detay.`,
+    guestCollapsedTitleDefault: "Sekirite Manje Lokal: Klike pou Wè Enfòmasyon Kritik",
+    loggedInCollapsedTitle: "Gade Rapò Sekirite Manje Lokal Ou",
+  },
+  'pt-BR': {
+    teaserTitle: "Segurança Alimentar na Sua Vizinhança: Saiba Antes de Ir.",
+    teaserSubtitle: "Sua saúde e o bem-estar de sua família são primordiais. Oferecemos acesso transparente aos resultados recentes de inspeção de alimentos. Isto é uma prévia – faça login ou registre-se GRATUITAMENTE para ver todos os detalhes, incluindo nomes e locais dos estabelecimentos.",
+    alerts: "Principais Descobertas Relatadas",
+    inspectorsNoted: "Observações recentes de inspetores incluem:",
+    ctaTitle: "Desbloqueie a Transparência Total em Segurança Alimentar – É Seu Direito:",
+    googleLoginButton: "Login / Registrar com Google (Grátis)",
+    dataAccessInfoFree: "Acesse GRATUITAMENTE os relatórios detalhados de segurança alimentar das últimas 2 semanas ao se registrar.",
+    dataAccessInfoPremium: "Precisa de mais? Nossos planos acessíveis desbloqueiam 6 meses de dados ou TODOS os relatórios históricos disponíveis.",
+    viewPlansButton: "Ver Planos de Assinatura",
+    manualLoginPrompt: "Prefere ",
+    manualLoginLink: "Login",
+    manualRegisterLink: "Registrar",
+    guestUnlockDetailsPrompt: "Faça login ou registre-se (é grátis!) para ver os nomes e locais desses estabelecimentos e acessar relatórios detalhados.",
+    highSeverity: "Alta Preocupação",
+    moderateSeverity: "Preocupação Moderada",
+    lowSeverity: "Baixa Preocupação",
+    unspecifiedSeverity: "Preocupação Não Especificada",
+    loggedInTitle: "Seu Relatório Local de Segurança Alimentar",
+    loggedInSubtitle: "Obrigado por fazer login! Aqui estão os detalhes recentes de inspeção de alimentos para a área selecionada:",
+    unknownEstablishment: "Estabelecimento Desconhecido",
+    addressLabel: "Endereço",
+    mostRecentActivityDate: "Atividade Mais Recente",
+    violationDate: "Data da Violação",
+    inspectionDate: "Data da Inspeção",
+    summaryOfFindings: "Resumo das Descobertas",
+    recordSingular: "registro",
+    recordPlural: "registros",
+    andXMore: (count) => `e mais ${count}.`,
+    violationDescLabel: "Violação",
+    levelLabel: "Nível",
+    statusLabel: "Status/Resultado",
+    commentsLabel: "Comentários do Inspetor",
+    inspectionResultLabel: "Resultado da Inspeção",
+    noFoodInspectionData: "Nenhum dado de inspeção alimentar disponível para esta área no filtro atual.",
+    guestCollapsedTitle: (total, severeCount, severeCategory) => `CAPACITE SUAS ESCOLHAS: ${total} Relatórios de Segurança Alimentar Próximos, Incluindo ${severeCount} Descobertas de ${severeCategory}. Clique para Descobrir Detalhes.`,
+    guestCollapsedTitleDefault: "Segurança Alimentar Local: Clique para Ver Informações Críticas",
+    loggedInCollapsedTitle: "Ver Seu Relatório Local de Segurança Alimentar",
+  },
+  'vi-VN': {
+    teaserTitle: "An Toàn Thực Phẩm Trong Khu Phố Của Bạn: Biết Trước Khi Đi.",
+    teaserSubtitle: "Sức khỏe của bạn và gia đình là vô cùng quan trọng. Chúng tôi cung cấp quyền truy cập minh bạch vào các kết quả kiểm tra thực phẩm gần đây. Đây chỉ là một cái nhìn sơ lược – đăng nhập hoặc đăng ký MIỄN PHÍ để xem chi tiết đầy đủ, bao gồm tên và địa điểm của các cơ sở.",
+    alerts: "Các Phát Hiện Chính Được Báo Cáo",
+    inspectorsNoted: "Các quan sát gần đây của thanh tra bao gồm:",
+    ctaTitle: "Mở Khóa Hoàn Toàn Thông Tin Minh Bạch Về An Toàn Thực Phẩm – Đó Là Quyền Của Bạn:",
+    googleLoginButton: "Đăng nhập / Đăng ký bằng Google (Miễn phí)",
+    dataAccessInfoFree: "Truy cập MIỄN PHÍ các báo cáo an toàn thực phẩm chi tiết trong 2 tuần gần nhất khi đăng ký.",
+    dataAccessInfoPremium: "Cần thêm? Các gói cước phải chăng của chúng tôi mở khóa dữ liệu 6 tháng hoặc TẤT CẢ các báo cáo lịch sử có sẵn.",
+    viewPlansButton: "Xem Các Gói Đăng Ký",
+    manualLoginPrompt: "Hoặc ",
+    manualLoginLink: "Đăng nhập",
+    manualRegisterLink: "Đăng ký",
+    guestUnlockDetailsPrompt: "Đăng nhập hoặc đăng ký (miễn phí!) để xem tên và địa điểm của các cơ sở này và truy cập các báo cáo chi tiết.",
+    highSeverity: "Mối Quan Ngại Cao",
+    moderateSeverity: "Mối Quan Ngại Vừa",
+    lowSeverity: "Mối Quan Ngại Thấp",
+    unspecifiedSeverity: "Mối Quan Ngại Không Xác Định",
+    loggedInTitle: "Báo cáo An toàn Thực phẩm Địa phương của Bạn",
+    loggedInSubtitle: "Cảm ơn bạn đã đăng nhập! Dưới đây là chi tiết kiểm tra thực phẩm gần đây cho khu vực bạn đã chọn:",
+    unknownEstablishment: "Cơ sở không xác định",
+    addressLabel: "Địa chỉ",
+    mostRecentActivityDate: "Hoạt động gần nhất",
+    violationDate: "Ngày vi phạm",
+    inspectionDate: "Ngày kiểm tra",
+    summaryOfFindings: "Tóm tắt Kết quả",
+    recordSingular: "hồ sơ",
+    recordPlural: "hồ sơ",
+    andXMore: (count) => `và ${count} mục khác.`,
+    violationDescLabel: "Vi phạm",
+    levelLabel: "Cấp độ",
+    statusLabel: "Trạng thái/Kết quả",
+    commentsLabel: "Nhận xét của Thanh tra",
+    inspectionResultLabel: "Kết quả kiểm tra",
+    noFoodInspectionData: "Không có dữ liệu kiểm tra thực phẩm cho khu vực này trong bộ lọc hiện tại.",
+    guestCollapsedTitle: (total, severeCount, severeCategory) => `NÂNG CAO LỰA CHỌN CỦA BẠN: ${total} Báo Cáo An Toàn Thực Phẩm Gần Đây, Bao Gồm ${severeCount} Phát Hiện ${severeCategory}. Nhấp để Khám Phá Chi Tiết.`,
+    guestCollapsedTitleDefault: "An Toàn Thực Phẩm Địa Phương: Nhấp để Xem Thông Tin Quan Trọng",
+    loggedInCollapsedTitle: "Xem Báo cáo An toàn Thực phẩm Địa phương của Bạn",
+  }
+};
+
+const getSingleLanguageCode = computed(() => {
+  if (props.language_codes && props.language_codes.length > 0 && LabelsByLanguageCode[props.language_codes[0]]) {
+    return props.language_codes[0];
+  }
+  return 'en-US';
+});
+
+const foodInspectionViolationsForTeaser = computed(() => {
+  // This is the existing logic for the teaser (non-logged-in users)
+  const violations = [];
+  props.dataPoints.forEach(dp => {
+    if (dp.alcivartech_type === 'Food Inspection') {
+      if (dp._is_aggregated_food_violation && dp.violation_summary) {
+        dp.violation_summary.forEach(summaryItem => {
+          summaryItem.entries.forEach(entry => {
+            if (entry.viol_level && entry.comments) {
+              violations.push({
+                level: entry.viol_level,
+                comment: entry.comments,
+              });
+            }
+          });
+        });
+      } else if (dp.violdttm && dp.viol_level && dp.comments) {
+        violations.push({
+          level: dp.viol_level,
+          comment: dp.comments,
+        });
+      }
+    }
+  });
+  return violations;
+});
+
+const groupedViolations = computed(() => {
+  // For teaser
+  const groups = {};
+  const currentLabels = LabelsByLanguageCode[getSingleLanguageCode.value];
+  foodInspectionViolationsForTeaser.value.forEach(violation => {
+    const rawLevel = violation.level || 'Unspecified';
+    const severityInfo = severityMap[rawLevel] || severityMap['Unspecified'];
+    const severityLabel = currentLabels[severityInfo.labelKey];
+    if (!groups[severityLabel]) {
+      groups[severityLabel] = { count: 0, comments: [], order: severityInfo.order };
+    }
+    groups[severityLabel].count++;
+    if (violation.comment && groups[severityLabel].comments.length < 5) {
+      groups[severityLabel].comments.push(violation.comment);
+    }
+  });
+  for (const key in groups) {
+    groups[key].comments.sort(() => 0.5 - Math.random());
+  }
+  return groups;
+});
+
+const sortedViolationGroups = computed(() => {
+  // For teaser
+  return Object.entries(groupedViolations.value)
+    .map(([severityLabel, data]) => ({ severityLabel, ...data }))
+    .sort((a, b) => a.order - b.order);
+});
+
+const totalViolationsForTeaser = computed(() => {
+  return foodInspectionViolationsForTeaser.value.length;
+});
+
+const mostSevereGroupForTeaser = computed(() => {
+  if (sortedViolationGroups.value.length > 0) {
+    const mostSevereRaw = sortedViolationGroups.value[0];
+    return {
+        count: mostSevereRaw.count,
+        severityLabel: mostSevereRaw.severityLabel // This is already localized
+    };
+  }
+  return null;
+});
+
+
+const hasTeaserData = computed(() => {
+  // For teaser
+  return foodInspectionViolationsForTeaser.value.length > 0 && Object.keys(groupedViolations.value).length > 0;
+});
+
+const detailedFoodInspections = computed(() => {
+  if (!props.isAuthenticated) return [];
+  return props.dataPoints.filter(dp => dp.alcivartech_type === 'Food Inspection')
+    .sort((a,b) => new Date(b.alcivartech_date) - new Date(a.alcivartech_date)); // Show most recent first
+});
+
+const hasDetailedFoodData = computed(() => {
+    return props.isAuthenticated && detailedFoodInspections.value.length > 0;
+});
+
+const formatDate = (dateString) => {
+  if (!dateString) return 'N/A';
+  const date = new Date(dateString);
+  if (isNaN(date.getTime())) return dateString;
+  return date.toLocaleDateString(getSingleLanguageCode.value, { year: 'numeric', month: 'short', day: 'numeric' });
+};
+
+const truncateComment = (comment, maxLength) => {
+  if (!comment) return '';
+  return comment.length <= maxLength ? comment : comment.substring(0, maxLength).trim() + '...';
+};
+
+</script>
+
+<style scoped>
+/* Styles can be adjusted if needed */
+.list-circle {
+    list-style-type: circle;
+}
+.rotate-180 {
+  transform: rotate(180deg);
+}
+</style>
diff --git a/resources/js/Components/GenericDataDisplay.vue b/resources/js/Components/GenericDataDisplay.vue
new file mode 100644
index 0000000..b3f5d04
--- /dev/null
+++ b/resources/js/Components/GenericDataDisplay.vue
@@ -0,0 +1,68 @@
+<template>
+  <div class="generic-data-display">
+    <div v-for="(value, key) in filteredData" :key="key" class="mb-2">
+      <div v-if="isPhotoField(key, value)">
+        <div><strong>{{ formatLabel(key) }}:</strong></div>
+        <div v-if="Array.isArray(value)">
+          <img v-for="(img, idx) in value" :src="img" :key="idx" class="max-w-xs mb-1" alt="photo" />
+        </div>
+        <div v-else>
+          <img :src="value" class="max-w-xs mb-1" alt="photo" />
+        </div>
+      </div>
+      <div v-else>
+        <strong>{{ formatLabel(key) }}:</strong>
+        <span>{{ value }}</span>
+      </div>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { computed } from 'vue';
+
+const props = defineProps({
+  data: {
+    type: Object,
+    required: true
+  },
+  language_codes: {
+    type: Array,
+    default: () => ['en-US']
+  }
+});
+
+// Exclude any generic internal fields if needed.
+const filteredData = computed(() => {
+  const excludeKeys = ['id', 'alcivartech_type', 'alcivartech_date'];
+  const entries = {};
+  for (const [key, value] of Object.entries(props.data)) {
+    if (!excludeKeys.includes(key)) {
+      entries[key] = value;
+    }
+  }
+  return entries;
+});
+
+function formatLabel(key) {
+  // Capitalize first letter and replace underscores with spaces.
+  return key.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());
+}
+
+function isPhotoField(key, value) {
+  const keyLower = key.toLowerCase();
+  if (keyLower.includes('photo') || keyLower.includes('image')) {
+    return true;
+  }
+  if (typeof value === 'string' && (value.endsWith('.jpg') || value.endsWith('.jpeg') || value.endsWith('.png') || value.endsWith('.gif'))) {
+    return true;
+  }
+  return false;
+}
+</script>
+
+<style scoped>
+.generic-data-display {
+  font-size: 0.9rem;
+}
+</style>
diff --git a/resources/js/Components/GenericDataList.vue b/resources/js/Components/GenericDataList.vue
index 3c3d954..1094270 100644
--- a/resources/js/Components/GenericDataList.vue
+++ b/resources/js/Components/GenericDataList.vue
@@ -1,10 +1,61 @@
 <template>
-  <div className="w-full">
+  <div class="w-full">
+    <!-- Filter and Sort Controls -->
+    <div class="mb-4 p-4 border rounded-md bg-gray-50">
+      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
+        <!-- Keyword Search -->
+        <div>
+          <label for="keywordSearch" class="block text-sm font-medium text-gray-700 mb-1">{{ localizedLabels.searchPlaceholder }}</label>
+          <input
+            type="text"
+            id="keywordSearch"
+            v-model="searchKeyword"
+            :placeholder="localizedLabels.searchPlaceholder"
+            class="p-2 border rounded-md w-full text-sm"
+          />
+        </div>
+
+        <!-- Sort Control -->
+        <div>
+          <label class="block text-sm font-medium text-gray-700 mb-1">{{ localizedLabels.sortButtonLabel }}</label>
+          <button
+            @click="toggleSort"
+            class="p-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 w-full text-sm"
+          >
+            {{ sortButtonText }}
+          </button>
+        </div>
+      </div>
+
+      <!-- Data Type Filters -->
+      <div class="mt-4">
+        <h4 class="text-sm font-medium text-gray-700 mb-1">{{ localizedLabels.dataTypesHeader }}</h4>
+        <div class="mb-2">
+          <button @click="selectAllTypes" class="text-xs p-1 bg-blue-100 text-blue-700 rounded mr-2 hover:bg-blue-200">{{ localizedLabels.selectAllDataTypesLabel }}</button>
+          <button @click="deselectAllTypes" class="text-xs p-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200">{{ localizedLabels.deselectAllDataTypesLabel }}</button>
+        </div>
+        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2">
+          <div v-for="type in availableDataTypes" :key="type" class="flex items-center">
+            <input
+              type="checkbox"
+              :id= "`filter_${type}`" 
+              :value="type"
+              v-model="selectedDataTypes"
+              class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out mr-2"
+            />
+            <label 
+            :for= "`filter_${type}`"
+            class="text-sm text-gray-700">{{ type }}</label>
+          </div>
+        </div>
+      </div>
+    </div>
+
     <!-- Pagination Controls -->
     <div class="flex justify-between items-center mt-4 mb-4">
       <button
         @click="prevPage"
-        :disabled="currentPage === 1"
+        :disabled="currentPage === 1 || totalPages === 0"
         class="p-2 bg-blue-500 text-white rounded-lg shadow-lg hover:bg-blue-600 w-1/4 sm:w-1/6 disabled:bg-gray-300"
       >
         {{ localizedLabels.previousButton }}
@@ -13,17 +64,18 @@
         <span class="mr-2">{{ localizedLabels.pageLabel }}</span>
         <input
           v-model.number="inputPage"
-          @change="goToPage"
+          @keyup.enter="goToPage"
           type="number"
           min="1"
           :max="totalPages"
           class="w-16 p-1 border rounded-md text-center"
+          :disabled="totalPages === 0"
         />
         <span class="ml-2">{{ localizedLabels.ofLabel }} {{ totalPages }}</span>
       </div>
       <button
         @click="nextPage"
-        :disabled="currentPage === totalPages"
+        :disabled="currentPage === totalPages || totalPages === 0"
         class="p-2 bg-blue-500 text-white rounded-lg shadow-lg hover:bg-blue-600 w-1/4 sm:w-1/6 disabled:bg-gray-300"
       >
         {{ localizedLabels.nextButton }}
@@ -31,24 +83,19 @@
     </div>
 
     <!-- No Results Message -->
-    <div v-if="paginatedData.length === 0" class="text-center text-gray-500">
+    <div v-if="paginatedData.length === 0" class="text-center text-gray-500 py-8">
       {{ localizedLabels.noResultsMessage }}
     </div>
 
     <!-- Data List -->
-    <div v-else class="flex flex-wrap">
-      <div v-for="(item, index) in paginatedData" :key="index" class="p-4 bg-white w-full sm:w-1/2 md:w-1/3 lg:w-1/4">
-        <div class="bg-gray-100 p-2 rounded-md mb-2">
-          <ServiceCase v-if="item.alcivartech_type === '311 Case'" :data="item" :language_codes="language_codes" />
-          <Crime v-if="item.alcivartech_type === 'Crime'" :data="item" :language_codes="language_codes" />
-          <BuildingPermit v-if="item.alcivartech_type === 'Building Permit'" :data="item" :language_codes="language_codes" />
-          <PropertyViolation v-if="item.alcivartech_type === 'Property Violation'" :data="item" :language_codes="language_codes" />
-          <OffHours v-if="item.alcivartech_type === 'Construction Off Hour'" :data="item" :language_codes="language_codes" />
-
+    <div v-else class="flex flex-wrap -mx-2">
+      <div v-for="(item, index) in paginatedData" :key="item.alcivartech_external_id || item.id || index" class="p-2 w-full sm:w-1/2 md:w-1/3 lg:w-1/4">
+        <div class="bg-gray-100 p-2 rounded-md mb-2 data-container">
+          <UniversalDataDisplay :data="item" :language_codes="language_codes" />
           <!-- Button to emit datapoint for goto marker on map function -->
           <button
             @click="$emit('handle-goto-marker', item)"
-            class="p-2 bg-blue-500 text-white hover:bg-blue-600 find-button mb-4 ml-4"
+            class="p-2 bg-blue-500 text-white hover:bg-blue-600 find-button mb-4 ml-4 mt-2"
           >
             <img src="/images/find_on_map.svg" alt="Find on Map" class="w-10 h-10" />
           </button>
@@ -64,49 +111,100 @@ import Crime from "@/Components/Crime.vue";
 import BuildingPermit from "@/Components/BuildingPermit.vue";
 import PropertyViolation from "@/Components/PropertyViolation.vue";
 import OffHours from "@/Components/OffHours.vue";
+import FoodInspection from "./FoodInspection.vue";
+import UniversalDataDisplay from "@/Components/UniversalDataDisplay.vue";
 
 const localizationLabelsByLanguageCode = {
   'en-US': {
     previousButton: 'Previous',
     nextButton: 'Next',
-    noResultsMessage: 'No results found',
+    noResultsMessage: 'No results found for the current filters.',
     pageLabel: 'Page',
     ofLabel: 'of',
+    searchPlaceholder: 'Search...',
+    sortButtonLabel: 'Sort by Date',
+    dataTypesHeader: 'Filter by Data Type',
+    newestFirst: 'Newest First',
+    oldestFirst: 'Oldest First',
+    unsorted: 'Unsorted',
+    selectAllDataTypesLabel: 'Select All',
+    deselectAllDataTypesLabel: 'Deselect All',
   },
   'es-MX': {
     previousButton: 'Anterior',
     nextButton: 'Siguiente',
-    noResultsMessage: 'No se encontraron resultados',
+    noResultsMessage: 'No se encontraron resultados para los filtros actuales.',
     pageLabel: 'Página',
     ofLabel: 'de',
+    searchPlaceholder: 'Buscar...',
+    sortButtonLabel: 'Ordenar por Fecha',
+    dataTypesHeader: 'Filtrar por Tipo de Dato',
+    newestFirst: 'Más Recientes Primero',
+    oldestFirst: 'Más Antiguos Primero',
+    unsorted: 'Sin Ordenar',
+    selectAllDataTypesLabel: 'Seleccionar Todos',
+    deselectAllDataTypesLabel: 'Deseleccionar Todos',
   },
+  // Add other languages similarly
   'zh-CN': {
     previousButton: '上一页',
     nextButton: '下一页',
-    noResultsMessage: '未找到结果',
+    noResultsMessage: '根据当前筛选条件未找到结果。',
     pageLabel: '页',
     ofLabel: '的',
+    searchPlaceholder: '搜索...',
+    sortButtonLabel: '按日期排序',
+    dataTypesHeader: '按数据类型筛选',
+    newestFirst: '最新优先',
+    oldestFirst: '最早优先',
+    unsorted: '未排序',
+    selectAllDataTypesLabel: '全选',
+    deselectAllDataTypesLabel: '取消全选',
   },
   'ht-HT': {
     previousButton: 'Anvan',
     nextButton: 'Pwochen',
-    noResultsMessage: 'Pa gen rezilta jwenn',
+    noResultsMessage: 'Pa gen rezilta pou filtè aktyèl yo.',
     pageLabel: 'Paj',
     ofLabel: 'nan',
+    searchPlaceholder: 'Chèche...',
+    sortButtonLabel: 'Triye pa Dat',
+    dataTypesHeader: 'Filtre pa Kalite Done',
+    newestFirst: 'Pi Nouvo Anvan',
+    oldestFirst: 'Pi Ansyen Anvan',
+    unsorted: 'Pa Triye',
+    selectAllDataTypesLabel: 'Chwazi Tout',
+    deselectAllDataTypesLabel: 'Dechwazi Tout',
   },
   'vi-VN': {
     previousButton: 'Trước',
     nextButton: 'Kế tiếp',
-    noResultsMessage: 'Không tìm thấy kết quả',
+    noResultsMessage: 'Không tìm thấy kết quả cho bộ lọc hiện tại.',
     pageLabel: 'Trang',
     ofLabel: 'của',
+    searchPlaceholder: 'Tìm kiếm...',
+    sortButtonLabel: 'Sắp xếp theo Ngày',
+    dataTypesHeader: 'Lọc theo Loại Dữ liệu',
+    newestFirst: 'Mới nhất Trước',
+    oldestFirst: 'Cũ nhất Trước',
+    unsorted: 'Chưa sắp xếp',
+    selectAllDataTypesLabel: 'Chọn Tất cả',
+    deselectAllDataTypesLabel: 'Bỏ chọn Tất cả',
   },
   'pt-BR': {
     previousButton: 'Anterior',
     nextButton: 'Próximo',
-    noResultsMessage: 'Nenhum resultado encontrado',
+    noResultsMessage: 'Nenhum resultado encontrado para os filtros atuais.',
     pageLabel: 'Página',
     ofLabel: 'de',
+    searchPlaceholder: 'Pesquisar...',
+    sortButtonLabel: 'Ordenar por Data',
+    dataTypesHeader: 'Filtrar por Tipo de Dado',
+    newestFirst: 'Mais Recentes Primeiro',
+    oldestFirst: 'Mais Antigos Primeiro',
+    unsorted: 'Não Ordenado',
+    selectAllDataTypesLabel: 'Selecionar Todos',
+    deselectAllDataTypesLabel: 'Desmarcar Todos',
   },
 };
 
@@ -119,6 +217,8 @@ export default {
     BuildingPermit,
     PropertyViolation,
     OffHours,
+    FoodInspection,
+    UniversalDataDisplay,
   },
   props: {
     totalData: {
@@ -138,6 +238,9 @@ export default {
     return {
       currentPage: 1,
       inputPage: 1,
+      searchKeyword: '',
+      selectedDataTypes: [],
+      sortDirection: 'none', // 'none', 'asc', 'desc'
     };
   },
   computed: {
@@ -145,37 +248,178 @@ export default {
       const languageCode = this.language_codes[0] || "en-US";
       return localizationLabelsByLanguageCode[languageCode] || localizationLabelsByLanguageCode["en-US"];
     },
+    availableDataTypes() {
+      if (!this.totalData) return [];
+      const types = new Set(this.totalData.map(item => item.alcivartech_type).filter(Boolean));
+      return Array.from(types).sort();
+    },
+    processedData() {
+      let data = [...this.totalData];
+
+      // 1. Filter by selectedDataTypes
+      if (this.selectedDataTypes.length > 0 && this.selectedDataTypes.length < this.availableDataTypes.length) {
+        const selectedSet = new Set(this.selectedDataTypes);
+        data = data.filter(item => item.alcivartech_type && selectedSet.has(item.alcivartech_type));
+      } else if (this.selectedDataTypes.length === 0 && this.availableDataTypes.length > 0) {
+        // If no types are selected, show no data (unless there are no types available at all)
+        return [];
+      }
+
+
+      // 2. Filter by searchKeyword
+      if (this.searchKeyword && this.searchKeyword.trim() !== '') {
+        const lowerKeyword = this.searchKeyword.trim().toLowerCase();
+        data = data.filter(item => {
+          return Object.values(item).some(val => {
+            if (val === null || typeof val === 'undefined') return false;
+            // For objects (like violation_summary), stringify and search
+            if (typeof val === 'object') {
+                 try {
+                    return JSON.stringify(val).toLowerCase().includes(lowerKeyword);
+                 } catch (e) {
+                    return false; // Cannot stringify, so cannot search
+                 }
+            }
+            return String(val).toLowerCase().includes(lowerKeyword);
+          });
+        });
+      }
+
+      // 3. Sort by alcivartech_date
+      if (this.sortDirection !== 'none') {
+        data.sort((a, b) => {
+          const dateA = a.alcivartech_date ? new Date(a.alcivartech_date) : null;
+          const dateB = b.alcivartech_date ? new Date(b.alcivartech_date) : null;
+
+          if (!dateA && !dateB) return 0;
+          // Consistent handling for null dates: items without a date go to the end when ascending, start when descending.
+          if (!dateA) return this.sortDirection === 'asc' ? 1 : -1; 
+          if (!dateB) return this.sortDirection === 'asc' ? -1 : 1;
+
+          if (this.sortDirection === 'asc') {
+            return dateA - dateB;
+          } else { // desc
+            return dateB - dateA;
+          }
+        });
+      }
+      return data;
+    },
     totalPages() {
-      return Math.ceil(this.totalData.length / this.itemsPerPage);
+      if (!this.processedData || this.processedData.length === 0) return 0;
+      return Math.ceil(this.processedData.length / this.itemsPerPage);
     },
     paginatedData() {
+      if (!this.processedData || this.processedData.length === 0) return [];
       const start = (this.currentPage - 1) * this.itemsPerPage;
       const end = start + this.itemsPerPage;
-      return this.totalData.slice(start, end);
+      return this.processedData.slice(start, end);
     },
+    sortButtonText() {
+      const base = this.localizedLabels.sortButtonLabel;
+      if (this.sortDirection === 'desc') return `${base} (${this.localizedLabels.newestFirst})`;
+      if (this.sortDirection === 'asc') return `${base} (${this.localizedLabels.oldestFirst})`;
+      return `${base} (${this.localizedLabels.unsorted})`;
+    }
   },
   methods: {
+    resetPageAndInput() {
+      this.currentPage = 1;
+      this.inputPage = 1;
+    },
     nextPage() {
       if (this.currentPage < this.totalPages) {
         this.currentPage++;
+        this.inputPage = this.currentPage;
       }
     },
     prevPage() {
       if (this.currentPage > 1) {
         this.currentPage--;
+        this.inputPage = this.currentPage;
       }
     },
     goToPage() {
-      if (this.inputPage >= 1 && this.inputPage <= this.totalPages) {
-        this.currentPage = this.inputPage;
+      const pageNum = parseInt(this.inputPage, 10);
+      if (pageNum >= 1 && pageNum <= this.totalPages) {
+        this.currentPage = pageNum;
+      }
+      // Always reset inputPage to reflect current valid page, even if input was invalid
+      this.inputPage = this.currentPage; 
+    },
+    toggleSort() {
+      if (this.sortDirection === 'none') {
+        this.sortDirection = 'desc'; // Default to newest first
+      } else if (this.sortDirection === 'desc') {
+        this.sortDirection = 'asc';
       } else {
-        this.inputPage = this.currentPage;
+        this.sortDirection = 'none';
       }
     },
+    selectAllTypes() {
+      this.selectedDataTypes = [...this.availableDataTypes];
+    },
+    deselectAllTypes() {
+      this.selectedDataTypes = [];
+    },
+    initializeSelectedTypes() {
+      this.selectedDataTypes = [...this.availableDataTypes];
+    }
+  },
+  watch: {
+    totalData: {
+      handler() {
+        this.initializeSelectedTypes();
+        this.resetPageAndInput();
+      },
+      deep: true,
+    },
+    searchKeyword() {
+      this.resetPageAndInput();
+    },
+    selectedDataTypes: {
+        handler() {
+            this.resetPageAndInput();
+        },
+        deep: true // Necessary because it's an array
+    },
+    sortDirection() {
+      this.resetPageAndInput();
+    },
+    // When totalPages changes (due to filtering), ensure currentPage is not out of bounds.
+    totalPages(newTotalPages) {
+        if (this.currentPage > newTotalPages && newTotalPages > 0) {
+            this.currentPage = newTotalPages;
+            this.inputPage = newTotalPages;
+        } else if (newTotalPages === 0) {
+            this.currentPage = 1; // Or 0 if preferred, but 1 is common for "page 1 of 0"
+            this.inputPage = 1;
+        }
+    }
   },
+  mounted() {
+    this.initializeSelectedTypes();
+    // Ensure inputPage reflects initial currentPage
+    this.inputPage = this.currentPage;
+  }
 };
 </script>
 
 <style scoped>
 /* Add any additional styling */
+.data-container {
+  transition: transform 0.3s;
+  height: 500px; /* Or min-height if content varies a lot */
+  overflow-y: auto; /* Changed to y for vertical scroll only */
+  display: flex;
+  flex-direction: column; /* Ensure button is at bottom */
+  justify-content: space-between; /* Pushes button to bottom if content is short */
+}
+.data-container:hover {
+  transform: scale(1.02);
+}
+.find-button {
+  align-self: flex-end; /* Aligns button to the right if container is flex */
+  margin-top: auto; /* Pushes button to the bottom of the flex container */
+}
 </style>
diff --git a/resources/js/Components/GenericFiltersControl.vue b/resources/js/Components/GenericFiltersControl.vue
new file mode 100644
index 0000000..dc45221
--- /dev/null
+++ b/resources/js/Components/GenericFiltersControl.vue
@@ -0,0 +1,243 @@
+<template>
+  <div class="p-4 border rounded-md shadow-sm bg-white">
+    <h4 class="text-lg font-semibold mb-3">Filters</h4>
+    <div v-if="parsedFields.length === 0 && !dateField" class="text-gray-500">No filters available for this data type.</div>
+    
+    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
+      <!-- General Search Term Filter - Placed first if present -->
+      <template v-for="field in parsedFields" :key="field.name">
+        <div v-if="field.name === 'search_term'" class="flex flex-col md:col-span-2 lg:col-span-3"> <!-- Make it span more columns -->
+          <label :for="`filter_${field.name}_${dataType}`" class="font-medium mb-1 text-sm">{{ field.label }}</label>
+          <input 
+            type="text"
+            :id="`filter_${field.name}_${dataType}`"
+            v-model="localFilters[field.name]"
+            @input="debouncedEmitUpdate"
+            class="p-2 border rounded-md text-sm"
+            :placeholder="field.placeholder || `Enter ${field.label.toLowerCase()}`"
+          >
+        </div>
+      </template>
+
+      <!-- Date Range Filter -->
+      <template v-if="dateField">
+        <div class="flex flex-col">
+          <label :for="`start_date_${dataType}`" class="font-medium mb-1 text-sm">Start Date ({{ dateFieldLabel }})</label>
+          <input type="date" :id="`start_date_${dataType}`" v-model="localFilters.start_date" @change="emitFiltersUpdate" class="p-2 border rounded-md text-sm">
+        </div>
+        <div class="flex flex-col">
+          <label :for="`end_date_${dataType}`" class="font-medium mb-1 text-sm">End Date ({{ dateFieldLabel }})</label>
+          <input type="date" :id="`end_date_${dataType}`" v-model="localFilters.end_date" @change="emitFiltersUpdate" class="p-2 border rounded-md text-sm">
+        </div>
+      </template>
+
+      <!-- Dynamic Filters -->
+      <div v-for="field in parsedFields.filter(f => f.name !== 'search_term')" :key="field.name" class="flex flex-col"> <!-- Exclude search_term here -->
+        <label :for="`filter_${field.name}_${dataType}`" class="font-medium mb-1 text-sm">{{ field.label }}</label>
+        
+        <input 
+          v-if="field.type === 'text' || field.type === 'string' || field.type === 'number'"
+          :type="field.type === 'number' ? 'number' : 'text'"
+          :id="`filter_${field.name}_${dataType}`"
+          v-model="localFilters[field.name]"
+          @input="debouncedEmitUpdate"
+          class="p-2 border rounded-md text-sm"
+          :placeholder="field.placeholder || `Enter ${field.label.toLowerCase()}`"
+        >
+        
+        <select 
+          v-else-if="field.type === 'select'"
+          :id="`filter_${field.name}_${dataType}`"
+          v-model="localFilters[field.name]"
+          @change="emitFiltersUpdate"
+          class="p-2 border rounded-md text-sm"
+        >
+          <option value="">All {{ field.label }}</option>
+          <option v-for="option in field.options" :key="option.value || option" :value="option.value || option">
+            {{ option.label || option }}
+          </option>
+        </select>
+
+        <div v-else-if="field.type === 'multiselect' && field.options" class="max-h-40 overflow-y-auto border rounded-md p-2">
+            <div v-for="option in field.options" :key="option.value || option" class="flex items-center">
+                <input 
+                    type="checkbox" 
+                    :id="`filter_${field.name}_${option.value || option}_${dataType}`"
+                    :value="option.value || option"
+                    v-model="localFilters[field.name]"
+                    @change="emitFiltersUpdate"
+                    class="mr-2"
+                >
+                <label :for="`filter_${field.name}_${option.value || option}_${dataType}`" class="text-sm">{{ option.label || option }}</label>
+            </div>
+        </div>
+        
+        <input 
+          v-else-if="field.type === 'boolean'"
+          type="checkbox"
+          :id="`filter_${field.name}_${dataType}`"
+          v-model="localFilters[field.name]"
+          @change="emitFiltersUpdate"
+          class="p-2 border rounded-md h-5 w-5 mt-1"
+        >
+        <!-- Add more filter types as needed: text_array, etc. -->
+         <!-- handle date types-->
+        <input 
+          v-else-if="field.type === 'date'"
+          type="date"
+          :id="`filter_${field.name}_${dataType}`"
+          v-model="localFilters[field.name]"
+          @change="emitFiltersUpdate"
+          class="p-2 border rounded-md text-sm"
+        >
+        
+      </div>
+
+       <!-- Limit Filter -->
+        <div class="flex flex-col">
+            <label :for="`limit_${dataType}`" class="font-medium mb-1 text-sm">Record Limit</label>
+            <input type="number" :id="`limit_${dataType}`" v-model.number="localFilters.limit" @input="debouncedEmitUpdate" class="p-2 border rounded-md text-sm" placeholder="e.g., 1000">
+        </div>
+    </div>
+
+    <div class="mt-4 flex space-x-2">
+      <button @click="applyAndEmitFilters" class="p-2 bg-blue-500 text-white rounded-md text-sm hover:bg-blue-600">Apply Filters</button>
+      <button @click="clearAndEmitFilters" class="p-2 bg-gray-300 text-gray-700 rounded-md text-sm hover:bg-gray-400">Clear Filters</button>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { ref, watch, computed, onMounted } from 'vue';
+
+const props = defineProps({
+  filterFieldsDescription: { // Expects a JSON string or an array of objects
+    type: [String, Array, Object],
+    default: () => []
+  },
+  initialFilters: {
+    type: Object,
+    default: () => ({})
+  },
+  dateField: String, // Name of the primary date field for labels, e.g., 'occurred_on_date'
+  dataType: String, // To create unique IDs for inputs
+});
+
+const emit = defineEmits(['filters-updated']);
+
+const localFilters = ref({});
+
+const dateFieldLabel = computed(() => {
+    if (!props.dateField) return '';
+    return props.dateField.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
+});
+
+const parsedFields = computed(() => {
+  if (!props.filterFieldsDescription) return [];
+  try {
+    let desc = props.filterFieldsDescription;
+    if (typeof props.filterFieldsDescription === 'string') {
+      // Attempt to parse if it's a string
+      desc = JSON.parse(props.filterFieldsDescription);
+    }
+    
+    // Ensure it's an array after potential parsing
+    if (Array.isArray(desc)) {
+      return desc;
+    } else {
+      console.warn("filterFieldsDescription was successfully parsed but is not an array. Received:", desc, "Original prop:", props.filterFieldsDescription);
+      return [];
+    }
+  } catch (e) {
+    console.error("Failed to parse filterFieldsDescription. Expected a valid JSON string representing an array of filter objects, or an array/object directly. Error:", e, "Received prop:", props.filterFieldsDescription);
+    // It's crucial that the model's getFilterableFieldsDescription() returns a valid JSON string.
+    // Example of expected JSON: '[{"name": "status", "label": "Status", "type": "select", "options": ["Open", "Closed"]}]'
+    return []; // Default to no fields if parsing fails or format is incorrect
+  }
+});
+
+// Initialize localFilters based on parsedFields and initialFilters
+const initializeFilters = () => {
+    const newFilters = {
+        start_date: props.initialFilters?.start_date || '',
+        end_date: props.initialFilters?.end_date || '',
+        limit: props.initialFilters?.limit || 1000,
+    };
+    parsedFields.value.forEach(field => {
+        if (props.initialFilters && props.initialFilters.hasOwnProperty(field.name)) {
+            newFilters[field.name] = props.initialFilters[field.name];
+        } else {
+            // Set default based on type
+            if (field.type === 'multiselect') {
+                newFilters[field.name] = [];
+            } else if (field.type === 'boolean') {
+                newFilters[field.name] = false; // Or null if you want a "don't care" state
+            } else {
+                newFilters[field.name] = '';
+            }
+        }
+    });
+    localFilters.value = newFilters;
+};
+
+onMounted(() => {
+    initializeFilters();
+});
+
+watch(() => [props.filterFieldsDescription, props.initialFilters], () => {
+    initializeFilters();
+}, { deep: true });
+
+
+const emitFiltersUpdate = () => {
+  // Create a clean copy of filters, removing empty strings or empty arrays for some types
+  const filtersToEmit = {};
+  for (const key in localFilters.value) {
+    const value = localFilters.value[key];
+    if (value !== '' && value !== null && !(Array.isArray(value) && value.length === 0)) {
+      filtersToEmit[key] = value;
+    } else if (typeof value === 'boolean') { // Keep boolean false
+        filtersToEmit[key] = value;
+    }
+  }
+  emit('filters-updated', { ...filtersToEmit });
+};
+
+const debounce = (func, delay) => {
+  let timeout;
+  return function(...args) {
+    const context = this;
+    clearTimeout(timeout);
+    timeout = setTimeout(() => func.apply(context, args), delay);
+  };
+};
+
+const debouncedEmitUpdate = debounce(() => {
+  emitFiltersUpdate();
+}, 300); // Adjust debounce time as needed
+
+
+const applyAndEmitFilters = () => {
+    emitFiltersUpdate();
+}
+
+const clearAndEmitFilters = () => {
+  const clearedFilters = { limit: 1000 }; // Retain default limit or make it configurable
+  parsedFields.value.forEach(field => {
+    if (field.type === 'multiselect') {
+      clearedFilters[field.name] = [];
+    } else if (field.type === 'boolean') {
+      clearedFilters[field.name] = false; // Or null
+    } else {
+      clearedFilters[field.name] = '';
+    }
+  });
+  if (props.dateField) {
+    clearedFilters.start_date = '';
+    clearedFilters.end_date = '';
+  }
+  localFilters.value = { ...clearedFilters };
+  emit('filters-updated', { ...clearedFilters });
+};
+
+</script>
diff --git a/resources/js/Components/ImageCarousel.vue b/resources/js/Components/ImageCarousel.vue
index 5f8617d..5115669 100644
--- a/resources/js/Components/ImageCarousel.vue
+++ b/resources/js/Components/ImageCarousel.vue
@@ -1,10 +1,11 @@
 <template>
-    <div class="carousel-container" v-if="hasImages">
+    <div class="carousel-container" :style="{ height: carouselHeight }" v-if="hasImages">
         <div class="carousel-wrapper" ref="carouselWrapper">
             <div
                 v-for="(data, index) in filteredDataPoints"
-                :key="index"
-                :class="{ 'carousel-slide': true, 'active': isSlideActive(index) }"
+                :key="data.id || index" 
+                class="carousel-slide"
+                :style="{ flexBasis: `calc(100% / ${currentVisibleSlides})` }"
                 @click="onImageClick(data)"
             >
                 <div class="carousel-slide-inner">
@@ -20,54 +21,70 @@
                         alt="Data Point Image"
                         class="carousel-image"
                     />
-                    <div class="data-type-label">
+                    
+                    <div v-if="data.type" class="data-type-label">
                         {{ data.type }}
                     </div>
                 </div>
             </div>
         </div>
-        <div class="carousel-decoration">
+        <div class="carousel-decoration" v-if="totalPages > 1">
             <div class="carousel-controls">
-                <button @click="prevSlide" :disabled="currentIndex === 0" class="control-button prev-button">
+                <button @click="prevPage" :disabled="currentPageIndex === 0" class="control-button prev-button">
                     <
                 </button>
-                <button @click="nextSlide" :disabled="isLastSlide" class="control-button next-button">
+                <button @click="nextPage" :disabled="isLastPage" class="control-button next-button">
                     >
                 </button>
             </div>
 
             <div class="carousel-indicators">
-            <button
-                v-for="(data, index) in visibleIndicators"
-                :key="index"
-                @click="goToSlideGroup(index)"
-                :class="{ 'indicator-button': true, 'active': isIndicatorActive(index) }"
-            ></button>
+                <button
+                    v-for="page in totalPages"
+                    :key="`indicator-${page-1}`"
+                    @click="goToPage(page - 1)"
+                    :class="{ 'indicator-button': true, 'active': (page - 1) === currentPageIndex }"
+                ></button>
             </div>
-
         </div>
     </div>
-     <div v-else class="no-image-container">
+    <div v-else class="no-image-container" :style="{ height: carouselHeight }">
        No Images Available
     </div>
 </template>
 
 <script setup>
-import { ref, computed, watch } from 'vue';
+import { ref, computed, watch, onMounted, onUnmounted } from 'vue';
 
 const props = defineProps({
     dataPoints: {
         type: Array,
         default: () => [],
     },
+    carouselHeight: {
+        type: String,
+        default: '300px', // Default height, can be overridden by prop
+    },
+    // Define breakpoints and corresponding slides per view
+    // Example: { 1024: 4, 768: 3, 600: 2, 0: 1 } (screenWidth: slides)
+    // Order from largest to smallest screen width
+    responsiveBreakpoints: {
+        type: Object,
+        default: () => ({
+            1200: 5, // Large desktops: 4 slides
+            992: 4,  // Desktops: 3 slides
+            768: 3,  // Tablets: 2 slides
+            0: 2     // Mobile: 1 slide (fallback)
+        })
+    }
 });
 
-const carouselWrapper = ref(null);
-const currentIndex = ref(0); // Current slide index (group of 3)
-const visibleSlides = 3;
-
 const emit = defineEmits(['on-image-click']);
 
+const carouselWrapper = ref(null);
+const currentPageIndex = ref(0); // Current page index
+const currentVisibleSlides = ref(props.responsiveBreakpoints[0] || 1); // Number of slides visible at a time
+
 const hasImage = (data) => {
     return data?.closed_photo || data?.submitted_photo;
 };
@@ -84,137 +101,179 @@ const hasImages = computed(() => {
     return filteredDataPoints.value.length > 0;
 });
 
-const isLastSlide = computed(() => {
-    return currentIndex.value >= Math.floor((filteredDataPoints.value.length -1) / visibleSlides);
+const totalPages = computed(() => {
+    if (!filteredDataPoints.value.length || currentVisibleSlides.value === 0) return 0;
+    return Math.ceil(filteredDataPoints.value.length / currentVisibleSlides.value);
 });
 
+const isLastPage = computed(() => {
+    if (totalPages.value === 0) return true;
+    return currentPageIndex.value >= totalPages.value - 1;
+});
 
-const prevSlide = () => {
-    if (currentIndex.value > 0) {
-        currentIndex.value--;
-         scrollToSlideGroup();
-
+const prevPage = () => {
+    if (currentPageIndex.value > 0) {
+        currentPageIndex.value--;
     }
 };
 
-const nextSlide = () => {
-   if (!isLastSlide.value) {
-       currentIndex.value++;
-       scrollToSlideGroup();
+const nextPage = () => {
+   if (!isLastPage.value) {
+       currentPageIndex.value++;
    }
 };
 
-const goToSlideGroup = (index) => {
-  // Adjust `currentIndex` based on the full index
-  currentIndex.value = Math.floor(index / visibleSlides);
-  scrollToSlideGroup();
+const goToPage = (pageIndex) => {
+  if (pageIndex >= 0 && pageIndex < totalPages.value) {
+      currentPageIndex.value = pageIndex;
+  }
 };
 
-const isSlideActive = (index) => {
-  const start = currentIndex.value * visibleSlides;
-  return index >= start && index < start + visibleSlides;
-
+const scrollToCurrentPage = () => {
+    if (carouselWrapper.value && carouselWrapper.value.offsetWidth) {
+        // The amount to scroll is the width of the wrapper (which shows one page)
+        // multiplied by the current page index.
+        const scrollAmount = carouselWrapper.value.offsetWidth * currentPageIndex.value;
+        carouselWrapper.value.scrollTo({
+            left: scrollAmount,
+            behavior: 'smooth',
+        });
+    }
 };
 
-const isIndicatorActive = (index) => {
-    return Math.floor(index/visibleSlides) === currentIndex.value;
-}
+const updateVisibleSlides = () => {
+    const screenWidth = window.innerWidth;
+    let slides = props.responsiveBreakpoints[0] || 1; // Default to smallest or first defined
 
-const visibleRange = 10; // Number of indicators to show at a time
+    // Iterate through sorted breakpoints (largest to smallest screen width)
+    const sortedBreakpoints = Object.entries(props.responsiveBreakpoints)
+                                   .map(([width, count]) => [parseInt(width), count])
+                                   .sort((a, b) => b[0] - a[0]); // Sort descending by width
 
-const visibleIndicators = computed(() => {
-  const totalIndicators = filteredDataPoints.value.length;
-  const halfRange = Math.floor(visibleRange / 2);
+    for (const [breakpointWidth, count] of sortedBreakpoints) {
+        if (screenWidth >= breakpointWidth) {
+            slides = count;
+            break;
+        }
+    }
+    // If no breakpoint matches (e.g., screenWidth is smaller than all defined min widths)
+    // use the count for the smallest breakpoint (last one in sorted list if not already caught)
+    if (slides === (props.responsiveBreakpoints[0] || 1) && sortedBreakpoints.length > 0) {
+         const smallestBreakpoint = sortedBreakpoints[sortedBreakpoints.length - 1];
+         if (screenWidth < smallestBreakpoint[0]) {
+            slides = smallestBreakpoint[1];
+         }
+    }
 
-  if (totalIndicators <= visibleRange) {
-    // Show all indicators if the total is less than the visible range
-    return filteredDataPoints.value.map((_, index) => index);
-  }
+    if (currentVisibleSlides.value !== slides) {
+        currentVisibleSlides.value = slides;
+        // Reset to first page if number of visible slides changes,
+        // to avoid being on an out-of-bounds page.
+        // Or, try to maintain the current first visible item
+        const firstItemIndexOfCurrentPage = currentPageIndex.value * currentVisibleSlides.value;
+        currentPageIndex.value = Math.floor(firstItemIndexOfCurrentPage / slides) || 0;
+
+        // Ensure currentPageIndex is not out of bounds after recalculating
+        if(totalPages.value > 0) {
+           currentPageIndex.value = Math.min(currentPageIndex.value, totalPages.value - 1);
+        } else {
+           currentPageIndex.value = 0;
+        }
+    }
+};
 
-  // Calculate the start and end of the visible range
-  let start = Math.max(0, currentIndex.value - halfRange);
-  let end = Math.min(totalIndicators, currentIndex.value + halfRange + 1);
 
-  // Adjust range if near edges
-  if (start === 0) {
-    end = visibleRange;
-  } else if (end === totalIndicators) {
-    start = totalIndicators - visibleRange;
-  }
+onMounted(() => {
+    updateVisibleSlides(); // Initial check
+    window.addEventListener('resize', updateVisibleSlides);
+    // Ensure initial scroll position is correct if not starting at index 0
+    // Needs a slight delay for DOM to be ready if currentVisibleSlides was calculated
+    // and might have caused a re-render
+    setTimeout(scrollToCurrentPage, 0);
+});
 
-  // Return the indexes for the visible indicators
-  return Array.from({ length: end - start }, (_, i) => start + i);
+onUnmounted(() => {
+    window.removeEventListener('resize', updateVisibleSlides);
 });
 
+watch(currentPageIndex, () => {
+    scrollToCurrentPage();
+});
+
+// Watch for changes in data points or visible slides, as they affect totalPages
+watch([filteredDataPoints, currentVisibleSlides], () => {
+    if (totalPages.value > 0 && currentPageIndex.value >= totalPages.value) {
+        currentPageIndex.value = Math.max(0, totalPages.value - 1);
+    } else if (totalPages.value === 0) {
+        currentPageIndex.value = 0;
+    }
+    // This might be needed if data changes and current page becomes empty or invalid
+    // setTimeout(scrollToCurrentPage, 0); // scroll after DOM updates
+}, { deep: true });
 
 
-const scrollToSlideGroup = () => {
-      if (carouselWrapper.value) {
-            carouselWrapper.value.scrollTo({
-                left: carouselWrapper.value.offsetWidth * currentIndex.value,
-                behavior: 'smooth',
-            });
-      }
-}
-watch(
-    () => currentIndex.value,
-  () => {
-        scrollToSlideGroup();
-  });
+// This computed property is not directly used for display but can be helpful for debugging
+// or if you want to apply a style to specifically visible slides.
+const currentlyVisibleItemIndexes = computed(() => {
+    const start = currentPageIndex.value * currentVisibleSlides.value;
+    const end = start + currentVisibleSlides.value;
+    return filteredDataPoints.value.map((_, index) => index).slice(start, end);
+});
+
 </script>
 
 <style scoped>
 .carousel-container {
     position: relative;
     width: 100%;
+    /* height: 300px; Set by prop carouselHeight */
+    overflow: hidden; /* Crucial to contain slides within the fixed height */
 }
 
 .carousel-wrapper {
     display: flex;
-    overflow-x: auto;
-    scroll-snap-type: x mandatory;
+    height: 100%; /* Fill the container's height */
+    overflow-x: auto; /* Allows manual scroll if needed, but primarily for scrollTo */
+    scroll-snap-type: x mandatory; /* Each "page" will snap */
     scrollbar-width: none; /* Hide scrollbar in Firefox */
     -ms-overflow-style: none; /* Hide scrollbar in IE and Edge */
-    scroll-behavior: smooth;
+    scroll-behavior: smooth; /* Used by scrollTo JS, not direct user scroll */
 }
 
 .carousel-wrapper::-webkit-scrollbar {
     display: none; /* Hide scrollbar in Chrome, Safari, and Opera */
 }
 
-
 .carousel-slide {
-    flex: 0 0 calc(100% / 3); /* Three slides per row */
-    scroll-snap-align: start;
+    /* flex-basis set dynamically by :style */
+    flex-shrink: 0; /* Prevent slides from shrinking */
+    height: 100%; /* Make slide take full height of wrapper */
+    scroll-snap-align: start; /* Each slide group aligns to the start */
     cursor: pointer;
-     position: relative;
-    height: auto;
-     display: flex;
-     align-items: center;
-     justify-content: center;
-  transition: opacity 0.3s ease;
-
+    position: relative;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    box-sizing: border-box; /* Include padding/border in element's total width/height */
+    padding: 5px; /* Optional: adds some spacing around images */
 }
 
 .carousel-slide-inner {
-     max-width: 100%;
-    max-height: 100%;
+    width: 100%;
+    height: 100%;
     position: relative;
     display: flex;
-     align-items: center;
-     justify-content: center;
-
-}
-
-.carousel-slide.active {
-    opacity: 1;
+    align-items: center;
+    justify-content: center;
+    overflow: hidden; /* Ensure image doesn't overflow inner container */
 }
 
 .carousel-image {
-      width: 100%;
+    width: 100%;
     height: 100%;
-    object-fit: cover; /* or contain depending on desired look */
-     aspect-ratio: 1/1;
+    object-fit: cover; /* Cover the area, cropping if necessary */
+    /* aspect-ratio: 1/1; */ /* Remove if you want images to fill slide space non-uniformly,
+                                or adjust as needed. 'cover' will maintain aspect ratio. */
 }
 
 .data-type-label {
@@ -223,81 +282,103 @@ watch(
     left: 10px;
     background-color: rgba(0, 0, 0, 0.7);
     color: #fff;
-    padding: 5px 8px;
+    padding: 3px 6px;
     border-radius: 4px;
-    font-size: 0.9rem;
+    font-size: 0.8rem;
+    z-index: 1;
 }
 
 .no-image-container {
-  text-align: center;
-    padding: 20px;
-  font-style: italic;
-  color: #aaa;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    /* height: 300px; Set by prop carouselHeight */
+    text-align: center;
+    font-style: italic;
+    color: #aaa;
+    border: 1px dashed #ccc;
+    box-sizing: border-box;
 }
 
 .carousel-decoration {
     position: absolute;
-    bottom: 15px;
+    bottom: 10px; /* Adjusted for better aesthetics */
+    left: 0;
+    right: 0;
     pointer-events: none;
     width: 100%;
-    
+    display: flex;
+    flex-direction: column;
+    align-items: center;
 }
 
 .carousel-controls {
     display: flex;
     justify-content: center;
-    padding: 0 10px;
+    margin-bottom: 8px; /* Space between controls and indicators */
 }
 
 .control-button {
-    background-color: #f0f0f0;
+    background-color: rgba(240, 240, 240, 0.8); /* Semi-transparent */
     border: 1px solid #555;
-    padding: 8px 12px;
+    padding: 6px 10px; /* Slightly smaller */
     margin: 0 5px;
     cursor: pointer;
-    font-size: 1.2rem;
+    font-size: 1rem;
     border-radius: 4px;
     pointer-events: auto;
+    transition: background-color 0.2s;
+}
+.control-button:hover:not(:disabled) {
+    background-color: rgba(220, 220, 220, 0.9);
 }
 
 .control-button:disabled {
-    opacity: 0.5;
+    opacity: 0.4;
     cursor: not-allowed;
 }
 
 .carousel-indicators {
     display: flex;
     justify-content: center;
-    margin-top: 10px;
-}
-
-
-@media screen and (max-width: 768px) {
-
-}
-
-@media screen and (max-width: 600px) {
-    .carousel-indicators {
-        overflow: hidden;
-    }
-
-    .data-type-label {
-        font-size: .5rem;
-    }
-    
+    pointer-events: auto; /* Allow clicks on indicators */
 }
 
 .indicator-button {
-    background-color: #ddd;
-    border: 1px solid black;
-    width: 10px;
-    height: 10px;
+    background-color: rgba(221, 221, 221, 0.7); /* Semi-transparent */
+    border: 1px solid #555;
+    width: 8px; /* Slightly smaller */
+    height: 8px;
     border-radius: 50%;
-    margin: 0 5px;
+    margin: 0 4px;
     cursor: pointer;
+    padding: 0;
+    transition: background-color 0.2s;
+}
+.indicator-button:hover:not(.active) {
+    background-color: rgba(180, 180, 180, 0.8);
 }
 
 .indicator-button.active {
     background-color: #555;
 }
+
+/* No specific media queries needed here for slide counts as JS handles it,
+   but you can add them for styling adjustments if necessary. */
+@media screen and (max-width: 600px) {
+    .data-type-label {
+        font-size: .7rem;
+        padding: 2px 4px;
+        top: 5px;
+        left: 5px;
+    }
+    .control-button {
+        padding: 4px 8px;
+        font-size: 0.9rem;
+    }
+     .indicator-button {
+        width: 7px;
+        height: 7px;
+    }
+}
 </style>
\ No newline at end of file
diff --git a/resources/js/Components/LanguageSelector.vue b/resources/js/Components/LanguageSelector.vue
new file mode 100644
index 0000000..d792c40
--- /dev/null
+++ b/resources/js/Components/LanguageSelector.vue
@@ -0,0 +1,31 @@
+<template>
+    <div class="flex flex-wrap justify-center gap-2 p-2">
+      <button
+        v-for="code in Object.keys(languageButtonLabels)"
+        :key="code"
+        @click="handleLanguageToggle(code)"
+        class="px-4 py-2 rounded-md shadow-sm transition-colors duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
+        :class="{
+          'bg-blue-600 text-white hover:bg-blue-700': currentLanguageCodes.includes(code),
+          'bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300': !currentLanguageCodes.includes(code),
+        }"
+      >
+        {{ currentLanguageCodes.includes(code) ? languageButtonLabels[code].deselect : languageButtonLabels[code].select }}
+      </button>
+    </div>
+  </template>
+  
+  <script setup>
+  import { defineProps, defineEmits } from 'vue';
+  
+  const props = defineProps({
+    languageButtonLabels: Object,
+    currentLanguageCodes: Array,
+  });
+  
+  const emit = defineEmits(['language-code-selected']);
+  
+  const handleLanguageToggle = (code) => {
+    emit('language-code-selected', code);
+  };
+  </script>
\ No newline at end of file
diff --git a/resources/js/Components/MapDisplay.vue b/resources/js/Components/MapDisplay.vue
new file mode 100644
index 0000000..3c11cff
--- /dev/null
+++ b/resources/js/Components/MapDisplay.vue
@@ -0,0 +1,792 @@
+<template>
+    <div class="boston-map" :class="{ 'map-loading': mapIsLoading }">
+      <div id="map" class="h-full"></div>
+    </div>
+  </template>
+  
+  <script setup>
+  import { ref, onMounted, onBeforeUnmount, watch, nextTick, markRaw, defineProps, defineEmits, defineExpose } from 'vue';
+  import 'leaflet/dist/leaflet.css';
+  import * as L from 'leaflet';
+  import 'leaflet.markercluster/dist/MarkerCluster.css';
+  import 'leaflet.markercluster/dist/MarkerCluster.Default.css';
+  import 'leaflet.markercluster';
+  
+  const props = defineProps({
+    mapCenterCoordinates: Array,
+    dataPointsToDisplay: Array,
+    isCenterSelectionModeActive: Boolean,
+    tempNewMarkerPlacementCoords: Object, 
+    mapIsLoading: Boolean,
+    shouldClearTempMarker: Boolean,
+  });
+  
+  const emit = defineEmits([
+    'map-coordinates-selected-for-new-center',
+    'marker-data-point-clicked',
+    'map-initialized-internal',
+  ]);
+  
+  const initialMap = ref(null);
+  const markerCenter = ref(null);
+  const newMarker = ref(null); 
+  const markerClusterGroups = ref({}); // Changed from markers = ref([])
+  
+  // currentMapViewport will store the map's view (center/zoom).
+  // On first load, it uses props.mapCenterCoordinates or a default.
+  // On destroy, it's updated with the map's actual current view.
+  // On re-init, this saved view is used to restore the map's position.
+  const currentMapViewport = ref({ 
+    center: props.mapCenterCoordinates && props.mapCenterCoordinates.length === 2 ? props.mapCenterCoordinates : [42.3601, -71.0589], 
+    zoom: 16 
+  });
+  
+  
+  const getDivIconInternal = (dataPoint) => {
+    let className = 'default-div-icon';
+    let type = dataPoint.alcivartech_type;
+    let backgroundImage = '';
+  
+    switch (type) {
+      case 'Crime':
+        className = 'crime-div-icon';
+        break;
+      case '311 Case':
+        className = 'case-div-icon';
+        break;
+      case 'Building Permit':
+        className = 'permit-div-icon';
+        break;
+      case 'Property Violation':
+        className = 'property-violation-div-icon';
+        break;
+      case 'Construction Off Hour':
+        className = 'construction-off-hour-div-icon';
+        break;
+      case 'Food Inspection': // Add this case
+        className = 'food-inspection-div-icon';
+        break;
+      default:
+        break;
+    }
+  
+    if (type === "311 Case") {
+      if (dataPoint?.submitted_photo) {
+        const photoURL = dataPoint.submitted_photo.split(' | ')[0];
+        className += ' submitted-photo';
+        backgroundImage = `background-image: url(${photoURL});`;
+      }
+      if (dataPoint?.closed_photo) {
+        const photoURL = dataPoint.closed_photo.split(' | ')[0];
+        className += ' closed-photo';
+        backgroundImage = `background-image: url(${photoURL});`;
+      }
+      if (!dataPoint?.submitted_photo && !dataPoint?.closed_photo) {
+        className += ' no-photo';
+      }
+    }
+    className += ' id'+ dataPoint?.data_point_id;
+    return L.divIcon({
+      className,
+      html: `<div style="${backgroundImage}"></div>`,
+      iconSize: null,  // Icon size will be controlled by CSS (--icon-size)
+      popupAnchor: [0, -15], // Adjusted for typical icon bottom center pointing up
+    });
+  };
+  
+  const getCenterIconInternal = (type) => { // 'type' can differentiate icons if needed, e.g. 'Center', 'NewCenter'
+    let className = 'center-div-icon';
+    if (type === 'NewCenter') {
+      className = 'new-center-div-icon'; // Example if you want a different style for temp new marker
+    }
+    return L.divIcon({
+      className,
+      html: `<div></div>`, // Simple div, styling via CSS
+      iconSize: null, // Controlled by CSS
+      popupAnchor: [0, -15], // Adjust as needed
+    });
+  };
+
+  const getClusterRadius = (zoom) => {
+    if (zoom < 10) {
+      return 80; 
+    } else if (zoom < 13) {
+      return 60;
+    } else if (zoom < 16) {
+      return 40;
+    } else {
+      return 10; 
+    }
+  };
+
+  const createTypedIconCreateFunction = (type) => {
+    return function(cluster) {
+      const childCount = cluster.getChildCount();
+      let classNames = 'marker-cluster';
+  
+      const typeClass = (type === 'Unknown' || !type) 
+                        ? 'mixed' 
+                        : type.toLowerCase().replace(/\s+/g, '-').replace(/[()]/g, ''); // Sanitize type for CSS class
+      classNames += ` cluster-${typeClass}`;
+  
+      if (childCount < 10) {
+        classNames += ' marker-cluster-small';
+      } else if (childCount < 100) {
+        classNames += ' marker-cluster-medium';
+      } else {
+        classNames += ' marker-cluster-large';
+      }
+  
+      return L.divIcon({
+        html: `<div><span>${childCount}</span></div>`,
+        className: classNames,
+        iconSize: L.point(40, 40) // Standard size for these cluster icons
+      });
+    };
+  };
+  
+
+  // Helper function to generate an HTMLElement for an individual data point's popup
+    // onBackToClusterCallback is kept for signature consistency but will be null with leaflet.markercluster
+    const createIndividualItemPopupElement = (dataPoint, onBackToClusterCallback = null) => {
+      const container = document.createElement('div');
+      container.className = 'custom-popup-content individual-item-popup';
+      // Basic styling for the content wrapper, can be enhanced with CSS classes
+      container.style.maxHeight = '350px'; // Increased max height for potentially longer food violation history
+      container.style.overflowY = 'auto';
+      container.style.paddingRight = '10px'; // Space for scrollbar if needed
+  
+      const dateString = new Date(dataPoint.alcivartech_date).toLocaleString();
+      let detailsHtml = `<div style="margin-bottom: 5px;"><strong>${dateString}</strong></div>`;
+    
+      switch (dataPoint.alcivartech_type) {
+        case 'Crime':
+          detailsHtml += `<div>Type: Crime</div><div>Description: ${dataPoint.offense_description || 'N/A'}</div>`;
+          if (dataPoint.incident_number) {
+            detailsHtml += `<div>Incident Number: ${dataPoint.incident_number}</div>`;
+          }
+          break;
+        case '311 Case':
+          detailsHtml += `<div>Type: 311 Case</div><div>Title: ${dataPoint.case_title || 'N/A'}</div>`;
+          if (dataPoint.case_enquiry_id) {
+            detailsHtml += `<div>Case ID: ${dataPoint.case_enquiry_id}</div>`;
+          }
+          break;
+        case 'Building Permit':
+          detailsHtml += `<div>Type: Building Permit</div><div>Description: ${dataPoint.description || 'N/A'}</div>`;
+          if (dataPoint.permitnumber) {
+            detailsHtml += `<div>Permit Number: ${dataPoint.permitnumber}</div>`;
+          }
+          if (dataPoint.permit_type) {
+            detailsHtml += `<div>Permit Type: ${dataPoint.permit_type}</div>`;
+          }
+          break;
+        case 'Property Violation':
+          detailsHtml += `<div>Type: Property Violation</div><div>Description: ${dataPoint.description || 'N/A'}</div>`;
+          if (dataPoint.ticket_number) {
+            detailsHtml += `<div>Ticket Number: ${dataPoint.ticket_number}</div>`;
+          }
+          if (dataPoint.violation_type) {
+            detailsHtml += `<div>Violation Type: ${dataPoint.violation_type}</div>`;
+          }
+          break;
+        case 'Construction Off Hour':
+          detailsHtml += `<div>Type: Construction (Off Hour)</div><div>Address: ${dataPoint.address || 'N/A'}</div>`;
+          if (dataPoint.app_no) {
+            detailsHtml += `<div>Application Number: ${dataPoint.app_no}</div>`;
+          }
+          break;
+        // ...existing code...
+        case 'Food Inspection':
+          console.log('Food Inspection: DataPoint:', JSON.parse(JSON.stringify(dataPoint)));
+          if (dataPoint.violation_summary) { // This is an aggregated point
+            console.log('Food Inspection: Aggregated point detected. Violation summary exists.');
+            let initialDetailsHtml = `<div style="margin-bottom: 5px;"><strong>${new Date(dataPoint.alcivartech_date).toLocaleString()}</strong> (Most Recent Activity)</div>`;
+            initialDetailsHtml += `<div>Type: Food Establishment Record</div>`;
+            if (dataPoint.businessname) {
+              initialDetailsHtml += `<div style="font-size: 1.1em; margin-bottom: 3px;"><strong>Business: ${dataPoint.businessname}</strong></div>`;
+            }
+            if (dataPoint.licenseno) {
+              initialDetailsHtml += `<div>License: ${dataPoint.licenseno}</div>`;
+            }
+            if (dataPoint.address) {
+              initialDetailsHtml += `<div>Address: ${dataPoint.address}</div>`;
+            }
+            container.innerHTML = initialDetailsHtml;
+            console.log('Food Inspection: Initial details HTML set:', initialDetailsHtml);
+  
+            const historyTitle = document.createElement('div');
+            historyTitle.style.marginTop = '10px';
+            historyTitle.style.marginBottom = '5px';
+            const totalRecords = dataPoint.violation_summary.reduce((sum, s) => sum + s.entries.length, 0);
+            historyTitle.innerHTML = `<strong>Violation History (${totalRecords} total records):</strong>`;
+            container.appendChild(historyTitle);
+            console.log('Food Inspection: History title appended. Total records:', totalRecords);
+  
+            const historyContainer = document.createElement('div');
+            historyContainer.style.paddingRight = '5px';
+            console.log('Food Inspection: History container created.');
+  
+  
+            dataPoint.violation_summary.forEach((summaryItem, summaryIndex) => {
+              console.log(`Food Inspection: Processing summaryItem ${summaryIndex + 1}/${dataPoint.violation_summary.length}:`, JSON.parse(JSON.stringify(summaryItem)));
+              const violDescEl = document.createElement('div');
+              violDescEl.style.marginTop = '8px';
+              violDescEl.style.paddingLeft = '5px';
+              // set the violdesc color red or green based on the most recent status
+              const statusColor = summaryItem.entries[0].viol_status === 'Fail' || (summaryItem.entries[0].result && summaryItem.entries[0].result.toLowerCase().includes('fail')) ? '#D32F2F' : '#388E3C';
+              violDescEl.innerHTML = `<strong style="color: ${statusColor};">${summaryItem.violdesc}</strong> (${summaryItem.entries.length} record(s))`;
+              historyContainer.appendChild(violDescEl);
+              console.log(`Food Inspection: Violation description element for "${summaryItem.violdesc}" appended.`);
+  
+              const entriesList = document.createElement('ul');
+              entriesList.style.listStylePosition = 'inside';
+              entriesList.style.paddingLeft = '10px';
+              entriesList.style.marginLeft = '0px';
+              console.log(`Food Inspection: Entries list UL created for "${summaryItem.violdesc}".`);
+  
+  
+              summaryItem.entries.forEach((entry, entryIndex) => {
+                console.log(`Food Inspection: Processing entry ${entryIndex + 1}/${summaryItem.entries.length} for "${summaryItem.violdesc}":`, JSON.parse(JSON.stringify(entry)));
+                const entryItem = document.createElement('li');
+                entryItem.style.fontSize = '0.9em';
+                entryItem.style.marginBottom = '6px';
+                entryItem.style.borderBottom = '1px dashed #eee';
+                entryItem.style.paddingBottom = '4px';
+                
+                let entryHtml = `<div style="font-weight: bold;"><em>${new Date(entry.alcivartech_date).toLocaleString()}</em></div>`;
+                const statusColor = entry.viol_status === 'Fail' || (entry.result && entry.result.toLowerCase().includes('fail')) ? 'red' : 'green';
+                entryHtml += `<div>Status: <span style="font-weight:bold; color: ${statusColor};">${entry.viol_status || 'N/A'}</span> | Result: ${entry.result || 'N/A'} | Level: ${entry.viol_level || 'N/A'}</div>`;
+                if (entry.comments) {
+                  // if passed, note that the comments are from a previous failed inspection and were addressed in order to pass
+                  if (entry.viol_status === 'Pass' || (entry.result && entry.result.toLowerCase().includes('pass'))) {
+                    entryHtml += `<div style="font-style: italic; color: #222; margin-top: 2px;">Comments addressed from previous failed inspection: ${entry.comments}</div>`;
+                  }
+                  else if (entry.viol_status === 'Fail' || (entry.result && entry.result.toLowerCase().includes('fail'))) {
+                    entryHtml += `<div style="font-style: italic; color: #222; margin-top: 2px;">Comments: ${entry.comments}</div>`;
+                  } else {
+                    entryHtml += `<div style="font-style: italic; color: #222; margin-top: 2px;">Comments: ${entry.comments}</div>`;
+                  }
+                 
+                }
+                entryItem.innerHTML = entryHtml;
+                entriesList.appendChild(entryItem);
+                console.log(`Food Inspection: Entry list item LI appended for date "${entry.alcivartech_date}". HTML:`, entryHtml);
+              });
+  
+              if (entriesList.lastChild) {
+                  (entriesList.lastChild).style.borderBottom = 'none';
+                  console.log(`Food Inspection: Removed border from last entry item in list for "${summaryItem.violdesc}".`);
+              } else {
+                  console.log(`Food Inspection: No entries found for "${summaryItem.violdesc}", so no border to remove.`);
+              }
+              historyContainer.appendChild(entriesList);
+              console.log(`Food Inspection: Entries list UL for "${summaryItem.violdesc}" appended to history container.`);
+            });
+            container.appendChild(historyContainer);
+            console.log('Food Inspection: History container appended to main container.');
+            
+            // If this block handles the content, add back button (if needed) and return.
+            if (onBackToClusterCallback) { // This button will likely not show as callback will be null
+              const backButton = document.createElement('button');
+              backButton.textContent = '‹ Back to Cluster List';
+              backButton.className = 'popup-back-button';
+              backButton.style.marginTop = '10px';
+              backButton.style.padding = '5px 10px';
+              backButton.style.cursor = 'pointer';
+              backButton.style.border = '1px solid #ccc';
+              backButton.style.backgroundColor = '#f9f9f9';
+              backButton.style.borderRadius = '3px';
+              backButton.onclick = (e) => {
+                  e.stopPropagation();
+                  onBackToClusterCallback();
+              };
+              container.appendChild(backButton);
+              console.log('Food Inspection: Back button appended.');
+            }
+            return container; // Return early as container is fully built
+  
+          } else {
+            // Fallback for non-aggregated: build up detailsHtml
+            console.log('Food Inspection: Non-aggregated point (violation_summary is missing). Displaying individual details.');
+            detailsHtml += `<div>Type: Food Inspection (Individual)</div>`;
+            if (dataPoint.businessname) {
+              detailsHtml += `<div>Business: ${dataPoint.businessname}</div>`;
+            }
+            if (dataPoint.violdesc) {
+              detailsHtml += `<div>Violation: ${dataPoint.violdesc}</div>`;
+            }
+            if (dataPoint.licenseno) {
+              detailsHtml += `<div>License: ${dataPoint.licenseno}</div>`;
+            }
+            if (dataPoint.result) {
+              detailsHtml += `<div>Result: ${dataPoint.result}</div>`;
+            }
+            console.log('Food Inspection: Individual details HTML to be set (from outer scope):', detailsHtml);
+          }
+          break;
+        // ...existing code...
+        default:
+          detailsHtml += 'No details available.';
+      }
+      
+      // This line will now only execute if the 'Food Inspection' with summary didn't return early.
+      container.innerHTML = detailsHtml;
+    
+      if (onBackToClusterCallback) { // This button will likely not show
+        const backButton = document.createElement('button');
+        backButton.textContent = '‹ Back to Cluster List';
+        backButton.className = 'popup-back-button'; // For styling
+        // Basic styling for the back button
+        backButton.style.marginTop = '10px';
+        backButton.style.padding = '5px 10px';
+        backButton.style.cursor = 'pointer';
+        backButton.style.border = '1px solid #ccc';
+        backButton.style.backgroundColor = '#f9f9f9';
+        backButton.style.borderRadius = '3px';
+        
+        backButton.onclick = (e) => {
+            e.stopPropagation(); // Prevent map click or other underlying events
+            onBackToClusterCallback();
+        };
+        container.appendChild(backButton);
+      }
+      return container;
+    };
+  // ...existing code...
+  
+  const initializeMapInternal = (centerArgFromParent = null, viewCenter = false) => {
+    nextTick(() => {
+      // Guard against re-initializing an already active map.
+      // This ensures this function only runs when initialMap.value is null.
+      if (initialMap.value) {
+        console.warn("MapDisplay: initializeMapInternal called while map instance already exists. Aborting.");
+        return;
+      }
+  
+      // Determine the map view settings (center and zoom) for setView.
+      // Always use currentMapViewport.value. This holds:
+      // 1. On first load: The initial center/zoom (derived from props.mapCenterCoordinates or defaults).
+      // 2. On re-initialization (after destroyMapInternal): The map's actual center/zoom from before it was destroyed.
+      // This ensures the map view is restored to its previous state if re-initialized.
+      if (centerArgFromParent && viewCenter) {
+        currentMapViewport.value.center = centerArgFromParent;
+      } 
+      const viewToSet = currentMapViewport.value.center;
+      const zoomToSet = currentMapViewport.value.zoom;
+      
+      
+      // The `centerArgFromParent` (if provided via initializeNewMapAtCenter(coords)) is deliberately NOT used for setView here.
+      // This is key to preventing the map from re-centering to a new "logical center"
+      // when the map instance is being re-created.
+  
+      initialMap.value = markRaw(L.map('map').setView(viewToSet, zoomToSet));
+      
+      L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
+        maxZoom: 19,
+        attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
+      }).addTo(initialMap.value);
+  
+      if (!initialMap.value) {
+        console.error('MapDisplay: Map initialization failed.');
+        return;
+      }
+      
+      const updateZoomVariables = () => {
+        if (!initialMap.value) return;
+        
+        initialMap.value.invalidateSize(); // Ensure map size is correct, especially after container resizes
+        const zoom = initialMap.value.getZoom();
+        
+        const minSize = 2; 
+        const maxSize = 50; 
+        const minZoom = initialMap.value.getMinZoom() || 10; // Use map's minZoom or fallback
+        const maxZoom = initialMap.value.getMaxZoom() || 19; // Use map's maxZoom or fallback
+        
+        let newSize;
+        if (zoom <= minZoom) {
+          newSize = minSize;
+        } else if (zoom >= maxZoom) {
+          newSize = maxSize;
+        } else {
+          // Avoid division by zero if minZoom equals maxZoom (edge case)
+          newSize = (maxZoom - minZoom > 0) 
+            ? minSize + (maxSize - minSize) * (zoom - minZoom) / (maxZoom - minZoom)
+            : minSize;
+        }
+        document.documentElement.style.setProperty('--icon-size', `${newSize}px`);
+      };
+  
+      initialMap.value.on('zoomend', updateZoomVariables);
+      initialMap.value.on('resize', () => { // Handle map container resize
+          if(initialMap.value) {
+              initialMap.value.invalidateSize(); // Essential after resize
+              updateZoomVariables(); // Re-calculate icon sizes if needed
+          }
+      });
+      updateZoomVariables(); // Call once to set initial icon size
+  
+      initialMap.value.on('click', (e) => {
+        if (props.isCenterSelectionModeActive) {
+          emit('map-coordinates-selected-for-new-center', e.latlng);
+        }
+      });
+      
+      // Place the 'center' marker. This should always reflect the *logical* center,
+      // which is props.mapCenterCoordinates.
+      if (props.mapCenterCoordinates && props.mapCenterCoordinates.length === 2) {
+          markerCenter.value = markRaw(
+            L.marker(props.mapCenterCoordinates, {
+                icon: getCenterIconInternal('Center'),
+            })
+          ).addTo(initialMap.value);
+      }
+  
+      emit('map-initialized-internal');
+  
+      if (props.dataPointsToDisplay) {
+        updateMarkersInternal(props.dataPointsToDisplay);
+      }
+      
+      if (props.tempNewMarkerPlacementCoords && newMarker.value == null) {
+          newMarker.value = markRaw(
+              L.marker([props.tempNewMarkerPlacementCoords.lat, props.tempNewMarkerPlacementCoords.lng], {
+                icon: getCenterIconInternal('NewCenter'),
+              })
+          ).addTo(initialMap.value);
+      }
+    });
+  };
+  
+  const destroyMapInternal = () => {
+    if (initialMap.value) {
+      // Save the current map's view before destroying it
+      currentMapViewport.value = {
+        center: initialMap.value.getCenter(),
+        zoom: initialMap.value.getZoom(),
+      };
+      initialMap.value.off(); // Remove all event listeners
+      initialMap.value.remove(); // Remove the map
+      initialMap.value = null;
+      
+      // Clear marker cluster groups
+      Object.values(markerClusterGroups.value).forEach(group => {
+        group.clearLayers(); // Clear markers from the group
+        // Note: Leaflet documentation implies map.removeLayer(group) should be enough,
+        // but explicit clearLayers is safer. The group itself is removed if map is destroyed.
+      });
+      markerClusterGroups.value = {};
+
+      if (markerCenter.value) {
+        markerCenter.value.remove();
+        markerCenter.value = null;
+      }
+      if (newMarker.value) {
+        newMarker.value.remove();
+        newMarker.value = null;
+      }
+    }
+  };
+  
+  const updateMarkersInternal = (dataPoints) => {
+    if (!initialMap.value) return;
+  
+    // Clear layers from all existing cluster groups
+    Object.values(markerClusterGroups.value).forEach(group => {
+      group.clearLayers();
+    });
+    // activeMarkersMap.value.clear(); // If using an activeMarkersMap
+  
+    if (!dataPoints || dataPoints.length === 0) {
+      return;
+    }
+  
+    dataPoints.forEach(dataPoint => {
+      if (!dataPoint.latitude || !dataPoint.longitude) {
+        console.warn('Skipping data point due to invalid coordinates:', dataPoint);
+        return;
+      }
+  
+      const lat = parseFloat(dataPoint.latitude);
+      const long = parseFloat(dataPoint.longitude);
+      const alcivartechType = dataPoint.alcivartech_type || 'Unknown'; // Default to 'Unknown'
+  
+      if (isNaN(lat) || isNaN(long)) {
+        console.warn('Skipping data point due to invalid parsed coordinates:', dataPoint);
+        return;
+      }
+  
+      // Ensure a cluster group exists for this type
+      if (!markerClusterGroups.value[alcivartechType]) {
+        const newClusterGroup = markRaw(L.markerClusterGroup({
+          maxClusterRadius: getClusterRadius, // Function to determine radius by zoom
+          iconCreateFunction: createTypedIconCreateFunction(alcivartechType), // Function to create cluster icons
+          // Other leaflet.markercluster options can be set here:
+          // e.g., spiderfyOnMaxZoom: true, showCoverageOnHover: false, zoomToBoundsOnClick: true,
+        }));
+        initialMap.value.addLayer(newClusterGroup);
+        markerClusterGroups.value[alcivartechType] = newClusterGroup;
+      }
+  
+      const marker = markRaw(
+        L.marker([lat, long], {
+          icon: getDivIconInternal(dataPoint), // Use existing divIcon for individual markers
+        })
+      );
+      
+      // Bind popup using the existing complex popup generator
+      // The onBackToClusterCallback is null because leaflet.markercluster handles cluster interaction.
+      const individualPopupElement = createIndividualItemPopupElement(dataPoint, null); 
+      marker.bindPopup(individualPopupElement, { minWidth: 220 });
+  
+      marker.on('click', (e) => {
+        // Popup opens automatically. Emit event for parent component.
+        emit('marker-data-point-clicked', dataPoint);
+        // L.DomEvent.stopPropagation(e); // May not be needed, test behavior
+      });
+      
+      markerClusterGroups.value[alcivartechType].addLayer(marker);
+    });
+  };
+  
+  
+  // This watcher handles changes to the logical center coordinates when the map is *live*.
+  // It updates the marker's position without moving the map view.
+  watch(() => props.mapCenterCoordinates, (newVal, oldVal) => {
+    if (initialMap.value && newVal && newVal.length === 2) {
+      // Map is initialized and new coordinates are valid
+      if (markerCenter.value) {
+        markerCenter.value.setLatLng(newVal);
+      } else {
+        // Create center marker if it doesn't exist
+        markerCenter.value = markRaw(L.marker(newVal, {
+          icon: getCenterIconInternal('Center'),
+        })).addTo(initialMap.value);
+      }
+    } else if (initialMap.value && !newVal && markerCenter.value) {
+      // If new coordinates are null/invalid, remove the marker
+      initialMap.value.removeLayer(markerCenter.value);
+      markerCenter.value = null;
+    }
+  }, { deep: true });
+
+  // Watch for changes in data points to display and update markers
+  // This is useful if data points can be updated without a full map re-initialization
+  watch(() => props.dataPointsToDisplay, (newDataPoints) => {
+    if (initialMap.value && newDataPoints) {
+      updateMarkersInternal(newDataPoints);
+    }
+  }, { deep: true });
+  
+  
+  watch(() => props.tempNewMarkerPlacementCoords, (newCoords) => {
+      if (initialMap.value) {
+          if (newMarker.value) {
+              initialMap.value.removeLayer(newMarker.value);
+              newMarker.value = null;
+          }
+          if (newCoords) {
+              newMarker.value = markRaw(
+                  L.marker([newCoords.lat, newCoords.lng], {
+                  icon: getCenterIconInternal('NewCenter'),
+                  })
+              ).addTo(initialMap.value);
+          }
+      }
+  });
+  
+  watch(() => props.shouldClearTempMarker, (clear) => {
+      if (clear && newMarker.value && initialMap.value) {
+          initialMap.value.removeLayer(newMarker.value);
+          newMarker.value = null;
+          // Consider emitting an event or resetting the prop in parent if needed:
+          // emit('temp-marker-cleared'); 
+      }
+  });
+  
+  onMounted(() => {
+    // Initialize currentMapViewport based on initial props before map creation
+    currentMapViewport.value = {
+        center: props.mapCenterCoordinates && props.mapCenterCoordinates.length === 2 ? props.mapCenterCoordinates : [42.3601, -71.0589],
+        zoom: 16 // Or derive from a prop if zoom can be set initially
+    };
+    initializeMapInternal();
+  });
+  
+  onBeforeUnmount(() => {
+    destroyMapInternal();
+  });
+  
+  const getAllMarkersFromClusterGroups = () => {
+    let allMarkers = [];
+    Object.values(markerClusterGroups.value).forEach(group => {
+      allMarkers = allMarkers.concat(group.getLayers());
+    });
+    return allMarkers;
+  };
+
+  defineExpose({
+    destroyMapAndClear: destroyMapInternal,
+    initializeNewMapAtCenter: initializeMapInternal, // Parent can call this with new logical center
+    getMapInstance: () => initialMap.value,
+    getMarkers: getAllMarkersFromClusterGroups, // Adapted to get markers from cluster groups
+  });
+  
+  </script>
+  
+  <style scoped>
+  #map {
+    height: 100%;
+    width: 100%; /* Ensure map takes full width of its container */
+    background-color: #f0f0f0; /* Placeholder background while tiles load */
+  }
+  .boston-map {
+    height: auto; /* Or specific height like 500px, 70vh etc. */
+    overflow: hidden; /* Good practice */
+    position: relative; /* If you have overlays or absolutely positioned children */
+  }
+  .map-loading {
+     filter: blur(2px); 
+     /* transition: filter 0.3s ease-out; Optional: smooth blur transition */
+  }
+  
+  /* Responsive adjustments */
+  @media (min-width: 768px) {
+    /* .boston-map height might be controlled by parent layout */
+  }
+  @media (max-width: 768px) {
+    .boston-map {
+      height: 70vh; /* Example: Taller on mobile */
+    }
+  }
+
+  /* CSS for custom cluster icons */
+  :deep(.custom-cluster-div-icon div) {
+    width: var(--icon-size, 30px); /* Use CSS variable from updateZoomVariables, fallback to 30px */
+    height: var(--icon-size, 30px);
+    background-color: rgba(0, 0, 0, 0.7);
+    border-radius: 50%;
+    color: white;
+    font-weight: bold;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    text-align: center;
+    font-size: calc(var(--icon-size, 30px) * 0.45); /* Adjust font size relative to icon size */
+    border: 2px solid rgba(255, 255, 255, 0.7);
+    box-shadow: 0 0 3px rgba(0,0,0,0.6);
+    cursor: pointer;
+  }
+
+  /* Styles for custom popup content elements */
+  :deep(.custom-popup-content) {
+    font-family: Arial, sans-serif;
+    font-size: 13px;
+    line-height: 1.5;
+  }
+
+  :deep(.custom-popup-content strong) {
+    font-weight: bold;
+  }
+
+  :deep(.cluster-list-popup ul) {
+    margin-top: 5px;
+    padding-left: 0; /* Reset Leaflet's default ul padding if any */
+    list-style-type: none;
+  }
+
+  :deep(.cluster-list-popup li) {
+    padding: 5px 2px;
+    cursor: pointer;
+    border-bottom: 1px solid #eee;
+  }
+  :deep(.cluster-list-popup li:last-child) {
+    border-bottom: none;
+  }
+  :deep(.cluster-list-popup li:hover) {
+    background-color: #f5f5f5;
+  }
+
+  :deep(.individual-item-popup div) {
+    margin-bottom: 3px;
+  }
+  
+  :deep(.popup-back-button) {
+    margin-top: 12px;
+    padding: 6px 10px;
+    font-size: 12px;
+    color: #333;
+    background-color: #f0f0f0;
+    border: 1px solid #ccc;
+    border-radius: 4px;
+    cursor: pointer;
+    display: inline-block; /* Or block if you want it full width */
+  }
+  :deep(.popup-back-button:hover) {
+    background-color: #e0e0e0;
+    border-color: #bbb;
+  }
+
+  /* Styles for leaflet.markercluster icons (adapted from DataMapDisplay.vue) */
+  :deep(.marker-cluster) {
+    background-clip: padding-box;
+    border-radius: 20px;
+    display: flex;
+    justify-content: center;
+    align-items: center;
+    font-weight: bold;
+  }
+  :deep(.marker-cluster div) {
+    width: 30px;
+    height: 30px;
+    margin-left: 0; /* Reset from default leaflet.markercluster if any */
+    margin-top: 0;  /* Reset from default leaflet.markercluster if any */
+    text-align: center;
+    border-radius: 15px;
+    font: 12px "Helvetica Neue", Arial, Helvetica, sans-serif;
+    display: flex;
+    justify-content: center;
+    align-items: center;
+  }
+  :deep(.marker-cluster span) {
+    line-height: 30px; /* Or adjust to vertically center based on div height */
+  }
+
+  /* Default cluster size-based colors */
+  :deep(.marker-cluster-small) { background-color: rgba(181, 226, 140, 0.7); }
+  :deep(.marker-cluster-small div) { background-color: rgba(110, 204, 57, 0.8); color: white; }
+  :deep(.marker-cluster-medium) { background-color: rgba(241, 211, 87, 0.7); }
+  :deep(.marker-cluster-medium div) { background-color: rgba(240, 194, 12, 0.8); color: #333; }
+  :deep(.marker-cluster-large) { background-color: rgba(253, 156, 115, 0.7); }
+  :deep(.marker-cluster-large div) { background-color: rgba(241, 128, 23, 0.8); color: white; }
+
+  /* Type-specific cluster colors */
+  /* Crime: base rgb(252, 127, 127) from original app.css */
+  :deep(.cluster-crime) { background-color: rgba(252, 127, 127, 0.5) !important; }
+  :deep(.cluster-crime div) { background-color: rgba(222, 97, 97, 0.85) !important; color: white; }
+
+  /* 311 Case: base rgb(59, 130, 246) */
+  :deep(.cluster-311-case) { background-color: rgba(59, 130, 246, 0.5) !important; }
+  :deep(.cluster-311-case div) { background-color: rgba(29, 100, 216, 0.85) !important; color: white; }
+
+  /* Building Permit: base rgb(138, 231, 138) */
+  :deep(.cluster-building-permit) { background-color: rgba(138, 231, 138, 0.5) !important; }
+  :deep(.cluster-building-permit div) { background-color: rgba(108, 201, 108, 0.85) !important; color: #333; }
+
+  /* Property Violation: base rgb(255, 255, 0) */
+  :deep(.cluster-property-violation) { background-color: rgba(255, 255, 0, 0.5) !important; }
+  :deep(.cluster-property-violation div) { background-color: rgba(225, 225, 0, 0.85) !important; color: #333; }
+
+  /* Construction Off Hour: base rgb(114, 203, 209) */
+  :deep(.cluster-construction-off-hour) { background-color: rgba(114, 203, 209, 0.5) !important; }
+  :deep(.cluster-construction-off-hour div) { background-color: rgba(84, 173, 179, 0.85) !important; color: white; }
+
+  /* Food Inspection: base rgb(255, 165, 0) */
+  :deep(.cluster-food-inspection) { background-color: rgba(255, 165, 0, 0.5) !important; }
+  :deep(.cluster-food-inspection div) { background-color: rgba(225, 135, 0, 0.85) !important; color: white; }
+  
+  /* Fallback for 'Unknown' or mixed types */
+  :deep(.cluster-mixed) { background-color: rgba(169, 169, 169, 0.5) !important; }
+  :deep(.cluster-mixed div) { background-color: rgba(128, 128, 128, 0.85) !important; color: white; }
+  
+  </style>
\ No newline at end of file
diff --git a/resources/js/Components/MapFiltersControl.vue b/resources/js/Components/MapFiltersControl.vue
new file mode 100644
index 0000000..e1f01bb
--- /dev/null
+++ b/resources/js/Components/MapFiltersControl.vue
@@ -0,0 +1,231 @@
+<template>
+    <div class="map-controls bg-gray-50 p-3 shadow-lg rounded-lg max-h-[70vh] overflow-y-auto">
+      <!-- Filter Type Buttons -->
+      <div class="filter-type-container mb-4">
+        <h3 class="text-sm font-semibold text-gray-700 mb-2">{{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse]?.filterByTypeTitle || 'Filter by Type' }}</h3>
+        <div class="flex flex-row flex-wrap gap-2">
+          <button
+            v-for="(isActive, type) in internalFiltersState"
+            :key="type"
+            @click="handleToggleFilter(type)"
+            :class="[
+              'filter-button',
+              isActive ? 'active' : 'inactive',
+              `${type.toLowerCase().replace(/\s/g, '-').replace(/\d/g, 'a')}-filter-button`
+            ]"
+            class="flex-grow basis-1/3 md:basis-1/4 lg:basis-auto p-2 rounded-md text-xs font-medium transition-all duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-opacity-50"
+            :title="getDataTypeTranslationLabel(type)"
+          >
+            <span class="filter-button-icon"></span> <!-- Icon will be via CSS -->
+            <span class="filter-button-text break-all hidden lg:inline ml-1">{{ getDataTypeTranslationLabel(type) }}</span>
+          </button>
+        </div>
+      </div>
+  
+      <!-- Date Filter Section -->
+      <div class="date-filter-container">
+        <h3 class="text-sm font-semibold text-gray-700 mb-2">{{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse]?.filterByDateTitle || 'Filter by Date' }}</h3>
+        <button
+          @click="handleClearDateSelections"
+          class="w-full px-3 py-2 mb-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-xs font-semibold shadow"
+        >
+          {{ translations.localizationLabelsByLanguageCode[singleLanguageCodeToUse]?.allDatesButton || 'Show All Dates' }}
+        </button>
+        <div class="date-buttons-scroll-container overflow-y-auto space-y-1 pr-1">
+          <button
+            v-for="(date, index) in availableDates"
+            :key="index"
+            @click="handleToggleDateSelection(date)"
+            :class="{
+              'bg-indigo-500 text-white shadow-md': internalSelectedDates.includes(date),
+              'bg-gray-200 text-gray-700 hover:bg-gray-300': !internalSelectedDates.includes(date),
+            }"
+            class="w-full px-3 py-2 rounded-md transition-colors text-xs text-left"
+          >
+            {{ displayLocalDateFromUtcString(date, singleLanguageCodeToUse, { weekday: 'short', month: 'short', day: 'numeric' }) }}
+          </button>
+        </div>
+      </div>
+    </div>
+  </template>
+  
+  <script setup>
+  import { ref, computed, watch, defineProps, defineEmits, onMounted } from 'vue';
+  
+  const props = defineProps({
+    initialFilterTypeState: Object,
+    initialSelectedDates: Array,
+    minDateForFilter: String,
+    maxDateForFilter: String,
+    translations: Object,
+    singleLanguageCode: String,
+  });
+  
+  const emit = defineEmits(['filters-updated']);
+  
+  const internalFiltersState = ref({});
+  const internalSelectedDates = ref([]);
+  
+  const singleLanguageCodeToUse = computed(() => props.singleLanguageCode || 'en-US');
+  
+  onMounted(() => {
+    internalFiltersState.value = { ...props.initialFilterTypeState };
+    internalSelectedDates.value = [...props.initialSelectedDates];
+  });
+  
+  watch(() => props.initialFilterTypeState, (newVal) => {
+    internalFiltersState.value = { ...newVal };
+  }, { deep: true });
+  
+  watch(() => props.initialSelectedDates, (newVal) => {
+    internalSelectedDates.value = [...newVal];
+  }, { deep: true });
+  
+  
+  const availableDates = computed(() => {
+    if (!props.minDateForFilter || !props.maxDateForFilter) return [];
+    const dates = [];
+    const currentDate = new Date(props.minDateForFilter);
+    const endDate = new Date(props.maxDateForFilter);
+    while (currentDate <= endDate) {
+      dates.push(new Date(currentDate).toISOString().split('T')[0]);
+      currentDate.setDate(currentDate.getDate()+1);
+    }
+    //sort the dates in descending order
+    dates.sort((a, b) => new Date(b) - new Date(a));
+    return dates;
+  });
+  
+  const filterWidthClass = computed(() => {
+    const count = Object.keys(internalFiltersState.value).length;
+    // Adjusted for flex-wrap, this might not be strictly needed if buttons have intrinsic sizing
+    if (count > 4) return 'sm:w-1/3 md:w-1/4'; // Example: 3 or 4 per row on larger screens
+    if (count > 2) return 'sm:w-1/2 md:w-1/3';
+    return 'w-full sm:w-1/2';
+  });
+  
+  const getDataTypeTranslationLabel = (type) => {
+    return props.translations?.dataTypeMapByLanguageCode?.[singleLanguageCodeToUse.value]?.[type] || type;
+  };
+
+  const displayLocalDateFromUtcString = (utcDateString, locale, options) => {
+    if (!utcDateString) return '';
+    // Assuming utcDateString is in "YYYY-MM-DD" format
+    const parts = utcDateString.split('-');
+    if (parts.length !== 3) {
+      console.warn('Invalid date string format for displayLocalDateFromUtcString:', utcDateString);
+      return utcDateString; // Return original string or handle error appropriately
+    }
+  
+    const year = parseInt(parts[0], 10);
+    const month = parseInt(parts[1], 10) - 1; // JavaScript months are 0-indexed
+    const day = parseInt(parts[2], 10);
+  
+    if (isNaN(year) || isNaN(month) || isNaN(day)) {
+      console.warn('Invalid date components after parsing for displayLocalDateFromUtcString:', utcDateString);
+      return utcDateString; // Return original string or handle error appropriately
+    }
+  
+    // Create a Date object that represents midnight in the local timezone for that YYYY-MM-DD
+    const localDate = new Date(year, month, day);
+    
+    return localDate.toLocaleDateString(locale, options);
+  };
+  
+  const handleToggleFilter = (type) => {
+    internalFiltersState.value[type] = !internalFiltersState.value[type];
+    emitFiltersUpdate();
+  };
+  
+  const handleToggleDateSelection = (date) => {
+    const index = internalSelectedDates.value.indexOf(date);
+    if (index > -1) {
+      internalSelectedDates.value.splice(index, 1);
+    } else {
+      internalSelectedDates.value.push(date);
+    }
+    emitFiltersUpdate();
+  };
+  
+  const handleClearDateSelections = () => {
+    internalSelectedDates.value = [];
+    emitFiltersUpdate();
+  };
+  
+  const emitFiltersUpdate = () => {
+    emit('filters-updated', {
+      activeTypes: { ...internalFiltersState.value },
+      selectedDates: [...internalSelectedDates.value ],
+    });
+  };
+  
+  watch([internalFiltersState, internalSelectedDates], () => {
+      // This watcher is primarily for internal consistency if needed,
+      // major updates are emitted.
+  }, {deep: true});
+  
+  </script>
+  
+  <style scoped>
+  .map-controls {
+    width: 20%; /* Full width on small screens */
+    display: flex;
+    flex-direction: column;
+  }
+  
+  .filter-button {
+    min-height: 50px; /* Ensures buttons are tall enough */
+    min-width: 50px; /* Ensures buttons are wide enough */
+    display: flex;
+    align-items: center;
+    justify-content: center; /* Center icon when text is hidden */
+    border: 1px solid transparent;
+  }
+  
+  .filter-button.active {
+    border-color: #4A5568; /* Darker border for active */
+    box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
+  }
+  
+  .filter-button.inactive {
+    background-color: #E2E8F0; /* bg-gray-300 */
+    color: #4A5568; /* text-gray-700 */
+  }
+  .filter-button.inactive:hover {
+    background-color: #CBD5E0; /* bg-gray-400 */
+  }
+  
+  .filter-button-icon {
+    background-size: contain;
+    background-repeat: no-repeat;
+    background-position: center;
+    display: inline-block;
+  }
+  
+  .date-buttons-scroll-container::-webkit-scrollbar {
+    width: 6px;
+  }
+  .date-buttons-scroll-container::-webkit-scrollbar-thumb {
+    background-color: #A0AEC0; /* bg-gray-500 */
+    border-radius: 3px;
+  }
+  .date-buttons-scroll-container::-webkit-scrollbar-track {
+    background-color: #EDF2F7; /* bg-gray-200 */
+  }
+  
+  /* Responsive adjustments for map-controls width */
+  @media (min-width: 768px) { /* md breakpoint */
+    .map-controls {
+      max-width: 20%;
+    }
+  }
+  @media (min-width: 1024px) { /* lg breakpoint */
+    .map-controls {
+      max-width: 20%
+    }
+    .filter-button-text {
+      font-size: 0.7rem; /* Smaller text on larger screens for filter buttons */
+    }
+  }
+  
+  </style>
\ No newline at end of file
diff --git a/resources/js/Components/MapToolbar.vue b/resources/js/Components/MapToolbar.vue
new file mode 100644
index 0000000..2c5642d
--- /dev/null
+++ b/resources/js/Components/MapToolbar.vue
@@ -0,0 +1,81 @@
+<template>
+  <div class="p-2 mb-4">
+    <div class="flex flex-wrap items-center justify-start gap-2">
+      <span class="font-semibold text-gray-700 mr-2 text-sm">VIEW:</span>
+      <Link
+        :href="route('data-map.combined')"
+        class="px-4 py-2 rounded-md shadow-sm transition-colors duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
+        :class="{
+          'bg-blue-600 text-white hover:bg-blue-700': route().current('data-map.combined'),
+          'bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300': !route().current('data-map.combined')
+        }"
+      >
+      <!-- make a span for every dataType to show all the icons -->
+          <span class="toolbar-icon-display crime-div-icon"></span>
+          <span class="toolbar-icon-display case-div-icon no-photo"></span>
+          <span class="toolbar-icon-display property-violation-div-icon"></span>
+          <span class="toolbar-icon-display building-permit-div-icon"></span>
+          <span class="toolbar-icon-display food-inspection-div-icon"></span>
+          <span class="toolbar-icon-display construction-off-hour-div-icon"></span>
+
+        All Datasets
+      </Link>
+      <Link
+        v-for="mapType in mapTypes"
+        :key="mapType.dataType"
+        :href="route('data-map.index', { dataType: mapType.dataType })"
+        class="px-4 py-2 rounded-md shadow-sm transition-colors duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
+        :class="{
+          'bg-indigo-600 text-white hover:bg-indigo-700': isActive(mapType.dataType),
+          'bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-300': !isActive(mapType.dataType)
+        }"
+      >
+      <span :class="getIconClassForDataType(mapType.dataType)" class="toolbar-icon-display"></span>
+        {{ mapType.name }}
+      </Link>
+    </div>
+  </div>
+</template>
+
+<script setup>
+import { Link, usePage } from '@inertiajs/vue3';
+import { ref } from 'vue';
+
+const page = usePage();
+
+// These would ideally be passed as props or fetched,
+// matching the keys in DataMapController's $modelMapping
+// For now, keeping them static as in the previous version.
+// Consider populating this from page.props if available, e.g., from allDataTypeDetails on combined map.
+const mapTypes = ref([
+  { name: 'Crime Reports', dataType: 'crime' },
+  { name: '311 Cases', dataType: '311_cases' },
+  { name: 'Property Violations', dataType: 'property_violations' },
+  { name: 'Building Permits', dataType: 'building_permits' },
+  { name: 'Food Inspections', dataType: 'food_inspections' },
+  { name: 'Construction Off Hours', dataType: 'construction_off_hours' },
+  // Add other map types here
+]);
+
+const isActive = (dataType) => {
+  // Check if the current route is 'data-map.index' and the dataType prop matches
+  return route().current('data-map.index') && page.props.dataType === dataType;
+};
+
+const getIconClassForDataType = (dataType) => {
+  if (!dataType) return '';
+  const dtLower = dataType.toLowerCase();
+  if (dtLower.includes('crime')) return 'crime-div-icon';
+  if (dtLower.includes('case') || dtLower.includes('311')) return 'case-div-icon no-photo'; // Example for 311/cases
+  if (dtLower.includes('permit')) return 'permit-div-icon'; // Or 'building-permit-div-icon' if that's the class
+  if (dtLower.includes('property_violation') || dtLower.includes('violation')) return 'property-violation-div-icon';
+  if (dtLower.includes('construction_off_hour') || dtLower.includes('construction')) return 'construction-off-hour-div-icon';
+  if (dtLower.includes('food_inspection') || dtLower.includes('food') || dtLower.includes('inspection')) return 'food-inspection-div-icon';
+  // Add more mappings as needed based on your dataTypes and CSS classes
+  return ''; // Return empty string or a default icon class if no match
+};
+</script>
+
+<style scoped>
+/* Scoped styles can be added here if further customization beyond Tailwind is needed */
+</style>
diff --git a/resources/js/Components/Metrics/BarChartCard.vue b/resources/js/Components/Metrics/BarChartCard.vue
new file mode 100644
index 0000000..05903f1
--- /dev/null
+++ b/resources/js/Components/Metrics/BarChartCard.vue
@@ -0,0 +1,57 @@
+<template>
+    <div class="bg-white p-3 sm:p-4 rounded-lg shadow">
+        <h5 class="text-base sm:text-md font-semibold text-gray-700 mb-2 sm:mb-3 text-center sm:text-left">{{ title }}</h5>
+        <div v-if="chartData && chartData.labels && chartData.labels.length > 0" class="chart-container relative h-64 sm:h-72 md:h-80">
+            <Bar :data="chartData" :options="chartOptions" /> 
+        </div>
+        <div v-else class="text-center py-10">
+            <p class="text-gray-500">No data available for this chart.</p>
+        </div>
+    </div>
+</template>
+
+<script setup>
+ import { Bar } from 'vue-chartjs';
+ import { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';
+ ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);
+
+defineProps({
+    title: String,
+    chartData: Object,
+});
+
+ const chartOptions = {
+     responsive: true,
+     maintainAspectRatio: false, // Set to false to allow custom height via CSS on parent
+     plugins: { // Moved legend to plugins
+        legend: {
+            display: true, // Keep legend if desired, or set to false
+            position: 'top',
+        },
+        tooltip: {
+            mode: 'index',
+            intersect: false,
+        },
+     },
+    scales: {
+        x: {
+            grid: {
+                display: false, // Hide x-axis grid lines for a cleaner look
+            }
+        },
+        y: {
+            grid: {
+                borderDash: [2, 4], // Dashed y-axis grid lines
+            },
+            beginAtZero: true
+        }
+    }
+ };
+</script>
+
+<style scoped>
+.chart-container {
+  /* Ensure the container itself can be sized, maintainAspectRatio:false on chart helps */
+  /* Height is set via Tailwind classes in the template for responsiveness */
+}
+</style>
diff --git a/resources/js/Components/Metrics/ListCard.vue b/resources/js/Components/Metrics/ListCard.vue
new file mode 100644
index 0000000..e1212e2
--- /dev/null
+++ b/resources/js/Components/Metrics/ListCard.vue
@@ -0,0 +1,27 @@
+<template>
+    <div class="bg-white p-3 sm:p-4 rounded-lg shadow">
+        <h5 class="text-base sm:text-md font-semibold text-gray-700 mb-2 sm:mb-3 text-center sm:text-left">{{ title }}</h5>
+        <ul v-if="items && items.length > 0" class="space-y-2">
+            <li v-for="(item, index) in items" :key="index" 
+                class="flex flex-col sm:flex-row justify-between sm:items-center text-sm p-2 sm:p-3 bg-gray-50 hover:bg-gray-100 rounded transition-colors duration-150">
+                <div class="flex-grow mb-1 sm:mb-0 sm:mr-2 overflow-hidden">
+                    <span class="font-medium text-gray-800 block truncate" :title="item.primary + (item.secondary ? ' (' + item.secondary + ')' : '')">
+                        {{ item.primary }}
+                        <span v-if="item.secondary" class="text-gray-600 text-xs sm:text-sm">({{ item.secondary }})</span>
+                    </span>
+                </div>
+                <span class="font-semibold text-blue-600 flex-shrink-0">{{ item.value }}</span>
+            </li>
+        </ul>
+        <div v-else class="text-center py-5">
+            <p class="text-gray-500">No items to display.</p>
+        </div>
+    </div>
+</template>
+
+<script setup>
+defineProps({
+    title: String,
+    items: Array, // Expected format: [{ primary: '', secondary: '', value: '' }]
+});
+</script>
diff --git a/resources/js/Components/Metrics/MetricCard.vue b/resources/js/Components/Metrics/MetricCard.vue
new file mode 100644
index 0000000..ed66383
--- /dev/null
+++ b/resources/js/Components/Metrics/MetricCard.vue
@@ -0,0 +1,36 @@
+<template>
+    <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-4 sm:p-5 rounded-lg shadow-md flex items-center space-x-3 sm:space-x-4">
+        <div v-if="icon" class="p-2 sm:p-3 bg-blue-500 text-white rounded-full flex-shrink-0">
+            <span class="text-lg sm:text-xl">{{ getIconChar(icon) }}</span>
+        </div>
+        <div class="overflow-hidden">
+            <h4 class="text-xs sm:text-sm font-medium text-gray-500 uppercase tracking-wider truncate">{{ title }}</h4>
+            <p class="text-xl sm:text-2xl font-bold text-gray-800 truncate">{{ value }}</p>
+        </div>
+    </div>
+</template>
+
+<script setup>
+defineProps({
+    title: String,
+    value: [String, Number],
+    icon: String, // e.g., 'database', 'calendar-alt'
+});
+
+// Basic icon character mapping. For real icons, integrate an icon library.
+const getIconChar = (iconName) => {
+    const icons = {
+        'database': '🗃️',
+        'calendar-alt': '📅',
+        'calendar-check': '🗓️',
+        'calendar-day': '📆',
+        'calendar-week': '📅',
+        'calendar': '🗓',
+        'crosshairs': '🎯',
+        'hourglass-half': '⏳',
+        'dollar-sign': '$',
+        // Add more as needed
+    };
+    return icons[iconName] || '⭐';
+};
+</script>
diff --git a/resources/js/Components/OffHours.vue b/resources/js/Components/OffHours.vue
index a49fc21..9167fe2 100644
--- a/resources/js/Components/OffHours.vue
+++ b/resources/js/Components/OffHours.vue
@@ -1,5 +1,5 @@
 <template>
-  <div v-if="data" class="p-4 bg-gray-100 h-full">
+  <div v-if="data" class="p-4 bg-gray-100">
     <h2 class="text-xl font-bold text-gray-800">
       {{ LabelsByLanguageCode[getSingleLanguageCode].constructionOffHourTitle }}
     </h2>
diff --git a/resources/js/Components/OneImageCarousel.vue b/resources/js/Components/OneImageCarousel.vue
index 7c40768..a49dadc 100644
--- a/resources/js/Components/OneImageCarousel.vue
+++ b/resources/js/Components/OneImageCarousel.vue
@@ -1,72 +1,55 @@
 <template>
-    <div class="carousel-container" v-if="hasImages">
-        <div class="carousel-wrapper" ref="carouselWrapper">
-            <div
-                v-for="(data, index) in filteredDataPoints"
-                :key="index"
-                :class="{ 'carousel-slide': true, 'active': currentIndex === index }"
-                @click="openModal(data)"
-            >
-                <div class="carousel-slide-inner">
-                    <img
-                        v-if="data.info.closed_photo"
-                        :src="data.info.closed_photo"
-                        alt="Data Point Image"
-                        class="carousel-image"
-                    />
-                    <img
-                        v-else-if="data.info.submitted_photo"
-                        :src="data.info.submitted_photo"
-                        alt="Data Point Image"
-                        class="carousel-image"
-                    />
-                    <div class="data-type-label">
-                        {{ data.info.type }}
-                    </div>
-                </div>
-            </div>
+  <div class="carousel-container" v-if="hasImages">
+    <div class="carousel-wrapper" ref="carouselWrapper">
+      <div
+        v-for="(data, index) in filteredDataPoints"
+        :key="index"
+        :class="{ 'carousel-slide': true, 'active': currentIndex === index }"
+        @click="openModal(data)"
+      >
+        <div class="carousel-slide-inner">
+          <img
+            :src="getPhotoUrl(data)"
+            alt="Data Point Image"
+            class="carousel-image"
+          />
+          <div class="data-type-label">
+            {{ data.info.type }}
+          </div>
         </div>
-        <div class="carousel-decoration" v-if="filteredDataPoints.length > 1">
-            <div class="carousel-controls">
-                <button @click="prevSlide" :disabled="currentIndex === 0" class="control-button prev-button">
-                    <
-                </button>
-                <button @click="nextSlide" :disabled="isLastSlide" class="control-button next-button">
-                    >
-                </button>
-            </div>
-
-            <div class="carousel-indicators">
-                <button
-                    v-for="(data, index) in filteredDataPoints"
-                    :key="index"
-                    @click="goToSlide(index)"
-                    :class="{ 'indicator-button': true, 'active': currentIndex === index }"
-                ></button>
-            </div>
-        </div>
-
-         <!-- Modal Component -->
-        <Modal :show="modalOpen" @close="closeModal" maxWidth="xl">
-            <div v-if="modalData" class="flex justify-center">
-                <img
-                    v-if="modalData.info.closed_photo"
-                    :src="modalData.info.closed_photo"
-                    alt="Full Image"
-                    class="modal-image"
-                />
-                <img
-                    v-else-if="modalData.info.submitted_photo"
-                    :src="modalData.info.submitted_photo"
-                    alt="Full Image"
-                    class="modal-image"
-                />
-            </div>
-        </Modal>
+      </div>
     </div>
-    <div v-else class="no-image-container">
-        No Images Available
+    <div class="carousel-decoration" v-if="filteredDataPoints.length > 1">
+      <div class="carousel-controls">
+        <button @click="prevSlide" :disabled="currentIndex === 0" class="control-button prev-button">
+          &lt;
+        </button>
+        <button @click="nextSlide" :disabled="isLastSlide" class="control-button next-button">
+          &gt;
+        </button>
+      </div>
+      <div class="carousel-indicators">
+        <button
+          v-for="(data, index) in filteredDataPoints"
+          :key="index"
+          @click="goToSlide(index)"
+          :class="{ 'indicator-button': true, 'active': currentIndex === index }"
+        ></button>
+      </div>
     </div>
+    <Modal :show="modalOpen" @close="closeModal" maxWidth="xl">
+      <div v-if="modalData" class="flex justify-center">
+        <img
+          :src="getPhotoUrl(modalData)"
+          alt="Full Image"
+          class="modal-image"
+        />
+      </div>
+    </Modal>
+  </div>
+  <div v-else class="no-image-container">
+    No Images Available
+  </div>
 </template>
 
 <script setup>
@@ -74,10 +57,7 @@ import { ref, computed, watch } from 'vue';
 import Modal from './Modal.vue';
 
 const props = defineProps({
-    dataPoints: {
-        type: Array,
-        default: () => [],
-    },
+  dataPoints: { type: Array, default: () => [] }
 });
 
 const carouselWrapper = ref(null);
@@ -85,71 +65,49 @@ const currentIndex = ref(0);
 const modalOpen = ref(false);
 const modalData = ref(null);
 
-
-
 const emit = defineEmits(['on-image-click']);
 
-const hasImage = (data) => {
-    return data.info?.closed_photo || data.info?.submitted_photo;
-};
-
-const onImageClick = (data) => {
-    emit('on-image-click', data);
-};
+// Helper to get a photo URL from a photo object.
+// This looks for a generic "photo" property; if absent, tries closed_photo/submitted_photo.
+function getPhotoUrl(data) {
+  return data.info?.photo || data.info?.closed_photo || data.info?.submitted_photo || '';
+}
 
 const filteredDataPoints = computed(() => {
-    return props.dataPoints.filter((data) => hasImage(data));
-});
-
-const hasImages = computed(() => {
-    return filteredDataPoints.value.length > 0;
+  return props.dataPoints.filter(data => getPhotoUrl(data));
 });
 
-const isLastSlide = computed(() => {
-    return currentIndex.value === filteredDataPoints.value.length -1;
-});
+const hasImages = computed(() => filteredDataPoints.value.length > 0);
 
-const prevSlide = () => {
-    if (currentIndex.value > 0) {
-        currentIndex.value--;
-    }
-};
+const isLastSlide = computed(() => currentIndex.value === filteredDataPoints.value.length - 1);
 
-const nextSlide = () => {
-    if (!isLastSlide.value) {
-         currentIndex.value++;
-    }
-};
+const prevSlide = () => { if (currentIndex.value > 0) currentIndex.value--; };
+const nextSlide = () => { if (!isLastSlide.value) currentIndex.value++; };
+const goToSlide = (index) => { currentIndex.value = index; };
 
-const goToSlide = (index) => {
-    currentIndex.value = index;
-};
 const openModal = (data) => {
-    modalOpen.value = true;
-    modalData.value = data
-}
+  modalOpen.value = true;
+  modalData.value = data;
+  emit('on-image-click', data);
+};
 const closeModal = () => {
-    modalOpen.value = false;
-    modalData.value = null;
-}
-watch(
-    () => currentIndex.value,
-    () => {
-         if (carouselWrapper.value) {
-            carouselWrapper.value.scrollTo({
-                left: carouselWrapper.value.offsetWidth * currentIndex.value,
-                behavior: 'smooth',
-           });
-      }
-    }
-);
+  modalOpen.value = false;
+  modalData.value = null;
+};
 
+watch(() => currentIndex.value, () => {
+  if (carouselWrapper.value) {
+    carouselWrapper.value.scrollTo({
+      left: carouselWrapper.value.offsetWidth * currentIndex.value,
+      behavior: 'smooth',
+    });
+  }
+});
 </script>
 
 <style scoped>
 .carousel-container {
     position: relative;
-    width: 100%;
     overflow: hidden;
     display: flex;
     flex-direction: column; /* Ensure content stays within container */
@@ -194,7 +152,7 @@ watch(
 
 .carousel-image {
     max-width: 100%;
-    max-height: 100%;
+    max-height: 50vh;
     object-fit: contain;
     border-radius: 8px;
 }
diff --git a/resources/js/Components/PageTemplate.vue b/resources/js/Components/PageTemplate.vue
index a1aaa73..fa36f68 100644
--- a/resources/js/Components/PageTemplate.vue
+++ b/resources/js/Components/PageTemplate.vue
@@ -17,19 +17,36 @@
                         <NavLink :href="route('map.index')" :active="route().current('map.index')">
                             Home
                         </NavLink>
-                        <NavLink :href="route('crime-map')" :active="route().current('crime-map')">
-                            Boston Crime Map
+                        <NavLink :href="route('data-map.combined')" :active="route().current('data-map.combined')">
+                            Full Data Map
                         </NavLink>
-                        <NavLink :href="route('cases.indexnofilter')" :active="route().current('cases.indexnofilter') || route().current('scatter')">
-                            Boston 311 Case Map
+                        <NavLink v-if="isAuthenticated" :href="route('reports.index')" :active="route().current('reports.index') || route().current('reports.show')">
+                            Report History
                         </NavLink>
                         <NavLink :href="route('subscription.index')" :active="route().current('subscription.index')">
                             Subscription
                         </NavLink>
+                        <NavLink :href="route('data.metrics')" :active="route().current('data.metrics')">
+                            Data Metrics
+                        </NavLink>
                     </div>
                 </div>
 
                 <div class="hidden sm:flex sm:items-center sm:ml-6">
+                    <!-- Subscription Status -->
+                    <div class="mr-4">
+                        <span class="text-sm font-medium px-2.5 py-0.5 rounded-full"
+                              :class="{
+                                  'bg-gray-100 text-gray-800': currentPlanName === 'Guest',
+                                  'bg-blue-100 text-blue-800': currentPlanName === 'Registered User',
+                                  'bg-green-100 text-green-800': currentPlanName === 'Resident Awareness',
+                                  'bg-purple-100 text-purple-800': currentPlanName === 'Pro Insights',
+                                  'bg-yellow-100 text-yellow-800': !['Guest', 'Registered User', 'Resident Awareness', 'Pro Insights'].includes(currentPlanName) && isAuthenticated
+                              }">
+                            {{ currentPlanName }}
+                        </span>
+                    </div>
+
                     <!-- Authenticated User Dropdown -->
                     <div v-if="isAuthenticated" class="ml-3 relative">
                         <Dropdown align="right" width="48">
@@ -39,6 +56,10 @@
                                         type="button"
                                         class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150"
                                     >
+                                        <img v-if="avatarUrl" :src="avatarUrl" alt="User Avatar" class="h-8 w-8 rounded-full mr-2 -ml-1">
+                                        <span v-else-if="userName" class="inline-flex items-center justify-center h-8 w-8 rounded-full bg-gray-200 text-gray-600 text-xs font-semibold mr-2 -ml-1">
+                                            {{ userName.substring(0, 2).toUpperCase() }}
+                                        </span>
                                         {{ userName }}
                                         <svg class="ml-2 -mr-0.5 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                             <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
@@ -53,7 +74,12 @@
                         </Dropdown>
                     </div>
                     <!-- Guest User Links -->
-                    <div v-else class="ml-3 relative">
+                    <div v-else class="flex items-center ml-3 relative">
+                        <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + route('map.index')"
+                           class="p-2 mr-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full focus:outline-none focus:bg-gray-100"
+                           title="Login or Register with Google">
+                            <img class="h-5 w-5" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+                        </a>
                         <Dropdown align="right" width="48">
                             <template #trigger>
                                 <span class="inline-flex rounded-md">
@@ -92,18 +118,40 @@
         <div :class="{ block: showingNavigationDropdown, hidden: !showingNavigationDropdown }" class="sm:hidden">
             <div class="pt-2 pb-3 space-y-1">
                 <ResponsiveNavLink :href="route('map.index')" :active="route().current('map.index')"> Home </ResponsiveNavLink>
-                <ResponsiveNavLink :href="route('crime-map')" :active="route().current('crime-map')"> Boston Crime Map </ResponsiveNavLink>
-                <ResponsiveNavLink :href="route('cases.indexnofilter')" :active="route().current('cases.indexnofilter') || route().current('scatter')"> Boston 311 Case Map </ResponsiveNavLink>
+                <ResponsiveNavLink :href="route('data-map.combined')" :active="route().current('data-map.combined')"> Full Data Map </ResponsiveNavLink>
+                <ResponsiveNavLink v-if="isAuthenticated" :href="route('reports.index')" :active="route().current('reports.index') || route().current('reports.show')"> Report History </ResponsiveNavLink>
                 <ResponsiveNavLink :href="route('subscription.index')" :active="route().current('subscription.index')"> Subscription </ResponsiveNavLink>
+                <ResponsiveNavLink :href="route('data.metrics')" :active="route().current('data.metrics')"> Data Metrics </ResponsiveNavLink>
             </div>
 
             <!-- Responsive Settings Options -->
             <div class="pt-4 pb-1 border-t border-gray-200">
-                <div v-if="isAuthenticated" class="px-4">
-                    <div class="font-medium text-base text-gray-800">{{ userName }}</div>
-                    <div v-if="userEmail" class="font-medium text-sm text-gray-500">{{ userEmail }}</div>
+                <div class="px-4">
+                    <div class="font-medium text-base text-gray-800">
+                        <span class="text-xs font-medium px-2 py-0.5 rounded-full mr-2"
+                              :class="{
+                                  'bg-gray-100 text-gray-800': currentPlanName === 'Guest',
+                                  'bg-blue-100 text-blue-800': currentPlanName === 'Registered User',
+                                  'bg-green-100 text-green-800': currentPlanName === 'Resident Awareness',
+                                  'bg-purple-100 text-purple-800': currentPlanName === 'Pro Insights',
+                                  'bg-yellow-100 text-yellow-800': !['Guest', 'Registered User', 'Resident Awareness', 'Pro Insights'].includes(currentPlanName) && isAuthenticated
+                              }">
+                            {{ currentPlanName }}
+                        </span>
+                    </div>
+                    <div v-if="isAuthenticated" class="mt-1">
+                        <div class="font-medium text-base text-gray-800 flex items-center">
+                            <img v-if="avatarUrl" :src="avatarUrl" alt="User Avatar" class="h-8 w-8 rounded-full mr-2">
+                             <span v-else-if="userName" class="inline-flex items-center justify-center h-8 w-8 rounded-full bg-gray-200 text-gray-600 text-xs font-semibold mr-2">
+                                {{ userName.substring(0, 2).toUpperCase() }}
+                            </span>
+                            {{ userName }}
+                        </div>
+                        <div v-if="userEmail" class="font-medium text-sm text-gray-500">{{ userEmail }}</div>
+                    </div>
                 </div>
 
+
                 <div class="mt-3 space-y-1">
                     <template v-if="isAuthenticated">
                         <ResponsiveNavLink :href="route('profile.edit')"> Profile </ResponsiveNavLink>
@@ -112,6 +160,10 @@
                     <template v-else>
                         <ResponsiveNavLink :href="route('login')" :active="route().current('login')"> Login </ResponsiveNavLink>
                         <ResponsiveNavLink :href="route('register')" :active="route().current('register')"> Register </ResponsiveNavLink>
+                         <ResponsiveNavLink :href="route('socialite.redirect', 'google')">
+                            <img class="h-4 w-4 inline mr-1" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+                            Login with Google
+                        </ResponsiveNavLink>
                     </template>
                 </div>
             </div>
@@ -128,7 +180,8 @@
         </div>
     </nav> <!-- End of nav -->
 
-    <main class="flex-grow">
+    <main class="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8">
+      <DataVisibilityBanner /> 
       <slot></slot>
     </main>
 
@@ -138,7 +191,7 @@
 </template>
 
 <script setup>
-import { ref } from 'vue';
+import { ref, computed } from 'vue'; // Added computed
 import ApplicationLogo from '@/Components/ApplicationLogo.vue';
 import Dropdown from '@/Components/Dropdown.vue';
 import DropdownLink from '@/Components/DropdownLink.vue';
@@ -147,22 +200,27 @@ import ResponsiveNavLink from '@/Components/ResponsiveNavLink.vue';
 import { Link, router, usePage } from '@inertiajs/vue3'; 
 import axios from 'axios';
 import Footer from '@/Components/Footer.vue'; // Import the new Footer component
+import DataVisibilityBanner from '@/Components/DataVisibilityBanner.vue'; // Import the new banner
 
 const $page = usePage();
 
-const isAuthenticated = $page.props.auth.user !== null;
-const userName = $page.props.auth.user ? $page.props.auth.user.name : '';
-const userEmail = $page.props.auth.user ? $page.props.auth.user.email : '';
+// Use computed properties to safely access potentially nested props
+const isAuthenticated = computed(() => !!$page.props.auth?.user);
+const userName = computed(() => $page.props.auth?.user?.name || '');
+const userEmail = computed(() => $page.props.auth?.user?.email || '');
+const avatarUrl = computed(() => $page.props.auth?.user?.avatar_url || null);
+const currentPlanName = computed(() => $page.props.auth?.currentPlan?.name || 'Guest');
 
 const showingNavigationDropdown = ref(false);
 
 async function logoutUser() {
   try {
       await axios.post(route('logout'));
-      window.location = '/'; // Or router.visit('/', { replace: true })
   } catch (error) {
       console.error("Logout failed:", error);
       // Handle logout error, e.g., show a notification
+  } finally {
+      window.location = '/'; // Or router.visit('/', { replace: true })
   }
 }
 </script>
diff --git a/resources/js/Components/PropertyViolation.vue b/resources/js/Components/PropertyViolation.vue
index 6f74550..cd388f1 100644
--- a/resources/js/Components/PropertyViolation.vue
+++ b/resources/js/Components/PropertyViolation.vue
@@ -1,5 +1,5 @@
 <template>
-    <div v-if="data" class="p-4 bg-gray-100 h-full">
+    <div v-if="data" class="p-4 bg-gray-100">
       <h2 class="text-xl font-bold text-gray-800">
         {{ LabelsByLanguageCode[getSingleLanguageCode].propertyViolationTitle }}
       </h2>
diff --git a/resources/js/Components/SaveLocation.vue b/resources/js/Components/SaveLocation.vue
index 753a6f3..e393f13 100644
--- a/resources/js/Components/SaveLocation.vue
+++ b/resources/js/Components/SaveLocation.vue
@@ -1,176 +1,233 @@
 <template>
-  <div class="w-full my-2 text-center px-3 py-2 border border-gray-300 save-location">
+<div class="p-4 border rounded-lg shadow hover:shadow-lg transition-shadow bg-white">
+<button
+    class="text-sm font-medium text-white bg-slate-700 hover:bg-slate-800 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:ring-offset-2 py-2 px-4 rounded-md shadow-md flex items-center justify-center cursor-pointer transition-colors duration-150 ease-in-out w-full md:m-auto md:w-1/3
+    md:text-lg"
+    @click="toggleExpanded"
+  >
+  <!-- add icon depending on if expanded-->
+    <span :class="isExpanded ? 'rotate-0' : '-rotate-90'" class="inline-block transition-transform duration-300">
+      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
+        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
+      </svg>
+    </span>
+
+    <span class="ml-2">
+      {{ translations.localizationLabelsByLanguageCode[getSingleLanguageCode].savedLocationsTitle || 'Manage Saved Locations' }}
+    </span>
+  </button>
+</div>
+    <!-- Toggle Button, arrow points right when collapsed and down when expanded -->
+
+
+  <div class="w-full my-2 p-4 bg-white shadow-lg rounded-lg save-location"
+        :class="{
+          'hidden': !isExpanded,
+          'block': isExpanded,
+        }"
+        >
+
+
     <!-- Tab Navigation -->
-    <div class="flex justify-center border-b border-gray-300">
+    <div class="flex border-b border-gray-200">
       <!-- Current Location Tab -->
       <button
         @click="setActiveTab('current')"
-        :class="{ 'tab-button': true, 'active': activeTab === 'current' }"
+        :class="['px-4 py-3 text-sm font-medium leading-5 focus:outline-none transition-colors duration-150 ease-in-out', activeTab === 'current' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:border-b-2']"
       >
-        {{ LabelsByLanguageCode[getSingleLanguageCode].currentLocation }}
+        {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].currentLocation }}
       </button>
 
       <!-- Saved Locations Tabs -->
       <template v-if="userLocations.length">
         <button
-          v-for="(savedLocation, index) in userLocations"
+          v-for="(savedLocation) in userLocations"
           :key="savedLocation.id"
           @click="setActiveTab(savedLocation.id)"
-          :class="{ 'tab-button': true, 'active': activeTab === savedLocation.id }"
+          :class="['px-4 py-3 text-sm font-medium leading-5 focus:outline-none transition-colors duration-150 ease-in-out', activeTab === savedLocation.id ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:border-b-2']"
         >
           {{ capitalize(savedLocation.name) }}
         </button>
       </template>
     </div>
 
-    <!-- Tab Content: Current Location -->
-    <div v-if="activeTab === 'current'" class="mb-6 w-full current-location p-3">
-      <h4 class="text-lg font-medium text-gray-700 mb-2">
-        {{ LabelsByLanguageCode[getSingleLanguageCode].currentLocation }}
-      </h4>
-
-      <div class="flex flex-wrap justify-center items-center gap-2">
-        <span class="text-gray-600">Lat: {{ location.latitude }}</span>
-        <span class="text-gray-600">Lng: {{ location.longitude }}</span>
-        <span v-if="location.address" class="text-gray-600">
-          {{ LabelsByLanguageCode[getSingleLanguageCode].address }}: {{ location.address }}
-        </span>
-      </div>
-
-
-      <div class="mt-4 flex flex-wrap justify-center items-center gap-2">
-        <select
-          id="location-report"
-          v-model="location.report"
-          class="px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2 pr-8"
-        >
-          <option value="off">{{ LabelsByLanguageCode[getSingleLanguageCode].off }}</option>
-          <option value="daily">{{ LabelsByLanguageCode[getSingleLanguageCode].daily }}</option>
-          <option value="weekly">{{ LabelsByLanguageCode[getSingleLanguageCode].weekly }}</option>
-        </select>
-        <select
-          id="location-name"
-          v-model="selectedName"
-          class="px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2 pr-8"
-        >
-          <option value="home">{{ LabelsByLanguageCode[getSingleLanguageCode].home }}</option>
-          <option value="work">{{ LabelsByLanguageCode[getSingleLanguageCode].work }}</option>
-          <option value="other">{{ LabelsByLanguageCode[getSingleLanguageCode].other }}</option>
-        </select>
-        <!-- language input, a free text field -->
-        <input
-          type="text"
-          v-model="location.language"
-          class="px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm
-          pl-2 pr-8"
-          placeholder="Language"
-        />
-        <button
-          @click="saveLocation"
-          class="px-4 py-2 text-white shadow-sm transition-colors bg-green-500 hover:bg-green-600"
-        >
-          {{
-             LabelsByLanguageCode[getSingleLanguageCode].saveLocation
-          }}
-        </button>
-        <span v-if="maxLocationsReached" class="text-red-500">
-          {{ LabelsByLanguageCode[getSingleLanguageCode].maxLocationsReached }}
-        </span>
-      </div>
-    </div>
-
-    <!-- Tab Content: Individual Saved Locations -->
-    <template v-else-if="userLocations.length">
-      <div
-        v-for="savedLocation in userLocations"
-        :key="savedLocation.id"
-        v-show="activeTab === savedLocation.id"
-        class="w-full saved-location p-3"
-      >
-        <h4 class="text-lg font-medium text-gray-700 mb-2">
-          {{ LabelsByLanguageCode[getSingleLanguageCode].savedLocation }}
-        </h4>
-        <div class="bg-gray-50 p-3 rounded-md shadow-sm flex space-x-4 items-center">
-          <p class="font-sm text-gray-800">{{ capitalize(savedLocation.name) }}</p>
-          <p class="text-sm text-gray-600">
-            Lat: {{ savedLocation.latitude }}
-          </p>
-          <p class="text-sm text-gray-600">
-            Lng: {{ savedLocation.longitude }}
-          </p>
-          <p v-if="savedLocation.address" class="text-sm text-gray-600">
-            {{ LabelsByLanguageCode[getSingleLanguageCode].address }}: {{ savedLocation.address }}
-          </p>
+    <!-- Tab Content -->
+    <div class="mt-6">
+      <!-- Tab Content: Current Location -->
+      <div v-if="activeTab === 'current'" class="current-location">
+        <h3 class="text-lg font-semibold text-gray-800 mb-4">
+          {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].currentLocation }}
+        </h3>
+
+        <div class="text-sm text-gray-700 mb-4 space-y-1">
+          <div><strong>Lat:</strong> {{ location.latitude }}</div>
+          <div><strong>Lng:</strong> {{ location.longitude }}</div>
+          <div v-if="location.address">
+            <strong>{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].address }}:</strong> {{ location.address }}
+          </div>
         </div>
 
-        <!--Change report dropdown-->
-        <div class="mt-4 flex flex-wrap justify-center items-center gap-2">
-          <select
-            id="location-report"
-            v-model="savedLocation.report"
-            class="px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2 pr-8"
-          >
-            <option value="off">{{ LabelsByLanguageCode[getSingleLanguageCode].off }}</option>
-            <option value="daily">{{ LabelsByLanguageCode[getSingleLanguageCode].daily }}</option>
-            <option value="weekly">{{ LabelsByLanguageCode[getSingleLanguageCode].weekly }}</option>
-          </select>
-          <select
-            id="location-name"
-            v-model="savedLocation.name"
-            class="px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2 pr-8"
-          >
-            <option value="home">{{ LabelsByLanguageCode[getSingleLanguageCode].home }}</option>
-            <option value="work">{{ LabelsByLanguageCode[getSingleLanguageCode].work }}</option>
-            <option value="other">{{ LabelsByLanguageCode[getSingleLanguageCode].other }}</option>
-          </select>
-          <!-- language input, a free text field -->
-          <input
-            type="text"
-            v-model="savedLocation.language"
-            class="px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm
-            pl-2 pr-8"
-            placeholder="Language"
-          />
-          <button
-            @click="updateLocation(savedLocation.id, savedLocation)"
-            class="px-4 py-2 bg-blue-500 text-white shadow-sm hover:bg-blue-600 transition-colors"
-          >
-            {{ LabelsByLanguageCode[getSingleLanguageCode].update }}
-          </button>
-
+        <div class="space-y-4">
+          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
+            <div>
+              <label for="current-location-report" class="block text-sm font-medium text-gray-700">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].report }}</label>
+              <select
+                id="current-location-report"
+                v-model="location.report"
+                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
+              >
+                <option value="off">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].off }}</option>
+                <option value="daily">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].daily }}</option>
+                <option value="weekly">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].weekly }}</option>
+              </select>
+            </div>
+            <div>
+              <label for="current-location-name" class="block text-sm font-medium text-gray-700">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].selectName }}</label>
+              <select
+                id="current-location-name"
+                v-model="selectedName"
+                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
+              >
+                <option value="home">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].home }}</option>
+                <option value="work">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].work }}</option>
+                <option value="other">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].other }}</option>
+              </select>
+            </div>
+          </div>
+          <div>
+            <label for="current-location-language" class="block text-sm font-medium text-gray-700">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].language }}</label>
+            <input
+              type="text"
+              id="current-location-language"
+              v-model="location.language"
+              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
+              :placeholder="translations.LocationLabelsByLanguageCode[getSingleLanguageCode].language"
+            />
+          </div>
+          <div class="mt-6">
+            <button
+              v-if="isAuthenticated"
+              @click="saveLocation"
+              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
+              :disabled="saving"
+            >
+              {{ saving ? translations.LocationLabelsByLanguageCode[getSingleLanguageCode].saving : translations.LocationLabelsByLanguageCode[getSingleLanguageCode].saveLocation }}
+            </button>
+            <div v-else class="flex flex-col space-y-2 items-center">
+              <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + currentPath"
+                 class="flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
+                <img class="h-5 w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+                {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].loginWithGoogleToSave || 'Login with Google to Save' }}
+              </a>
+              <Link :href="route('login') + '?redirect_to=' + currentPath" class="text-sm text-blue-600 hover:underline">
+                {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].loginManuallyToSave || 'Or login manually to save' }}
+              </Link>
+            </div>
+            <span v-if="maxLocationsReached && isAuthenticated" class="mt-2 block text-sm text-red-500 text-center">
+              {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].maxLocationsReached }}
+            </span>
+          </div>
         </div>
+      </div>
 
-        <div class="mt-4 flex justify-center gap-2">
-          <button
-            @click="emitLocation(savedLocation)"
-            class="px-4 py-2 bg-blue-500 text-white shadow-sm hover:bg-blue-600 transition-colors"
-          >
-            {{ LabelsByLanguageCode[getSingleLanguageCode].load }}
-          </button>
-          <button
-            @click="deleteLocation(savedLocation.id)"
-            class="px-4 py-2 bg-red-500 text-white shadow-sm hover:bg-red-600 transition-colors"
-          >
-            {{ LabelsByLanguageCode[getSingleLanguageCode].delete }}
-          </button>
-          <button
-            @click="dispatchReport(savedLocation)"
-            class="px-4 py-2 bg-green-500 text-white shadow-sm hover:bg-green-600 transition-colors"
-          >
-            {{ LabelsByLanguageCode[getSingleLanguageCode].sendReport }}
-          </button>
-          <span v-if="reportDispatched" class="text-green-500 content-center">
-            {{ LabelsByLanguageCode[getSingleLanguageCode].reportSent }}
-          </span>
+      <!-- Tab Content: Individual Saved Locations -->
+      <template v-else-if="userLocations.length">
+        <div
+          v-for="savedLocation in userLocations"
+          :key="savedLocation.id"
+          v-show="activeTab === savedLocation.id"
+          class="saved-location"
+        >
+          <h3 class="text-lg font-semibold text-gray-800 mb-4">
+            {{ capitalize(savedLocation.name) }} - {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].savedLocation }}
+          </h3>
+          <div class="p-3 bg-gray-50 rounded-md shadow-sm text-sm text-gray-700 mb-4 space-y-1">
+            <div><strong>Lat:</strong> {{ savedLocation.latitude }}</div>
+            <div><strong>Lng:</strong> {{ savedLocation.longitude }}</div>
+            <div v-if="savedLocation.address">
+              <strong>{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].address }}:</strong> {{ savedLocation.address }}
+            </div>
+          </div>
+
+          <div class="space-y-4">
+            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
+              <div>
+                <label :for="'saved-location-report-' + savedLocation.id" class="block text-sm font-medium text-gray-700">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].report }}</label>
+                <select
+                  :id="'saved-location-report-' + savedLocation.id"
+                  v-model="savedLocation.report"
+                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
+                >
+                  <option value="off">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].off }}</option>
+                  <option value="daily">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].daily }}</option>
+                  <option value="weekly">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].weekly }}</option>
+                </select>
+              </div>
+              <div>
+                <label :for="'saved-location-name-' + savedLocation.id" class="block text-sm font-medium text-gray-700">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].selectName }}</label>
+                <select
+                  :id="'saved-location-name-' + savedLocation.id"
+                  v-model="savedLocation.name"
+                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
+                >
+                  <option value="home">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].home }}</option>
+                  <option value="work">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].work }}</option>
+                  <option value="other">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].other }}</option>
+                </select>
+              </div>
+            </div>
+            <div>
+              <label :for="'saved-location-language-' + savedLocation.id" class="block text-sm font-medium text-gray-700">{{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].language }}</label>
+              <input
+                type="text"
+                :id="'saved-location-language-' + savedLocation.id"
+                v-model="savedLocation.language"
+                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
+                :placeholder="translations.LocationLabelsByLanguageCode[getSingleLanguageCode].language"
+              />
+            </div>
+            <div class="mt-6">
+              <button
+                @click="updateLocation(savedLocation.id, savedLocation)"
+                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
+              >
+                {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].update }}
+              </button>
+            </div>
+          </div>
+
+          <div class="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-3">
+            <button
+              @click="emitLocation(savedLocation)"
+              class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
+            >
+              {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].load }}
+            </button>
+            <button
+              @click="deleteLocation(savedLocation.id)"
+              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
+            >
+              {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].delete }}
+            </button>
+            <button
+              @click="dispatchReport(savedLocation)"
+              class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
+            >
+              {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].sendReport }}
+            </button>
+          </div>
+          <div v-if="reportDispatched && activeTab === savedLocation.id" class="mt-3 text-sm text-green-600 text-center">
+            {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].reportSent }}
+          </div>
         </div>
-      </div>
-    </template>
+      </template>
 
-    <!-- No Saved Locations Fallback -->
-    <div v-else class="w-full saved-location p-3">
-      <h4 class="text-lg font-medium text-gray-700 mb-2">
-        {{ LabelsByLanguageCode[getSingleLanguageCode].noSavedLocations }}
-      </h4>
+      <!-- No Saved Locations Fallback -->
+      <div v-else-if="activeTab !== 'current' && !userLocations.find(loc => loc.id === activeTab)" class="py-6 text-center">
+        <p class="text-md text-gray-600">
+          {{ translations.LocationLabelsByLanguageCode[getSingleLanguageCode].noSavedLocations }}
+        </p>
+      </div>
     </div>
   </div>
 </template>
@@ -179,6 +236,7 @@
 <script setup>
 import { ref, watch, onMounted, computed } from 'vue';
 import axios from 'axios';
+import { usePage, Link } from '@inertiajs/vue3';
 
 // Props
 const props = defineProps({
@@ -190,12 +248,20 @@ const props = defineProps({
     type: Array,
     required: true,
   },
+  translations: {
+    type: Object,
+    required: true,
+  },
 });
 
 // Emit
 const emit = defineEmits(['load-location']);
 
 // Reactive States
+const page = usePage();
+const isAuthenticated = computed(() => !!page.props.auth.user);
+const currentPath = computed(() => window.location.pathname + window.location.search);
+
 const selectedName = ref('home');
 const isSaved = ref(false);
 const saving = ref(false);
@@ -203,6 +269,11 @@ const userLocations = ref([]);
 const activeTab = ref('current');
 const reportDispatched = ref(false);
 const maxLocationsReached = ref(false);
+const isExpanded = ref(false);
+
+const toggleExpanded = () => {
+  isExpanded.value = !isExpanded.value;
+};
 
 // Methods
 /*
@@ -251,6 +322,12 @@ const checkIfSaved = () => {
 
 const saveLocation = async () => {
   
+  if (!isAuthenticated.value) {
+    // This case should ideally be handled by the UI showing login buttons,
+    // but as a fallback, redirect.
+    window.location.href = route('login') + '?redirect_to=' + currentPath.value;
+    return;
+  }
 
   //if (isSaved.value || saving.value) return;
 
@@ -268,10 +345,11 @@ const saveLocation = async () => {
     userLocations.value.push(response.data);
     isSaved.value = true;
     saving.value = false;
+    maxLocationsReached.value = false; // Reset on successful save
   } catch (error) {
-    if (error.response.status === 401) {
-      window.location.href = '/login';
-    } else if (error.response.status === 403) {
+    if (error.response && error.response.status === 401) {
+      window.location.href = route('login') + '?redirect_to=' + currentPath.value;
+    } else if (error.response && error.response.status === 403) {
       maxLocationsReached.value = true;
     } else {
       console.error('Error saving location:', error);
@@ -307,140 +385,6 @@ const emitLocation = (location) => {
 // Utilities
 const capitalize = (str) => str[0].toUpperCase() + str.slice(1);
 
-const LabelsByLanguageCode = {
-  'en-US': {
-    currentLocation: 'Current Location',
-    saveLocation: 'Save Location',
-    locationSaved: 'Location Saved',
-    saving: 'Saving...',
-    delete: 'Delete',
-    load: 'Load',
-    noSavedLocations: "You haven’t saved any locations yet. Save your current location to get started.",
-    savedLocation: 'Saved Location',
-    selectName: 'Select Name',
-    home: 'Home',
-    work: 'Work',
-    other: 'Other',
-    off: 'Off',
-    daily: 'Daily',
-    weekly: 'Weekly',
-    address: 'Address',
-    update: 'Update',
-    sendReport: 'Send Report',
-    reportSent: 'Report Sent',
-    maxLocationsReached: 'You have reached the maximum number of saved locations.',
-  },
-  'es-MX': {
-    currentLocation: 'Ubicación Actual',
-    saveLocation: 'Guardar Ubicación',
-    locationSaved: 'Ubicación Guardada',
-    saving: 'Guardando...',
-    delete: 'Eliminar',
-    load: 'Cargar',
-    noSavedLocations: 'Aún no has guardado ubicaciones. Guarda tu ubicación actual para comenzar.',
-    savedLocation: 'Ubicación Guardada',
-    selectName: 'Seleccionar Nombre',
-    home: 'Casa',
-    work: 'Trabajo',
-    other: 'Otro',
-    off: 'Apagado',
-    daily: 'Diario',
-    weekly: 'Semanal',
-    address: 'Dirección',
-    update: 'Actualizar',
-    sendReport: 'Enviar Reporte',
-    reportSent: 'Reporte Enviado',
-    maxLocationsReached: 'Has alcanzado el número máximo de ubicaciones guardadas.',
-  },
-  'zh-CN': {
-    currentLocation: '当前位置',
-    saveLocation: '保存位置',
-    locationSaved: '位置已保存',
-    saving: '保存中...',
-    delete: '删除',
-    load: '加载',
-    noSavedLocations: '您还没有保存任何位置。保存您当前的位置以开始。',
-    savedLocation: '已保存的位置',
-    selectName: '选择名称',
-    home: '家',
-    work: '工作',
-    other: '其他',
-    off: '关闭',
-    daily: '每日',
-    weekly: '每周',
-    address: '地址',
-    update: '更新',
-    sendReport: '发送报告',
-    reportSent: '报告已发送',
-    maxLocationsReached: '您已达到保存位置的最大数量。',
-  },
-  'ht-HT': {
-    currentLocation: 'Kote Kounye a',
-    saveLocation: 'Sove Kote a',
-    locationSaved: 'Kote Sove',
-    saving: 'Ap sove...',
-    delete: 'Efase',
-    load: 'Chaje',
-    noSavedLocations: 'Ou poko sove okenn kote. Sove kote w ye kounye a pou kòmanse.',
-    savedLocation: 'Kote Sove',
-    selectName: 'Chwazi Non',
-    home: 'Kay',
-    work: 'Travay',
-    other: 'Lòt',
-    off: 'Fèmen',
-    daily: 'Chak jou',
-    weekly: 'Chak semèn',
-    address: 'Adrès',
-    update: 'Mizajou',
-    sendReport: 'Voye Rapò',
-    reportSent: 'Rapò voye',
-    maxLocationsReached: 'Ou rive nan kantite maksimòm kote sove yo.',
-  },
-  'vi-VN': {
-    currentLocation: 'Vị Trí Hiện Tại',
-    saveLocation: 'Lưu Vị Trí',
-    locationSaved: 'Đã Lưu Vị Trí',
-    saving: 'Đang lưu...',
-    delete: 'Xóa',
-    load: 'Tải',
-    noSavedLocations: 'Bạn chưa lưu bất kỳ vị trí nào. Lưu vị trí hiện tại của bạn để bắt đầu.',
-    savedLocation: 'Vị Trí Đã Lưu',
-    selectName: 'Chọn Tên',
-    home: 'Nhà',
-    work: 'Công việc',
-    other: 'Khác',
-    off: 'Tắt',
-    daily: 'Hàng ngày',
-    weekly: 'Hàng tuần',
-    address: 'Địa chỉ',
-    update: 'Cập nhật',
-    sendReport: 'Gửi Báo Cáo',
-    reportSent: 'Báo cáo đã gửi',
-    maxLocationsReached: 'Bạn đã đạt số lượng tối đa của vị trí đã lưu.',  
-  },
-  'pt-BR': {
-    currentLocation: 'Localização Atual',
-    saveLocation: 'Salvar Localização',
-    locationSaved: 'Localização Salva',
-    saving: 'Salvando...',
-    delete: 'Excluir',
-    load: 'Carregar',
-    noSavedLocations: 'Você ainda não salvou nenhuma localização. Salve sua localização atual para começar.',
-    savedLocation: 'Localização Salva',
-    selectName: 'Selecionar Nome',
-    home: 'Casa',
-    work: 'Trabalho',
-    other: 'Outro',
-    off: 'Desligado',
-    daily: 'Diário',
-    weekly: 'Semanal',
-    address: 'Endereço',
-    update: 'Atualizar',
-    sendReport: 'Enviar Relatório',
-    reportSent: 'Relatório Enviado',
-    maxLocationsReached: 'Você atingiu o número máximo de localizações salvas.',
-  },
-};
 
 
 const getSingleLanguageCode = computed(() => props.language_codes[0]);
@@ -462,23 +406,8 @@ onMounted(() => {
 <style scoped>
 button[disabled] {
   cursor: not-allowed;
+  opacity: 0.7;
 }
 
-.tab-button {
-  padding: 10px 15px;
-  border: none;
-  background-color: #f9f9f9;
-  cursor: pointer;
-  border-bottom: 2px solid transparent;
-  transition: background-color 0.3s, border-bottom-color 0.3s;
-}
-
-.tab-button.active {
-  border-bottom: 2px solid #3490dc;
-  background-color: #ffffff;
-}
-
-.tab-button:hover {
-  background-color: #f0f0f0;
-}
+/* Removed old .tab-button styles as Tailwind classes are now used directly */
 </style>
diff --git a/resources/js/Components/ServiceCase.vue b/resources/js/Components/ServiceCase.vue
index 99e8346..782520d 100644
--- a/resources/js/Components/ServiceCase.vue
+++ b/resources/js/Components/ServiceCase.vue
@@ -1,30 +1,42 @@
 <template>
     <div
       v-if="data"
-      class="p-4 bg-gray-100 flex w-full h-full"
+      class="p-4 bg-gray-100 flex flex-col w-full"
       :class="{ 'w-1/2': hasPhoto }"
     >
       <div class="flex-grow mr-4"> <!-- Added mr-4 for spacing if photo exists, wrapper for all text content -->
-        
+        <div class="mt-4">
+            <button
+              @click="fetchLiveDetails"
+              :disabled="isLoadingLiveData || !data?.case_enquiry_id"
+              class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-300"
+            >
+              {{ isLoadingLiveData ? 'Loading Live Data...' : 'Refresh Live Data from BOS:311' }}
+            </button>
+          </div>
         <!-- Live Data from BOS:311 -->
-        <div v-if="liveApiData && Object.keys(liveApiData).length > 0" class="mb-4 p-3 border border-gray-300 bg-white shadow rounded">
-          <h3 class="text-md font-semibold text-gray-700">Live Data from BOS:311</h3>
-          <ul class="space-y-1 mt-2 text-sm text-gray-600">
-            <li v-if="liveApiData.status"><strong>Live Status:</strong> {{ liveApiData.status }}</li>
-            <li v-if="liveApiData.status_notes"><strong>Status Notes:</strong> {{ liveApiData.status_notes }}</li>
-            <li v-if="liveApiData.service_name"><strong>Live Service Name:</strong> {{ liveApiData.service_name }}</li>
-            <li v-if="liveApiData.description"><strong>Live Description:</strong> <span class="whitespace-pre-wrap">{{ liveApiData.description }}</span></li>
-            <li v-if="liveApiData.address"><strong>Live Address:</strong> {{ liveApiData.address }}</li>
-            <li v-if="liveApiData.agency_responsible"><strong>Live Agency Responsible:</strong> {{ liveApiData.agency_responsible }}</li>
-            <li v-if="liveApiData.service_notice"><strong>Service Notice:</strong> {{ liveApiData.service_notice }}</li>
-            <li v-if="liveApiData.requested_datetime"><strong>Reported (Live):</strong> {{ formatDate(liveApiData.requested_datetime) }}</li>
-            <li v-if="liveApiData.updated_datetime"><strong>Last Updated (Live):</strong> {{ formatDate(liveApiData.updated_datetime) }}</li>
-            <li v-if="liveApiData.expected_datetime"><strong>Expected Resolution (Live):</strong> {{ formatDate(liveApiData.expected_datetime) }}</li>
-            <li v-if="liveApiData.media_url">
-              <strong>Live Media:</strong>
-              <img :src="liveApiData.media_url" alt="Live media from BOS:311" class="max-w-full md:max-w-sm h-auto mt-1 border rounded"/>
-            </li>
-          </ul>
+        <div v-if="liveApiData && Object.keys(liveApiData).length > 0" class="mb-4 p-3 border border-gray-300 bg-white shadow rounded flex flex-wrap -m-1">
+          <div class="w-full md:w-1/2 p-1">
+            <h3 class="text-md font-semibold text-gray-700">Live Data from BOS:311</h3>
+            <ul class="space-y-1 mt-2 text-sm text-gray-600">
+              <li v-if="liveApiData.status"><strong>Live Status:</strong> {{ liveApiData.status }}</li>
+              <li v-if="liveApiData.status_notes"><strong>Status Notes:</strong> {{ liveApiData.status_notes }}</li>
+              <li v-if="liveApiData.service_name"><strong>Live Service Name:</strong> {{ liveApiData.service_name }}</li>
+              <li v-if="liveApiData.description"><strong>Live Description:</strong> <span class="whitespace-pre-wrap">{{ liveApiData.description }}</span></li>
+              <li v-if="liveApiData.address"><strong>Live Address:</strong> {{ liveApiData.address }}</li>
+              <li v-if="liveApiData.agency_responsible"><strong>Live Agency Responsible:</strong> {{ liveApiData.agency_responsible }}</li>
+              <li v-if="liveApiData.service_notice"><strong>Service Notice:</strong> {{ liveApiData.service_notice }}</li>
+              <li v-if="liveApiData.requested_datetime"><strong>Reported (Live):</strong> {{ formatDate(liveApiData.requested_datetime) }}</li>
+              <li v-if="liveApiData.updated_datetime"><strong>Last Updated (Live):</strong> {{ formatDate(liveApiData.updated_datetime) }}</li>
+              <li v-if="liveApiData.expected_datetime"><strong>Expected Resolution (Live):</strong> {{ formatDate(liveApiData.expected_datetime) }}</li>
+
+            </ul>
+        </div>
+          <div v-if="liveApiData.media_url" class="w-full md:w-1/2 p-1">
+            <h4 class="text-sm font-semibold text-gray-700">Live Media:</h4>
+              <img :src="liveApiData.media_url" alt="Live media from BOS:311" class="max-w-full h-auto mt-1 border rounded"/>
+            
+          </div>
         </div>
         <div v-else-if="liveApiData && Object.keys(liveApiData).length === 0 && !isLoadingLiveData && !liveDataError" class="mb-4 text-sm text-gray-500 p-3 border border-gray-300 bg-gray-50 shadow rounded">
            <p>Checked for live data from BOS:311; no specific details found or applicable for this case ID.</p>
@@ -44,40 +56,57 @@
         </div>
         
         <!-- Historical Case Info -->
-        <div class="case-info"> <!-- flex-grow removed from here, parent div has it -->
+         <div class="w-full flex flex-wrap -m-1">
+        <div class="case-info w-full md:w-1/2 p-1">
           <h2 class="text-xl font-bold text-gray-800">
-            {{ LabelsByLanguageCode[getSingleLanguageCode].caseTitle }} (Historical Record)
+            {{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].caseTitle }} (Historical Record)
           </h2>
           <p class="text-gray-700 mb-4">
-            <strong>{{ LabelsByLanguageCode[getSingleLanguageCode].dateLabel }}:</strong> {{ new Date(data.alcivartech_date).toLocaleString() }}
+            <strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].dateLabel }}:</strong> {{ new Date(data.alcivartech_date).toLocaleString() }}
           </p>
           <ul class="space-y-2">
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].caseId }}:</strong> {{ data.case_enquiry_id }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].status }}:</strong> {{ data.case_status }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].title }}:</strong> {{ data.case_title }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].reason }}:</strong> {{ data.reason }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].subject }}:</strong> {{ data.subject }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].location }}:</strong> {{ data.location }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].neighborhood }}:</strong> {{ data.neighborhood }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].source }}:</strong> {{ data.source }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].department }}:</strong> {{ data.department }}</li>
-            <li><strong>{{ LabelsByLanguageCode[getSingleLanguageCode].closureDate }}:</strong> {{ formatDate(data.closed_dt) }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].caseId }}:</strong> {{ data.case_enquiry_id }}</li>
+            <li v-if="data.source_city"><strong>Source City:</strong> {{ data.source_city }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].status }}:</strong> {{ data.case_status }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].title }}:</strong> {{ data.case_title }}</li>
+            <li v-if="data.threeoneonedescription"><strong>Description:</strong> <span class="whitespace-pre-wrap">{{ data.threeoneonedescription }}</span></li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].reason }}:</strong> {{ data.reason }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].subject }}:</strong> {{ data.subject }}</li>
+            <li v-if="data.type"><strong>Type:</strong> {{ data.type }}</li>
+            <li v-if="data.open_dt"><strong>Opened Date:</strong> {{ formatDate(data.open_dt) }}</li>
+            <li v-if="data.sla_target_dt"><strong>SLA Target Date:</strong> {{ formatDate(data.sla_target_dt) }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].closureDate }}:</strong> {{ formatDate(data.closed_dt) }}</li>
+            <li v-if="data.closure_reason"><strong>Closure Reason:</strong> {{ data.closure_reason }}</li>
+            <li v-if="data.on_time"><strong>On Time:</strong> {{ data.on_time }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].department }}:</strong> {{ data.department }}</li>
+            <li v-if="data.queue"><strong>Queue:</strong> {{ data.queue }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].location }}:</strong> {{ data.location }}</li>
+            <li v-if="data.location_street_name"><strong>Street Name:</strong> {{ data.location_street_name }}</li>
+            <li v-if="data.location_zipcode"><strong>Zipcode:</strong> {{ data.location_zipcode }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].neighborhood }}:</strong> {{ data.neighborhood }}</li>
+            <li v-if="data.neighborhood_services_district"><strong>Neighborhood Services District:</strong> {{ data.neighborhood_services_district }}</li>
+            <li v-if="data.ward"><strong>Ward:</strong> {{ data.ward }}</li>
+            <li v-if="data.ward_number"><strong>Ward Number:</strong> {{ data.ward_number }}</li>
+            <li v-if="data.precinct"><strong>Precinct:</strong> {{ data.precinct }}</li>
+            <li v-if="data.fire_district"><strong>Fire District:</strong> {{ data.fire_district }}</li>
+            <li v-if="data.pwd_district"><strong>PWD District:</strong> {{ data.pwd_district }}</li>
+            <li v-if="data.city_council_district"><strong>City Council District:</strong> {{ data.city_council_district }}</li>
+            <li v-if="data.police_district"><strong>Police District:</strong> {{ data.police_district }}</li>
+            <li v-if="data.latitude"><strong>Latitude:</strong> {{ data.latitude }}</li>
+            <li v-if="data.longitude"><strong>Longitude:</strong> {{ data.longitude }}</li>
+            <li><strong>{{ translations.CaseLabelsByLanguageCode[getSingleLanguageCode].source }}:</strong> {{ data.source }}</li>
+            <li v-if="data.language_code"><strong>Language Code:</strong> {{ data.language_code }}</li>
+            <li v-if="data.checksum"><strong>Checksum:</strong> {{ data.checksum }}</li>
           </ul>
 
-          <div class="mt-4">
-            <button
-              @click="fetchLiveDetails"
-              :disabled="isLoadingLiveData || !data?.case_enquiry_id"
-              class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-300"
-            >
-              {{ isLoadingLiveData ? 'Loading Live Data...' : 'Refresh Live Data from BOS:311' }}
-            </button>
-          </div>
+
           <!-- Original live data sections removed from here as they are moved above -->
         </div>
+        <OneImageCarousel v-if="hasPhoto" :dataPoints="parsedPhotos" @on-image-click="onImageClick" class="w-full md:w-1/2 p-1" />
+      </div>
       </div>
   
-      <OneImageCarousel v-if="hasPhoto" :dataPoints="parsedPhotos" @on-image-click="onImageClick" class="ml-0" /> <!-- ml-4 removed as parent has mr-4 -->
+      
     </div>
 </template>
   
@@ -85,6 +114,7 @@
   import { computed, defineProps, defineEmits, ref, onMounted, watch } from 'vue';
   import OneImageCarousel from './OneImageCarousel.vue';
   import axios from 'axios';
+  import { inject } from 'vue';
   
   const props = defineProps({
     data: {
@@ -96,93 +126,11 @@
       default: () => ['en-US'],
     },
   });
+
+
+  const translations = inject('translations');
+  
   
-  const LabelsByLanguageCode = {
-    'en-US': {
-      caseTitle: '311 Case',
-      dateLabel: 'Date',
-      caseId: 'Case ID',
-      status: 'Status',
-      title: 'Title',
-      reason: 'Reason',
-      subject: 'Subject',
-      location: 'Location',
-      neighborhood: 'Neighborhood',
-      source: 'Source',
-      department: 'Department',
-      closureDate: 'Closure Date',
-    },
-    'es-MX': {
-      caseTitle: 'Caso 311',
-      dateLabel: 'Fecha',
-      caseId: 'ID de Caso',
-      status: 'Estado',
-      title: 'Título',
-      reason: 'Razón',
-      subject: 'Asunto',
-      location: 'Ubicación',
-      neighborhood: 'Vecindario',
-      source: 'Fuente',
-      department: 'Departamento',
-      closureDate: 'Fecha de Cierre',
-    },
-    'zh-CN': {
-      caseTitle: '311案例',
-      dateLabel: '日期',
-      caseId: '案例编号',
-      status: '状态',
-      title: '标题',
-      reason: '原因',
-      subject: '主题',
-      location: '位置',
-      neighborhood: '社区',
-      source: '来源',
-      department: '部门',
-      closureDate: '关闭日期',
-    },
-    'ht-HT': {
-      caseTitle: 'Kaz 311',
-      dateLabel: 'Dat',
-      caseId: 'ID Kaz',
-      status: 'Estati',
-      title: 'Tit',
-      reason: 'Rezon',
-      subject: 'Sijè',
-      location: 'Kote',
-      neighborhood: 'Katye',
-      source: 'Sous',
-      department: 'Depatman',
-      closureDate: 'Dat Fèmen',
-    },
-    'vi-VN': {
-      caseTitle: 'Trường hợp 311',
-      dateLabel: 'Ngày',
-      caseId: 'ID Trường hợp',
-      status: 'Trạng thái',
-      title: 'Tiêu đề',
-      reason: 'Lý do',
-      subject: 'Chủ đề',
-      location: 'Vị trí',
-      neighborhood: 'Hàng xóm',
-      source: 'Nguồn',
-      department: 'Bộ phận',
-      closureDate: 'Ngày đóng cửa',
-    },
-    'pt-BR': { 
-      caseTitle: 'Caso 311',
-      dateLabel: 'Data',
-      caseId: 'ID do Caso',
-      status: 'Estado',
-      title: 'Título',
-      reason: 'Razão',
-      subject: 'Assunto',
-      location: 'Localização',
-      neighborhood: 'Vizinhança',
-      source: 'Fonte',
-      department: 'Departamento',
-      closureDate: 'Data de Encerramento',
-    },   
-  };
   
   const getSingleLanguageCode = computed(() => props.language_codes[0]);
   
@@ -215,6 +163,8 @@
   const isLoadingLiveData = ref(false);
   const liveDataError = ref(null);
 
+
+
   const fetchLiveDetails = async () => {
     if (!props.data || !props.data.case_enquiry_id) {
       liveDataError.value = 'Case ID is missing from the current record.';
@@ -229,6 +179,7 @@
       const response = await axios.get(`/api/311-case/live/${props.data.case_enquiry_id}`);
       if (response.data && response.data.data) {
         if (response.data.data.length > 0) {
+          console.log('Live data response:', response.data.data[0]);
           liveApiData.value = response.data.data[0]; // API returns an array
         } else {
           // API returned success but an empty array for data.
@@ -257,13 +208,17 @@
   };
 
   onMounted(() => {
-    if (props.data && props.data.case_enquiry_id) {
-      fetchLiveDetails();
+    if (props.data && props.data.case_enquiry_id && !liveApiData.value) {
+      //fetchLiveDetails();
+    }
+    if (props.data.live_details) {
+      liveApiData.value = props.data.live_details;
     }
   });
-
+  
   watch(() => props.data, (newData, oldData) => {
     // Reset live data if the case_enquiry_id changes or data becomes null
+    /*
     if (!newData || (oldData && newData.case_enquiry_id !== oldData.case_enquiry_id)) {
       liveApiData.value = null;
       liveDataError.value = null;
@@ -274,10 +229,15 @@
       if (!oldData || newData.case_enquiry_id !== oldData.case_enquiry_id || !liveApiData.value) {
          fetchLiveDetails();
       }
+    } */
+
+    if (props.data.live_details) {
+      liveApiData.value = props.data.live_details;
     }
   }, { deep: true }); // Use deep watch if internal properties of data might change without data itself being a new object.
                       // If data is always a new object on change, deep might not be necessary.
                       // Given it's a prop, it's safer to assume it might be mutated or replaced.
-</script>
+  
+ </script>
 
 <style scoped></style>
\ No newline at end of file
diff --git a/resources/js/Components/SubscriptionBanner.vue b/resources/js/Components/SubscriptionBanner.vue
index 1ff590d..d3dacb6 100644
--- a/resources/js/Components/SubscriptionBanner.vue
+++ b/resources/js/Components/SubscriptionBanner.vue
@@ -1,18 +1,40 @@
 <template>
-    <div v-if="!isSubscribed"
-         class="bg-gradient-to-r from-blue-500 to-green-200 text-white p-6  shadow-xl my-6 flex flex-col md:flex-row items-center justify-between">
+    <div v-if="!isAuthenticated || (isAuthenticated && !isSubscribed)"
+         class="bg-gradient-to-r from-blue-900 to-green-700 text-white p-6 shadow-xl my-6 flex flex-col md:flex-row items-center justify-between">
       <div>
         <h2 class="text-2xl font-bold mb-2">
-          {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerTitle || 'Unlock Full Potential!' }}
+          {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerTitle || 'Enhance Your Experience!' }}
         </h2>
-        <p class="mb-4 md:mb-0">
-          {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerDescription || 'Subscribe to access premium features like detailed reports, advanced maps, and more saved locations.' }}
+        <p class="mb-4 md:mb-0" v-if="!isAuthenticated">
+          {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerDescriptionLoggedOut || 'Log in or register to access advanced free features like recent data on the full map and Food Inspection results. Subscribe for even more!' }}
+        </p>
+        <p class="mb-4 md:mb-0" v-else-if="isAuthenticated && !isSubscribed">
+          {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerDescriptionLoggedInNotSubscribed || 'You have access to great free features! Subscribe to unlock premium capabilities like extended data history, detailed reports, and more saved locations.' }}
         </p>
       </div>
-      <Link :href="route('subscription.index')"
-            class="mt-4 md:mt-0 md:ml-6 px-6 py-3 bg-white text-blue-600 font-semibold  shadow-md hover:bg-gray-100 transition-colors whitespace-nowrap">
-        {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerButton || 'View Plans & Subscribe' }}
-      </Link>
+      <div class="mt-4 md:mt-0 md:ml-6 text-center">
+        <template v-if="isAuthenticated && !isSubscribed">
+          <Link :href="route('subscription.index')"
+                class="px-6 py-3 bg-white text-blue-600 font-semibold rounded-md shadow-md hover:bg-gray-100 transition-colors whitespace-nowrap">
+            {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerButtonViewPlans || 'View Plans & Subscribe' }}
+          </Link>
+        </template>
+        <template v-else-if="!isAuthenticated">
+          <div class="flex flex-col space-y-2 items-center">
+            <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + route('map.index')"
+               class="flex items-center justify-center w-full px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-blue-600 bg-white hover:bg-gray-50">
+              <img class="h-5 w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerRegisterWithGoogleButton || 'Login with Google' }}
+            </a>
+            <Link :href="route('register') + '?redirect_to=' + route('map.index')" class="text-sm text-gray-100 hover:text-white hover:underline">
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerRegisterManuallyLink || 'Or register manually' }}
+            </Link>
+             <Link :href="route('subscription.index')" class="mt-2 text-sm text-gray-100 hover:text-white hover:underline">
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.bannerOrViewPlansLink || 'Or view subscription plans' }}
+            </Link>
+          </div>
+        </template>
+      </div>
     </div>
     <div v-else-if="isAuthenticated && isSubscribed"
          class="bg-gradient-to-r from-green-500 to-teal-600 text-white p-6  shadow-xl my-6 flex flex-col md:flex-row items-center justify-between">
@@ -40,7 +62,8 @@
   const isSubscribed = computed(() => {
       // This logic needs to be robust. Ideally, pass subscription status as a prop from Laravel.
       // For now, a simple check. You'll likely enhance this.
-      return page.props.auth.user && page.props.auth.user.is_subscribed; // Assuming you add `is_subscribed` to user props
+      // Ensure auth and user objects exist before accessing properties
+      return page.props.auth && page.props.auth.user && page.props.auth.user.is_subscribed;
   });
   
   
@@ -48,19 +71,23 @@
   const language_codes = ref(['en-US']); // Or get from a global store/user preferences
   
   const getSingleLanguageCode = computed(() => {
-    return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode['en-US']) ? language_codes.value[0] : 'en-US';
+    return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode[language_codes.value[0]]) ? language_codes.value[0] : 'en-US';
   });
   
   // Add to your translations provider:
   /*
   translations.LabelsByLanguageCode['en-US'] = {
     ...translations.LabelsByLanguageCode['en-US'],
-    bannerTitle: 'Unlock Full Potential!',
-    bannerDescription: 'Subscribe to access premium features like detailed reports, advanced maps, and more saved locations.',
-    bannerButton: 'View Plans & Subscribe',
+    bannerTitle: 'Enhance Your Experience!',
+    bannerDescriptionLoggedOut: 'Log in or register to access advanced free features like recent data on the full map and Food Inspection results. Subscribe for even more!',
+    bannerDescriptionLoggedInNotSubscribed: 'You have access to great free features! Subscribe to unlock premium capabilities like extended data history, detailed reports, and more saved locations.',
+    bannerButtonViewPlans: 'View Plans & Subscribe',
+    bannerRegisterWithGoogleButton: 'Login with Google', // Was: 'Register with Google to Subscribe'
+    bannerRegisterManuallyLink: 'Or register manually',
+    bannerOrViewPlansLink: 'Or view subscription plans',
     subscribedBannerTitle: 'You\'re All Set!',
     subscribedBannerDescription: 'Thank you for being a subscriber. Manage your subscription or explore features.',
-    manageSubscriptionButton: 'Manage Subscription'
+    manageSubscriptionButton: 'Manage Subscription',
   };
   */
   </script>
diff --git a/resources/js/Components/UniversalDataDisplay.vue b/resources/js/Components/UniversalDataDisplay.vue
new file mode 100644
index 0000000..93c8dae
--- /dev/null
+++ b/resources/js/Components/UniversalDataDisplay.vue
@@ -0,0 +1,208 @@
+<template>
+  <div v-if="hasData" class="universal-display space-y-6">
+    <!-- Optional Image Carousel Section -->
+    <OneImageCarousel v-if="hasImages" :dataPoints="parsedPhotos" @on-image-click="handleImageClick" />
+    
+    <div v-for="section in sections" :key="section.key" class="border rounded p-4 bg-gray-50">
+      <h2 class="text-xl font-bold mb-2">{{ section.title || 'Section' }}</h2>
+      
+      <!-- For 311 Cases: Use EnrichWithApi if source_city is Boston -->
+      <EnrichWithApi 
+        v-if="section.key==='three_one_one_case_data' && section.content?.source_city!='Cambridge' && section.content?.case_enquiry_id"
+        :case-data="section.content" :live-data="data.live_details"
+      />
+      
+      <!-- Print each key/value pair -->
+      <ul>
+        <li v-for="(value, key) in section.content" :key="key" class="mb-1">
+          <div v-if="isPhotoField(key, value)">
+            <strong>{{ formatLabel(key) }}:</strong>
+            <div v-if="Array.isArray(value)">
+              <img v-for="(img, i) in value" :src="img" :key="i" class="max-w-xs mb-1" alt="photo" />
+            </div>
+            <div v-else>
+              <img :src="value" alt="photo" class="max-w-xs mb-1" />
+            </div>
+          </div>
+          <div v-else>
+            <strong>{{ formatLabel(key) }}:</strong>
+            <span>{{ formatValue(key, value) }}</span>
+          </div>
+        </li>
+      </ul>
+      
+      <!-- For Food Inspections, show nested violation summary if present -->
+      <div v-if="section.key==='food_inspection_data' && section.content.violation_summary">
+        <h3 class="mt-4 font-semibold">Violation History:</h3>
+        <div v-for="(summary, idx) in section.content.violation_summary" :key="idx" class="border-t pt-2">
+          <p><strong>{{ formatLabel('violdesc') }}:</strong> {{ summary.violdesc || 'N/A' }}</p>
+          <p><strong>Total Records:</strong> {{ summary.entries?.length || 0 }}</p>
+          <ul class="pl-4">
+            <li v-for="(entry, i) in summary.entries" :key="i">
+              <span><strong>Date:</strong> {{ formatValue('alcivartech_date', entry.alcivartech_date) }}</span>
+              <span v-if="entry.viol_status"><strong> - Status:</strong> {{ entry.viol_status }}</span>
+              <span v-if="entry.comments"><strong> - Comments:</strong> {{ entry.comments }}</span>
+            </li>
+          </ul>
+        </div>
+      </div>
+    </div>
+    
+    <!-- Optionally list top-level fields not contained in sub-objects -->
+    <div class="border rounded p-4 bg-gray-100">
+      <h2 class="text-xl font-bold mb-2">General Info</h2>
+      <ul>
+        <li v-if="data.alcivartech_type"><strong>Type:</strong> {{ data.alcivartech_type }}</li>
+        <li v-if="data.alcivartech_date"><strong>Date:</strong> {{ formatValue('alcivartech_date', data.alcivartech_date) }}</li>
+        <li v-if="data.latitude"><strong>Latitude:</strong> {{ data.latitude }}</li>
+        <li v-if="data.longitude"><strong>Longitude:</strong> {{ data.longitude }}</li>
+      </ul>
+    </div>
+  </div>
+  <div v-else class="p-4 text-gray-600">
+    <p>No data available.</p>
+  </div>
+</template>
+
+<script setup>
+import OneImageCarousel from './OneImageCarousel.vue';
+import EnrichWithApi from './EnrichWithApi.vue';
+import { ref, computed } from 'vue';
+import axios from 'axios';
+
+const props = defineProps({
+  data: {
+    type: Object,
+    required: false
+  },
+  language_codes: {
+    type: Array,
+    default: () => ['en-US']
+  }
+});
+
+const hasData = computed(() => {
+  return props.data && typeof props.data === 'object' && Object.keys(props.data).length > 0;
+});
+
+// Mapping from sub-object key to section header title.
+const sectionTitles = {
+  crime_data: 'Crime Data',
+  three_one_one_case_data: '311 Case',
+  property_violation_data: 'Property Violation',
+  construction_off_hour_data: 'Construction Off Hour',
+  building_permit_data: 'Building Permit',
+  food_inspection_data: 'Food Inspection'
+};
+
+// Helper: returns true if object has at least one property with a non-empty value.
+function hasNonEmptyData(obj) {
+  return Object.values(obj).some(value => {
+    if (value === null || value === undefined) return false;
+    if (typeof value === 'string' && value.trim() === '') return false;
+    if (Array.isArray(value) && value.length === 0) return false;
+    // If object, check its own keys recursively (optional)
+    if (typeof value === 'object' && !Array.isArray(value)) {
+      return Object.keys(value).length > 0;
+    }
+    return true;
+  });
+}
+
+// Build an array of sections only if props.data exists and has non-empty fields.
+const sections = computed(() => {
+  if (!hasData.value) return [];
+  const subs = [];
+  for (const key in sectionTitles) {
+    if (props.data[key] && typeof props.data[key] === 'object') {
+      const content = props.data[key];
+      // Only include section if at least one field has data.
+      if (hasNonEmptyData(content)) {
+        subs.push({ key, title: sectionTitles[key], content });
+      }
+    }
+  }
+  return subs;
+});
+
+const isFetchingLive = ref(false);
+
+// Robust live fetch—even if errors occur, error handling is done.
+async function fetchLiveCaseData(caseId) {
+  if (!caseId) return;
+  isFetchingLive.value = true;
+  try {
+    const response = await axios.get(`/api/311-case/live/${caseId}`);
+    if (response.data && response.data.data && Array.isArray(response.data.data) && response.data.data.length > 0) {
+      // Find and update the section for three_one_one_case_data
+      const section = sections.value.find(s => s.key === 'three_one_one_case_data');
+      if (section) {
+        section.content.live_details = response.data.data[0];
+      }
+    }
+  } catch (error) {
+    console.error('Live data fetch error for case ID', caseId, error);
+  } finally {
+    isFetchingLive.value = false;
+  }
+}
+
+// Helpers to format keys and values.
+function formatLabel(key) {
+  // Capitalize first letter and replace underscores.
+  if (!key) return 'N/A';
+  return key.replace(/_/g, ' ').replace(/\b\w/g, char => char.toUpperCase());
+}
+
+function formatValue(key, value) {
+  if (value === undefined || value === null || value === '') return 'N/A';
+  // If key suggests a date, try to format it.
+  if (key.toLowerCase().includes('date') || key.toLowerCase().includes('dt')) {
+    const d = new Date(value);
+    if (!isNaN(d.getTime())) return d.toLocaleString();
+  }
+  return value;
+}
+
+// Check for photo fields or image URLs robustly.
+function isPhotoField(key, value) {
+  if (!key || !value) return false;
+  const lower = key.toLowerCase();
+  if (lower.includes('photo') || lower.includes('image')) return true;
+  if (typeof value === 'string' && (value.endsWith('.jpg') || value.endsWith('.jpeg') || value.endsWith('.png') || value.endsWith('.gif'))) return true;
+  return false;
+}
+
+// New: parsedPhotos computed property extracting closed_photo/submitted_photo from top-level data.
+const parsedPhotos = computed(() => {
+  const photos = [];
+  if (props.data?.closed_photo) {
+    props.data.closed_photo.split('|').forEach(url => {
+      if (url.trim()) {
+        photos.push({ info: { photo: url.trim(), type: props.data.alcivartech_type } });
+      }
+    });
+  }
+  if (props.data?.submitted_photo) {
+    props.data.submitted_photo.split('|').forEach(url => {
+      if (url.trim()) {
+        photos.push({ info: { photo: url.trim(), type: props.data.alcivartech_type } });
+      }
+    });
+  }
+  return photos;
+});
+
+const hasImages = computed(() => parsedPhotos.value.length > 0);
+
+function handleImageClick(photo) {
+  // Emit or handle the image click event
+  console.log('Image clicked in UniversalDataDisplay:', photo);
+}
+</script>
+
+<style scoped>
+.universal-display {
+  font-size: 0.9rem;
+}
+</style>
diff --git a/resources/js/Pages/Auth/Login.vue b/resources/js/Pages/Auth/Login.vue
index d1d878d..40f3998 100644
--- a/resources/js/Pages/Auth/Login.vue
+++ b/resources/js/Pages/Auth/Login.vue
@@ -1,6 +1,6 @@
 <script setup>
 import Checkbox from '@/Components/Checkbox.vue';
-import GuestLayout from '@/Layouts/GuestLayout.vue';
+import PageTemplate from '@/Components/PageTemplate.vue';
 import InputError from '@/Components/InputError.vue';
 import InputLabel from '@/Components/InputLabel.vue';
 import PrimaryButton from '@/Components/PrimaryButton.vue';
@@ -30,7 +30,7 @@ const submit = () => {
 </script>
 
 <template>
-    <GuestLayout>
+    <PageTemplate>
         <Head title="Log in" />
 
         <div v-if="status" class="mb-4 font-medium text-sm text-green-600">
@@ -102,5 +102,5 @@ const submit = () => {
      </a>
      </div>
         </section>
-    </GuestLayout>
+    </PageTemplate>
 </template>
diff --git a/resources/js/Pages/Auth/Register.vue b/resources/js/Pages/Auth/Register.vue
index c61eea6..5065a1c 100644
--- a/resources/js/Pages/Auth/Register.vue
+++ b/resources/js/Pages/Auth/Register.vue
@@ -1,5 +1,5 @@
 <script setup>
-import GuestLayout from '@/Layouts/GuestLayout.vue';
+import PageTemplate from '@/Components/PageTemplate.vue';
 import InputError from '@/Components/InputError.vue';
 import InputLabel from '@/Components/InputLabel.vue';
 import PrimaryButton from '@/Components/PrimaryButton.vue';
@@ -25,7 +25,7 @@ const submit = () => {
 </script>
 
 <template>
-    <GuestLayout>
+    <PageTemplate>
         <Head title="Register" />
         <section class="lg:p-20">
         <form @submit.prevent="submit">
@@ -111,5 +111,5 @@ const submit = () => {
         </a>
      </div>
         </section>
-    </GuestLayout>
+    </PageTemplate>
 </template>
diff --git a/resources/js/Pages/CombinedDataMap.vue b/resources/js/Pages/CombinedDataMap.vue
new file mode 100644
index 0000000..0d05c28
--- /dev/null
+++ b/resources/js/Pages/CombinedDataMap.vue
@@ -0,0 +1,36 @@
+<template>
+  <PageTemplate>
+    <Head>
+      <title>Combined Data Map</title>
+    </Head>
+    <SubscriptionBanner />
+    <MapToolbar />
+    <CombinedDataMapComponent
+      :model-mapping-prop="modelMapping"
+      :initial-data-type-prop="initialDataType"
+      :initial-data-prop="initialData"
+      :initial-filters-prop="initialFilters"
+      :all-data-type-details-prop="allDataTypeDetails"
+    />
+  </PageTemplate>
+</template>
+
+<script setup>
+import CombinedDataMapComponent from '@/Components/CombinedDataMapComponent.vue';
+import PageTemplate from '@/Components/PageTemplate.vue';
+import MapToolbar from '@/Components/MapToolbar.vue'; // Import the toolbar
+import SubscriptionBanner from '@/Components/SubscriptionBanner.vue'; // Import the banner
+import { Head } from '@inertiajs/vue3';
+
+const props = defineProps({
+  modelMapping: Object, // The mapping from DataMapController
+  initialDataType: String, // The first data type to show
+  initialData: Array, // Data for the initialDataType
+  initialFilters: Object, // Filters for the initialDataType
+  allDataTypeDetails: Object, // Object keyed by dataType, containing { dateField, externalIdField, filterFieldsDescription, modelNameForHumans }
+});
+</script>
+
+<style scoped>
+/* Styles for the page if any */
+</style>
diff --git a/resources/js/Pages/DataMap.vue b/resources/js/Pages/DataMap.vue
new file mode 100644
index 0000000..864a5f9
--- /dev/null
+++ b/resources/js/Pages/DataMap.vue
@@ -0,0 +1,51 @@
+<template>
+  <PageTemplate>
+    <Head>
+      <title>{{ title }}</title>
+    </Head>
+    <SubscriptionBanner />
+    <MapToolbar />
+    <DataMapComponent
+      :initial-data-prop="initialData"
+      :page-filters-prop="filters"
+      :data-type-prop="dataType"
+      :date-field-prop="dateField"
+      :external-id-field-prop="externalIdField"
+      :filter-fields-description-prop="filterFieldsDescription"
+    />
+  </PageTemplate>
+</template>
+
+<script setup>
+import DataMapComponent from '@/Components/DataMapComponent.vue';
+import PageTemplate from '@/Components/PageTemplate.vue';
+import MapToolbar from '@/Components/MapToolbar.vue'; // Import the toolbar
+import SubscriptionBanner from '@/Components/SubscriptionBanner.vue'; // Import the banner
+import { Head, usePage } from '@inertiajs/vue3';
+import { computed } from 'vue';
+
+const props = defineProps({
+  initialData: Array,
+  filters: Object, // Filters from URL query params or controller
+  dataType: String,
+  dateField: String,
+  externalIdField: String,
+  filterFieldsDescription: [String, Array, Object], // Can be JSON string or pre-parsed
+});
+
+const page = usePage();
+
+const title = computed(() => {
+  const dt = props.dataType || page.props.dataType;
+  if (dt) {
+    // Capitalize and replace underscores for a nicer title
+    const formattedDataType = dt.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
+    return `${formattedDataType} Map`;
+  }
+  return 'Data Map';
+});
+</script>
+
+<style scoped>
+/* Styles for the page if any */
+</style>
diff --git a/resources/js/Pages/DataMetrics.vue b/resources/js/Pages/DataMetrics.vue
new file mode 100644
index 0000000..0db0883
--- /dev/null
+++ b/resources/js/Pages/DataMetrics.vue
@@ -0,0 +1,147 @@
+<template>
+    <PageTemplate>
+        <Head title="Data Metrics & Coverage" />
+
+        <div class="container mx-auto px-2 sm:px-4 py-8">
+            <h1 class="text-3xl sm:text-4xl font-bold text-center text-gray-800 mb-3 sm:mb-4">Our Data Universe</h1>
+            <p class="text-center text-gray-600 mb-1 sm:mb-2 px-4">
+                Explore the depth and breadth of data available on our platform.
+            </p>
+            <p class="text-center text-sm text-gray-500 mb-8 sm:mb-10">
+                Last updated: {{ new Date(lastUpdated).toLocaleString() }}
+            </p>
+
+            <div v-if="metricsData && metricsData.length > 0" class="space-y-10 sm:space-y-12">
+                <div v-for="(data, index) in metricsData" :key="index"
+                    class="bg-white p-4 sm:p-6 rounded-xl shadow-xl hover:shadow-2xl transition-shadow duration-300">
+                    <h2 class="text-2xl sm:text-3xl font-semibold text-blue-700 mb-4 sm:mb-6 border-b-2 border-blue-200 pb-2">
+                        {{ data.modelName }}
+                    </h2>
+
+                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-6">
+                        <MetricCard title="Total Records" :value="formatNumber(data.totalRecords)" icon="database" />
+                        <MetricCard v-if="data.minDate && data.minDate !== 'Error'" title="Oldest Record" :value="formatDate(data.minDate)" icon="calendar-alt" />
+                        <MetricCard v-if="data.maxDate && data.maxDate !== 'Error'" title="Newest Record" :value="formatDate(data.maxDate)" icon="calendar-check" />
+                        <MetricCard v-if="data.recordsLast30Days !== undefined" title="Last 30 Days" :value="formatNumber(data.recordsLast30Days)" icon="calendar-day" />
+                        <MetricCard v-if="data.recordsLast90Days !== undefined" title="Last 90 Days" :value="formatNumber(data.recordsLast90Days)" icon="calendar-week" />
+                        <MetricCard v-if="data.recordsLast1Year !== undefined" title="Last Year" :value="formatNumber(data.recordsLast1Year)" icon="calendar" />
+                    </div>
+
+                    <!-- Specific Metrics -->
+                    <div v-if="hasSpecificMetrics(data)" class="mt-6 sm:mt-8 pt-4 sm:pt-6 border-t border-gray-200">
+                        <h3 class="text-xl sm:text-2xl font-medium text-gray-700 mb-3 sm:mb-4">Specific Insights:</h3>
+                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
+                            <!-- Crime Data Specifics -->
+                            <div v-if="data.modelName === 'Crime Data'" class="space-y-4 sm:space-y-6">
+                                <BarChartCard title="Top Offense Groups" :chart-data="formatChartData(data.offenseGroupDistribution, 'offense_description', 'total')" />
+                                <MetricCard title="Shooting Incidents Reported" :value="formatNumber(data.shootingIncidents)" icon="crosshairs" />
+                            </div>
+
+                            <!-- 311 Cases Specifics -->
+                            <div v-if="data.modelName === 'Three One One Case'" class="space-y-4 sm:space-y-6">
+                                <BarChartCard title="Case Status Distribution" :chart-data="formatChartData(data.caseStatusDistribution, 'case_status', 'total')" />
+                                <MetricCard v-if="data.averageClosureTimeHours" title="Avg. Closure Time" :value="`${data.averageClosureTimeHours} hours`" icon="hourglass-half" />
+                            </div>
+
+                            <!-- Food Inspections Specifics -->
+                            <div v-if="data.modelName === 'Food Inspection'" class="space-y-4 sm:space-y-6">
+                                <BarChartCard title="Inspection Results" :chart-data="formatChartData(data.resultDistribution, 'result', 'total')" />
+                                <BarChartCard title="Violation Levels" :chart-data="formatChartData(data.violationLevelDistribution, 'viol_level', 'total')" />
+                            </div>
+
+                            <!-- Property Violations Specifics -->
+                            <div v-if="data.modelName === 'Property Violation'" class="space-y-4 sm:space-y-6">
+                                <BarChartCard title="Violation Status" :chart-data="formatChartData(data.statusDistribution, 'status', 'total')" />
+                                <ListCard title="Top Violation Types" :items="formatListItems(data.topViolationCodes, 'code', 'description', 'total')" />
+                            </div>
+
+                            <!-- Building Permits Specifics -->
+                            <div v-if="data.modelName === 'Building Permit'" class="space-y-4 sm:space-y-6">
+                                <BarChartCard title="Work Types" :chart-data="formatChartData(data.workTypeDistribution, 'worktype', 'total')" />
+                                <BarChartCard title="Permit Status" :chart-data="formatChartData(data.permitStatusDistribution, 'status', 'total')" />
+                                <MetricCard title="Total Declared Valuation" :value="formatCurrency(data.totalDeclaredValuation)" icon="dollar-sign" />
+                            </div>
+                        </div>
+                    </div>
+                     <div v-else class="mt-6 sm:mt-8 pt-4 sm:pt-6 border-t border-gray-200">
+                        <p class="text-gray-500 italic">No specific insights available for this data type yet.</p>
+                    </div>
+                </div>
+            </div>
+            <div v-else class="text-center py-10">
+                <p class="text-xl text-gray-500">No metrics data available at the moment. Please check back later.</p>
+            </div>
+        </div>
+    </PageTemplate>
+</template>
+
+<script setup>
+import PageTemplate from '@/Components/PageTemplate.vue';
+import { Head } from '@inertiajs/vue3';
+import { defineAsyncComponent, computed } from 'vue';
+
+const MetricCard = defineAsyncComponent(() => import('@/Components/Metrics/MetricCard.vue'));
+const BarChartCard = defineAsyncComponent(() => import('@/Components/Metrics/BarChartCard.vue'));
+const ListCard = defineAsyncComponent(() => import('@/Components/Metrics/ListCard.vue'));
+
+
+const props = defineProps({
+    metricsData: Array,
+    lastUpdated: String,
+});
+
+const formatNumber = (num) => {
+    if (num === null || num === undefined) return 'N/A';
+    return num.toLocaleString();
+};
+
+const formatCurrency = (num) => {
+    if (num === null || num === undefined) return 'N/A';
+    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);
+};
+
+const formatDate = (dateString) => {
+    if (!dateString) return 'N/A';
+    return new Date(dateString).toLocaleDateString(undefined, { year: 'numeric', month: 'long', day: 'numeric' });
+};
+
+const formatChartData = (dataArray, labelKey, valueKey) => {
+    if (!dataArray || dataArray.length === 0) return { labels: [], datasets: [{ data: [] }] };
+    const backgroundColors = [
+        '#4A90E2', '#50E3C2', '#F5A623', '#BD10E0', '#9013FE', 
+        '#4A4A4A', '#D0021B', '#F8E71C', '#7ED321', '#B8E986',
+        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
+        '#FF9F40', '#C9CBCF', '#77DD77', '#FFB347', '#836953'
+    ];
+    return {
+        labels: dataArray.map(item => item[labelKey] || 'Unknown'),
+        datasets: [{
+            label: 'Count',
+            backgroundColor: dataArray.map((_, i) => backgroundColors[i % backgroundColors.length]), // Cycle through colors
+            data: dataArray.map(item => item[valueKey])
+        }]
+    };
+};
+
+const formatListItems = (dataArray, primaryKey, secondaryKey, valueKey) => {
+    if (!dataArray || dataArray.length === 0) return [];
+    return dataArray.map(item => ({
+        primary: item[primaryKey] || 'Unknown',
+        secondary: item[secondaryKey] || '',
+        value: formatNumber(item[valueKey])
+    }));
+};
+
+const hasSpecificMetrics = (data) => {
+    return (data.modelName === 'Crime Data' && (data.offenseGroupDistribution || data.shootingIncidents !== undefined)) ||
+           (data.modelName === 'Three One One Case' && (data.caseStatusDistribution || data.averageClosureTimeHours !== undefined)) ||
+           (data.modelName === 'Food Inspection' && (data.resultDistribution || data.violationLevelDistribution)) ||
+           (data.modelName === 'Property Violation' && (data.statusDistribution || data.topViolationCodes)) ||
+           (data.modelName === 'Building Permit' && (data.workTypeDistribution || data.permitStatusDistribution || data.totalDeclaredValuation !== undefined));
+};
+
+</script>
+
+<style scoped>
+/* Additional styling if needed */
+</style>
diff --git a/resources/js/Pages/Profile/Edit.vue b/resources/js/Pages/Profile/Edit.vue
index 95be366..ba6c551 100644
--- a/resources/js/Pages/Profile/Edit.vue
+++ b/resources/js/Pages/Profile/Edit.vue
@@ -1,25 +1,108 @@
 <script setup>
-import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
+import PageTemplate from '@/Components/PageTemplate.vue';
 import DeleteUserForm from './Partials/DeleteUserForm.vue';
 import UpdatePasswordForm from './Partials/UpdatePasswordForm.vue';
 import UpdateProfileInformationForm from './Partials/UpdateProfileInformationForm.vue';
-import UpdateRole from './Partials/UpdateRole.vue';
-import { Head } from '@inertiajs/vue3';
-
-defineProps({
-    mustVerifyEmail: {
-        type: Boolean,
-    },
-    status: {
-        type: String,
-    },
+import { Head, Link } from '@inertiajs/vue3';
+import { computed, inject, ref } from 'vue';
+
+const props = defineProps({
+    mustVerifyEmail: Boolean,
+    status: String,
+    // currentPlanKey: String, // Removed, planKey is now per subscription
+    subscriptionsList: Array, // Changed from subscriptionDetails: Object
+    socialLoginDetails: Object,
 });
+
+const translations = inject('translations');
+const language_codes = ref(['en-US']);
+
+const getSingleLanguageCode = computed(() => {
+    return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode[language_codes.value[0]]) ? language_codes.value[0] : 'en-US';
+});
+
+// Helper to get display name for a plan key
+const getPlanDisplayName = (planKey, defaultName) => {
+    const langCode = getSingleLanguageCode.value;
+    if (planKey === 'basic') return translations.LabelsByLanguageCode[langCode]?.basicPlanTitle || defaultName;
+    if (planKey === 'pro') return translations.LabelsByLanguageCode[langCode]?.proPlanTitle || defaultName;
+    if (planKey === 'free') return translations.LabelsByLanguageCode[langCode]?.freeTierTitle || defaultName;
+    return defaultName;
+};
+
+// Helper to get formatted status string
+const getFormattedSubscriptionStatus = (subscription) => {
+    const langCode = getSingleLanguageCode.value;
+    if (!subscription) return '';
+    const status = subscription.status;
+
+    if (subscription.isOnTrial) {
+        return translations.LabelsByLanguageCode[langCode]?.statusTrialing || 'Trialing';
+    }
+    if (subscription.isCancelled && subscription.isOnGracePeriod) {
+        return translations.LabelsByLanguageCode[langCode]?.statusCanceledOnGrace(subscription.endsAt) || `Canceled (ends ${subscription.endsAt})`;
+    }
+    if (subscription.isCancelled) {
+         return translations.LabelsByLanguageCode[langCode]?.statusCanceled || 'Canceled';
+    }
+    if (status === 'active') {
+        return translations.LabelsByLanguageCode[langCode]?.statusActive || 'Active';
+    }
+    if (status === 'past_due') {
+        return translations.LabelsByLanguageCode[langCode]?.statusPastDue || 'Past Due';
+    }
+    if (status === 'incomplete') {
+        return translations.LabelsByLanguageCode[langCode]?.statusIncomplete || 'Incomplete';
+    }
+    if (status === 'free') {
+        return translations.LabelsByLanguageCode[langCode]?.statusFree || 'Free Tier';
+    }
+    return status; // Fallback to raw status
+};
+
+
+// Add translations for this page (ensure they are loaded globally or as needed)
+if (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode['en-US']) {
+    translations.LabelsByLanguageCode['en-US'] = {
+        ...translations.LabelsByLanguageCode['en-US'],
+        profileAccountInfoTitle: 'Account Information',
+        profileSocialLoginLabel: 'Social Login',
+        profileNoSocialLogin: 'Not linked to a social account.',
+        profileSubscriptionsTitle: 'Your Subscriptions', // Pluralized
+        profileCurrentPlanLabel: 'Plan', // Generic label for plan name
+        profileSubscriptionNameLabel: 'Subscription Type',
+        profileSubscriptionStatusLabel: 'Status',
+        profileRenewsOnLabel: 'Renews on',
+        profileEndsOnLabel: 'Ends on',
+        profileTrialEndsOnLabel: 'Trial ends on',
+        profileManageBillingButton: 'Manage Billing & Subscriptions', // Pluralized
+        profileViewPlansButton: 'View Subscription Plans',
+
+        statusActive: 'Active',
+        statusTrialing: 'Trialing',
+        statusPastDue: 'Past Due',
+        statusCanceled: 'Canceled',
+        statusCanceledOnGrace: (endDate) => `Canceled (access until ${endDate})`,
+        statusIncomplete: 'Incomplete',
+        statusFree: 'Free Tier',
+
+        freeTierTitle: 'Registered User Features (Free)',
+        basicPlanTitle: 'Resident Awareness',
+        proPlanTitle: 'Pro Insights',
+    };
+}
+
+const hasActivePaidSubscription = computed(() => {
+    if (!props.subscriptionsList) return false;
+    return props.subscriptionsList.some(sub => sub.isActive || sub.isOnGracePeriod || sub.status === 'past_due' || sub.status === 'incomplete');
+});
+
 </script>
 
 <template>
     <Head title="Profile" />
 
-    <AuthenticatedLayout>
+    <PageTemplate>
         <template #header>
             <h2 class="font-semibold text-xl text-gray-800 leading-tight">Profile</h2>
         </template>
@@ -34,18 +117,93 @@ defineProps({
                     />
                 </div>
 
+                <!-- Account Information Section (remains the same) -->
                 <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
-                    <UpdatePasswordForm class="max-w-xl" />
+                    <section>
+                        <header>
+                            <h2 class="text-lg font-medium text-gray-900">
+                                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileAccountInfoTitle || 'Account Information' }}
+                            </h2>
+                        </header>
+                        <div class="mt-4 space-y-3">
+                            <div>
+                                <span class="font-medium text-gray-700">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileSocialLoginLabel || 'Social Login' }}:</span>
+                                <template v-if="socialLoginDetails && socialLoginDetails.providerName">
+                                    <span class="ml-2 text-gray-600 capitalize">{{ socialLoginDetails.providerName }}</span>
+                                    <img v-if="socialLoginDetails.providerAvatar" :src="socialLoginDetails.providerAvatar" alt="Avatar" class="inline-block h-8 w-8 rounded-full ml-2"/>
+                                </template>
+                                <span v-else class="ml-2 text-gray-600">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileNoSocialLogin || 'Not linked to a social account.' }}</span>
+                            </div>
+                        </div>
+                    </section>
+                </div>
+
+                <!-- Subscription Information Section -->
+                <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
+                    <section>
+                        <header>
+                            <h2 class="text-lg font-medium text-gray-900 ">
+                                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileSubscriptionsTitle || 'Your Subscriptions' }}
+                            </h2>
+                        </header>
+
+                        <div v-if="subscriptionsList && subscriptionsList.length > 0">
+                            <div v-for="(subscription, index) in subscriptionsList" :key="index" class="mt-4 pt-4 border-t first:border-t-0 first:pt-0">
+                                <div class="space-y-2">
+                                    <div>
+                                        <span class="font-medium text-gray-700">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileSubscriptionNameLabel || 'Subscription Type' }}:</span>
+                                        <span class="ml-2 text-gray-600 capitalize">{{ subscription.name.replace('_', ' ') }}</span>
+                                    </div>
+                                    <div>
+                                        <span class="font-medium text-gray-700">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileCurrentPlanLabel || 'Plan' }}:</span>
+                                        <span class="ml-2 text-gray-600">{{ getPlanDisplayName(subscription.planKey, subscription.planName) }}</span>
+                                    </div>
+                                    <div>
+                                        <span class="font-medium text-gray-700">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileSubscriptionStatusLabel || 'Status' }}:</span>
+                                        <span class="ml-2 text-gray-600">{{ getFormattedSubscriptionStatus(subscription) }}</span>
+                                    </div>
+                                    <div v-if="subscription.isOnTrial && subscription.trialEndsAt">
+                                        <span class="font-medium text-gray-700">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileTrialEndsOnLabel || 'Trial ends on' }}:</span>
+                                        <span class="ml-2 text-gray-600">{{ subscription.trialEndsAt }}</span>
+                                    </div>
+                                    <div v-if="subscription.isActive && !subscription.isOnTrial && !subscription.isCancelled && subscription.currentPeriodEnd">
+                                        <span class="font-medium text-gray-700">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileRenewsOnLabel || 'Renews on' }}:</span>
+                                        <span class="ml-2 text-gray-600">{{ subscription.currentPeriodEnd }}</span>
+                                    </div>
+                                    <!-- EndsAt for cancelled on grace period is handled by getFormattedSubscriptionStatus -->
+                                </div>
+                            </div>
+                        </div>
+                        <div v-else class="mt-4 text-gray-600">
+                            No subscription details found.
+                        </div>
+
+                        <div class="mt-6 space-y-4 md:space-y-0 md:flex md:space-x-4">
+                            <Link
+                                v-if="hasActivePaidSubscription"
+                                :href="route('billing')"
+                                class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-blue-500 active:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition ease-in-out duration-150"
+                            >
+                                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileManageBillingButton || 'Manage Billing & Subscriptions' }}
+                            </Link>
+                            <Link
+                                :href="route('subscription.index')"
+                                class="inline-flex items-center px-4 py-2 bg-gray-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-500 active:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition ease-in-out duration-150"
+                            >
+                                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.profileViewPlansButton || 'View Subscription Plans' }}
+                            </Link>
+                        </div>
+                    </section>
                 </div>
 
                 <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
-                    <UpdateRole class="max-w-xl" />
+                    <UpdatePasswordForm class="max-w-xl" :has-provider="!!(socialLoginDetails && socialLoginDetails.providerName)" />
                 </div>
 
                 <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
-                    <DeleteUserForm class="max-w-xl" />
+                    <DeleteUserForm class="max-w-xl" :has-provider="!!(socialLoginDetails && socialLoginDetails.providerName)" />
                 </div>
             </div>
         </div>
-    </AuthenticatedLayout>
+    </PageTemplate>
 </template>
diff --git a/resources/js/Pages/RadialMap.vue b/resources/js/Pages/RadialMap.vue
index 469f594..5a2647a 100644
--- a/resources/js/Pages/RadialMap.vue
+++ b/resources/js/Pages/RadialMap.vue
@@ -7,632 +7,493 @@
     <SubscriptionBanner />
 
     <div class="before-map">
-    <!-- Page Title -->
-    <h1 class="text-2xl font-bold text-gray-800 text-center my-4">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.pageTitle }}</h1>
-
-    <!--Language buttons navbar to include or remove lanagueg codes from the array          $languageCodes = [
-            'es-MX', 'zh-CN', 'ht-HT', 'vi-VN', 'pt-BR',
-        ];
-        -->
-    <div class="flex flex-wrap justify-center">
-      <button
-        v-for="code in Object.keys(languageButtonLabels)"
-        :key="code"
-        @click="toggleLanguageCode(code)"
-        class="px-4 py-2 border-white border"
-        :class="{
-          'bg-blue-500 text-white': language_codes.includes(code),
-          'bg-gray-200 hover:bg-gray-300': !language_codes.includes(code),
-        }"
-      >
-        {{ language_codes.includes(code) ? languageButtonLabels[code].deselect : languageButtonLabels[code].select }}
-      </button>
+      <h1 class="text-2xl font-bold text-gray-800 text-center my-4">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.pageTitle }}
+
+      </h1>
+
+      <LanguageSelector
+        :languageButtonLabels="languageButtonLabels"
+        :currentLanguageCodes="language_codes"
+        @language-code-selected="handleLanguageCodeSelected"
+      />
+      <FoodInspectionTeaser
+        :language_codes="language_codes"
+        :dataPoints="dataPoints"
+        :isAuthenticated="isAuthenticated"
+        />
+
+      <CenterManagement
+        :centralLocation="centralLocation"
+        :tempNewCenterForDisplay="tempNewMapClickCoords"
+        :isCenterSelectionActive="centerSelectionActive"
+        :language_codes="language_codes"
+        :translations="translations"
+        :singleLanguageCode="getSingleLanguageCode"
+        @toggle-center-selection-mode="handleToggleCenterSelection"
+        @address-search-coordinates-selected="handleAddressSearchUpdate"
+        @trigger-form-submit="submitNewCenter"
+        @load-saved-location="handleLoadLocation"
+      />
     </div>
 
-
-    <AddressSearch @address-selected="updateCenterCoordinates" :language_codes="language_codes" />
-
-    <form @submit.prevent="submitNewCenter" class="">
-      <!-- Selected Center Coordinates display -->
-      <div v-if="newCenter" class="p-4 bg-gray-100  shadow text-center">
-        <p class="font-bold text-gray-800">Selected Center Coordinates:</p>
-        <p class="text-gray-700">{{ newCenter.lat }}, {{ newCenter.lng }}</p>
-      </div>
-      <!--
-      <div v-else class="p-4 bg-gray-100  shadow text-center">
-        <p class="font-bold text-gray-800">Current Center Coordinates:</p>
-        <p class="text-gray-700">{{ centralLocation.latitude }}, {{ centralLocation.longitude }}</p>
-      </div>
-
-      -->
-
-
-    </form>
-
-    <!-- Button container -->
-    <div class="flex space-x-4">
-    <!-- Choose New Center button -->
-    <button
-        type="button"
-        @click="toggleCenterSelection"
-        class="px-4 py-2 text-white bg-blue-500  shadow-lg disabled:bg-gray-400 hover:bg-blue-600 transition-colors w-1/2 m-auto"
-      >
-        {{ centerSelectionActive ? translations.localizationLabelsByLanguageCode[getSingleLanguageCode].cancelText : translations.localizationLabelsByLanguageCode[getSingleLanguageCode].chooseNewCenter }}
-      </button>
-    </div>
+    
+    <div class="map-controls-container">
+      <MapDisplay
+        ref="mapDisplayRef"
+        :mapCenterCoordinates="mapCenter"
+        :dataPointsToDisplay="dataPoints"
+        :isCenterSelectionModeActive="centerSelectionActive"
+        :tempNewMarkerPlacementCoords="tempNewMapClickCoords"
+        :mapIsLoading="mapLoading"
+        :shouldClearTempMarker="cancelNewMarker"
+        @map-coordinates-selected-for-new-center="handleMapClickForNewCenter"
+        @marker-data-point-clicked="handleMarkerClick"
+        @map-initialized-internal="isMapInitialized = true"
+      />
+
+        <MapFiltersControl
+            :initialFilterTypeState="filters"
+            :initialSelectedDates="selectedDates"
+            :minDateForFilter="minDate"
+            :maxDateForFilter="maxDate"
+            :translations="translations"
+            :singleLanguageCode="getSingleLanguageCode"
+            @filters-updated="handleFiltersUpdated"
+        />
   </div>
+        
+  
 
-    <div class="m-5 page-div">
-
-      
-
-    <div class="boston-map" :class="{ 'map-loading': mapLoading }">
-      <div id="map" class="h-full"></div>
-    </div>
-
-          <!-- Filter Buttons -->
-  <div class="map-controls">
-    <div class="filter-container flex justify-center">
-        <div
-          v-for="(isActive, type) in filters"
-          :key="type"
-          @click="toggleFilter(type)"
-          :class="{'active': isActive, 'inactive': !isActive, [`${type.toLowerCase().replace(/\s/g, '-').replace(/\d/g, 'a')}-filter-button`]: true,
-          //set the width based on the number of filters
-          'w-1/12': Object.keys(filters).length > 6,
-          'w-1/6': Object.keys(filters).length === 6,
-          'w-1/5': Object.keys(filters).length === 5,
-          'w-1/4': Object.keys(filters).length === 4,
-          'w-1/3': Object.keys(filters).length === 3,
-          'w-1/2': Object.keys(filters).length === 2,
-          'w-full': Object.keys(filters).length === 1}"
-
-          class="filter-button shadow-lg disabled:bg-gray-400 transition-colors text-base"
-
-        >
-          <div class="invisible filter-button-text lg:visible">{{ getDataTypeTranslation(type) }}</div>
-    </div>
-        <!-- Reload Button 
-        <button
-          @click="reloadMap"
-          class="px-4 py-2 text-white bg-red-500  shadow-lg hover:bg-red-600 transition-colors w-1/4"
-        >
-          Reload Map
-        </button> -->
+    <div class="case-details">
+      <h2 class="text-xl font-semibold text-gray-800 text-center my-4">{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.caseDetailsTitle || 'Selected Case Details' }}</h2>
+      <UniversalDataDisplay :data="selectedDataPoint" :language_codes="language_codes" />
     </div>
- 
-    <div class="date-filter-container flex flex-col w-full">
-      <div class="flex flex-wrap justify-between">
-        <button
-          v-for="(date, index) in getDates()"
-          :key="index"
-          @click="toggleDateSelection(date)"
-          :class="{
-            'bg-blue-500 text-white': selectedDates.includes(date),
-            'bg-gray-200 hover:bg-gray-300': !selectedDates.includes(date),
-          }"
-          class="px-4 py-2 shadow transition-colors w-1/5"
-        >
-          {{ new Date(date).toLocaleDateString( getSingleLanguageCode
-            , { weekday: 'short', month: 'short', day: 'numeric' }) }}
-        </button>
-        <button
-          @click="clearDateSelections"
-          class="px-4 py-2 bg-blue-500 text-white hover:bg-blue-400 transition-colors w-1/2 show-all-dates"
-        >
-          {{ translations.localizationLabelsByLanguageCode[getSingleLanguageCode].allDatesButton }}
-        </button>
-      </div>
-          <!-- check the selectedDataPoint type and display the appropriate component -->
-
-    <SaveLocation :location="centralLocation" :language_codes="language_codes"  @load-location="handleLoadLocation"  />
-
-        <ImageCarousel :dataPoints="dataPoints" @on-image-click="handleImageClick"  />
 
-    </div>
+    <ImageCarousel :dataPoints="dataPoints" @on-image-click="handleImageClick" />
 
+    <AiAssistant 
+      :context="filteredDataPoints" 
+      :language_codes="language_codes" 
+      :centralLocation="centralLocation"
+      :radius="reportRadius"
+      :currentMapLanguage="currentReportLanguage"
+    ></AiAssistant>
+    <GenericDataList :totalData="filteredDataPoints" :itemsPerPage="8" @handle-goto-marker="handleListClick" :language_codes="language_codes" />
 
-  </div>
-    
-
-
-     <div class="case-details">
-
-    <ServiceCase v-if="selectedDataPoint && selectedDataPoint.alcivartech_type === '311 Case'" :data="selectedDataPoint" :language_codes="language_codes" />
-    <Crime v-if="selectedDataPoint && selectedDataPoint.alcivartech_type === 'Crime'" :data="selectedDataPoint" :language_codes="language_codes" />
-    <BuildingPermit v-if="selectedDataPoint && selectedDataPoint.alcivartech_type === 'Building Permit'" :data="selectedDataPoint" :language_codes="language_codes" />
-    <PropertyViolation v-if="selectedDataPoint && selectedDataPoint.alcivartech_type === 'Property Violation'" :data="selectedDataPoint" :language_codes="language_codes" />
-    <OffHours v-if="selectedDataPoint && selectedDataPoint.alcivartech_type === 'Construction Off Hour'" :data="selectedDataPoint" :language_codes="language_codes" />
-    </div>
-
-      <!-- AiAssistant Component -->
-      <AiAssistant :context="filteredDataPoints" :language_codes="language_codes"></AiAssistant>
-      <GenericDataList :totalData="filteredDataPoints" :itemsPerPage="8" @handle-goto-marker="handleListClick" :language_codes="language_codes" />
-
-    <!-- Pass filteredDataPoints as context to AiAssistant -->
-    </div>
   </PageTemplate>
 </template>
 
 <script setup>
-import { ref, computed, onMounted, watch, nextTick, markRaw, inject } from 'vue';
+import { ref, computed, onMounted, watch, nextTick, inject } from 'vue';
 import axios from 'axios';
 import PageTemplate from '@/Components/PageTemplate.vue';
 import AiAssistant from '@/Components/AiAssistant.vue';
 import GenericDataList from '@/Components/GenericDataList.vue';
-import AddressSearch from '@/Components/AddressSearch.vue';
+import UniversalDataDisplay from '@/Components/UniversalDataDisplay.vue';
 import ServiceCase from '@/Components/ServiceCase.vue';
 import Crime from '@/Components/Crime.vue';
 import BuildingPermit from '@/Components/BuildingPermit.vue';
-import SaveLocation from '@/Components/SaveLocation.vue';
-import { Head, Link } from '@inertiajs/vue3';
-import { usePage } from '@inertiajs/vue3';
-import 'leaflet/dist/leaflet.css';
-import * as L from 'leaflet';
-import ImageCarousel from '@/Components/ImageCarousel.vue';
-import { data } from 'autoprefixer';
 import PropertyViolation from '@/Components/PropertyViolation.vue';
 import OffHours from '@/Components/OffHours.vue';
-import { map } from 'leaflet';
+import { Head } from '@inertiajs/vue3';
+import ImageCarousel from '@/Components/ImageCarousel.vue';
 import SubscriptionBanner from '@/Components/SubscriptionBanner.vue';
 
+import LanguageSelector from '@/Components/LanguageSelector.vue';
+import CenterManagement from '@/Components/CenterManagement.vue';
+import MapDisplay from '@/Components/MapDisplay.vue';
+import MapFiltersControl from '@/Components/MapFiltersControl.vue';
+import FoodInspection from '@/Components/FoodInspection.vue';
+import FoodInspectionTeaser from '@/Components/FoodInspectionTeaser.vue';
+import { usePage } from '@inertiajs/vue3'; // Import usePage
+
+const page = usePage(); // Get page instance
+
+const mapDisplayRef = ref(null);
+
 const filters = ref({});
-const allDataPoints = ref([]); // Store all fetched data points here
-const dataPoints = ref([]); // Store filtered data points here
+const allDataPoints = ref([]);
+const dataPoints = ref([]);
 const centralLocation = ref({
   latitude: 42.3601,
   longitude: -71.0589,
   address: 'Boston, MA',
 });
+const reportRadius = ref(0.25); // Default radius for reports, can be made dynamic
 const centerSelectionActive = ref(false);
-const centerSelected = ref(false);
-const newCenter = ref(null);
+const tempNewMapClickCoords = ref(null);
 const mapCenter = ref([centralLocation.value.latitude, centralLocation.value.longitude]);
 const cancelNewMarker = ref(false);
-const selectedDates = ref([]); // Stores selected dates
+const selectedDates = ref([]);
 const minDate = ref('');
 const maxDate = ref('');
-const dayOffset = ref(0);
-const showAllDates = ref(true);
 const selectedDataPoint = ref(null);
 const isMapInitialized = ref(false);
-// default is Boston, MA
-const currentMapViewport = ref({ center: [42.3601, -71.0589], zoom: 16 });
-
-// Leaflet map refs and setup
-const initialMap = ref(null);
-const markerCenter = ref(null);
-const newMarker = ref(null);
-const markers = ref([]);
 const mapLoading = ref(false);
 
+const isAuthenticated = computed(() => !!page.props.auth.user); // Compute isAuthenticated
+
 const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
+const translations = inject('translations');
+const language_codes = ref(['en-US']);
 
-// get auth prop
-const page = usePage();
-const isAuthenticated = page.props.auth.user;
+const aggregateFoodViolations = (dataPoints) => {
+  const foodViolations = dataPoints.filter(dp => dp.alcivartech_type === 'Food Inspection');
+  const otherDataPoints = dataPoints.filter(dp => dp.alcivartech_type !== 'Food Inspection');
 
-const language_codes = ref(['en-US']);
+  if (foodViolations.length === 0) {
+    return otherDataPoints;
+  }
 
-const translations = inject('translations');
+  const groupedByLicense = foodViolations.reduce((acc, viol) => {
+    const key = viol.licenseno;
+    if (!key) { 
+        otherDataPoints.push(viol); 
+        return acc;
+    }
+    if (!acc[key]) {
+      acc[key] = [];
+    }
+    acc[key].push(viol);
+    return acc;
+  }, {});
+
+  const aggregatedFoodViolations = Object.values(groupedByLicense).map(licenseGroup => {
+    if (licenseGroup.length === 0) return null;
+
+    // Sort by date to find the most recent record for representative data (address, name, etc.)
+    licenseGroup.sort((a, b) => new Date(b.alcivartech_date) - new Date(a.alcivartech_date));
+    const mostRecentRecord = licenseGroup[0];
+
+    // Filter for actual violations within the group (those having violdttm)
+    // Assumes violdttm indicates an actual violation record, vs. just an inspection.
+    const actualViolationEntries = licenseGroup.filter(viol => viol.violdttm);
+
+    let violationSummary = null; 
+
+    if (actualViolationEntries.length > 0) {
+      // Create a summary of all actual violations under this license
+      const violationSummaryMap = actualViolationEntries.reduce((acc, viol) => {
+        // violdesc should ideally exist if violdttm exists for a violation
+        const descKey = viol.violdesc || 'Unknown Violation Description'; 
+        if (!acc[descKey]) {
+          acc[descKey] = {
+            violdesc: descKey,
+            entries: []
+          };
+        }
+        acc[descKey].entries.push({
+          alcivartech_date: viol.alcivartech_date, // Date of the specific violation entry
+          viol_status: viol.viol_status,
+          comments: viol.comments,
+          result: viol.result, 
+          viol_level: viol.viol_level,
+          // food_violation_id: viol.food_violation_id // original ID if needed
+        });
+        return acc;
+      }, {});
+      
+      const tempViolationSummary = Object.values(violationSummaryMap).map(summaryItem => {
+          summaryItem.entries.sort((a,b) => new Date(b.alcivartech_date) - new Date(a.alcivartech_date));
+          return summaryItem;
+      });
+      tempViolationSummary.sort((a,b) => a.violdesc.localeCompare(b.violdesc));
+      violationSummary = tempViolationSummary;
+    }
 
-const goToRoute = ( route ) => {
-  window.location.href = route;
-}
+    const aggregatedPoint = {
+      ...mostRecentRecord, 
+      alcivartech_type: "Food Inspection", 
+      alcivartech_date: mostRecentRecord.alcivartech_date, 
+      _is_aggregated_food_violation: true 
+    };
 
-const getSingleLanguageCode = computed(() => {
-  return language_codes.value[0];
-});
+    if (violationSummary) {
+      aggregatedPoint.violation_summary = violationSummary;
+    }
+    // If violationSummary remains null (because actualViolationEntries was empty),
+    // the aggregatedPoint will not have the violation_summary property.
+    // The FoodInspection.vue component should then handle it as a record
+    // without a violation summary (e.g., an aggregated inspection record).
 
+    return aggregatedPoint;
+  }).filter(Boolean); 
 
-const addLanguageCode = (code) => {
-  language_codes.value.push(code);
-  fetchData();
+  return [...otherDataPoints, ...aggregatedFoodViolations];
 };
 
-const removeLanguageCode = (code) => {
-  const index = language_codes.value.indexOf(code);
-  if (index > -1) {
-    language_codes.value.splice(index, 1);
-  }
-  fetchData();
+
+const languageButtonLabels = {
+  'en-US': { select: '✓ English', deselect: '✕ English' },
+  'es-MX': { select: '✓ Español', deselect: '✕ Español' },
+  'zh-CN': { select: '✓ 中文', deselect: '✕ 中文' },
+  'ht-HT': { select: '✓ Kreyòl Ayisyen', deselect: '✕ Kreyòl Ayisyen' },
+  'vi-VN': { select: '✓ Tiếng Việt', deselect: '✕ Tiếng Việt' },
+  'pt-BR': { select: '✓ Português', deselect: '✕ Português' },
 };
 
-const toggleLanguageCode = (code) => {
+const getSingleLanguageCode = computed(() => {
+  return language_codes.value[0];
+});
+
+const currentReportLanguage = computed(() => {
+  const locale = language_codes.value[0] || 'en-US';
+  // Map to backend-compatible language codes
+  // The backend validation is: 'en,es,fr,pt,zh-CN,ht,vi,km,ar,el,it,ru,ko,ja,pl'
+  const mapping = {
+    'en-US': 'en',
+    'es-MX': 'es',
+    'zh-CN': 'zh-CN', // Already compatible
+    'ht-HT': 'ht',
+    'vi-VN': 'vi',
+    'pt-BR': 'pt',
+    // Add other mappings as needed based on your UI language_codes and backend support
+  };
+  return mapping[locale] || 'en'; // Default to 'en' if no specific mapping
+});
+
+const handleLanguageCodeSelected = (code) => {
   if (language_codes.value.includes(code)) {
-    //removeLanguageCode(code);
+    // Original logic: commented out removeLanguageCode(code);
   } else {
-    //make it the only language code
     language_codes.value = [code];
-    //only fetch data if the code is english or spanish
-    if (code === 'en-US') {
-      //fetchData();
-    }
+    // Original logic: commented out fetchData if code === 'en-US'
   }
+  // if language change should trigger data refetch, call fetchData() here
 };
 
-//make an array with lanague codes and their corresponding labels which shoudl be int he language of the user targeted, and have an add and remove label for each language code
-const languageButtonLabels = {
-  'en-US': {
-    select: '✓ English',
-    deselect: '✕ English',
-  },
-  'es-MX': {
-    select: '✓ Español',
-    deselect: '✕ Español',
-  },
-  'zh-CN': {
-    select: '✓ 中文',
-    deselect: '✕ 中文',
-  },
-  'ht-HT': {
-    select: '✓ Kreyòl Ayisyen',
-    deselect: '✕ Kreyòl Ayisyen',
-  },
-  'vi-VN': {
-    select: '✓ Tiếng Việt',
-    deselect: '✕ Tiếng Việt',
-  },
-  'pt-BR': {
-    select: '✓ Português',
-    deselect: '✕ Português',
-  },
-};
-
-// Define the icons for different types of markers
-const getDivIcon = (dataPoint) => {
-  let className = 'default-div-icon'; // Fallback class
-  let type = dataPoint.alcivartech_type;
-  let backgroundImage = '';
-
-  switch (type) {
-    case 'Crime':
-      className = 'crime-div-icon';
-      break;
-    case '311 Case':
-      className = 'case-div-icon';
-      break;
-    case 'Building Permit':
-      className = 'permit-div-icon';
-      break;
-    case 'Property Violation':
-      className = 'property-violation-div-icon';
-      break;
-    case 'Construction Off Hour':
-      className = 'construction-off-hour-div-icon';
-      break;
-    default:
-      break;
-  }
-
-  if (type === "311 Case") {
-    // Add classes and set the background image if photos are present
-    if (dataPoint?.submitted_photo) {
-      //get the first valid URL, there may be multiple separated by " | "
-      const photoURL = dataPoint.submitted_photo.split(' | ')[0];
-
-      className += ' submitted-photo';
-      backgroundImage = `background-image: url(${photoURL});`;
-    }
-    if (dataPoint?.closed_photo) {
-      const photoURL = dataPoint.closed_photo.split(' | ')[0];
-      className += ' closed-photo';
-      backgroundImage = `background-image: url(${photoURL});`;
-    }
-    if (!dataPoint?.submitted_photo && !dataPoint?.closed_photo) {
-      className += ' no-photo';
-    }
+const handleToggleCenterSelection = () => {
+  centerSelectionActive.value = !centerSelectionActive.value;
+  if (!centerSelectionActive.value) { // Selection cancelled or completed
+    tempNewMapClickCoords.value = null; 
+    cancelNewMarker.value = true; // Signal MapDisplay to clear its temp marker
+    nextTick(() => { cancelNewMarker.value = false; }); // Reset flag
+  } else {
+    cancelNewMarker.value = false;
   }
-
-  className += ' id'+ dataPoint?.id; // Add the base class
-
-  return L.divIcon({
-    className,
-    html: `<div style="${backgroundImage}"></div>`, // Apply inline background-image
-    iconSize: null,
-    popupAnchor: [15, 0],
-  });
 };
 
-
-
-const getCenterIcon = (type) => {
-  let className = 'center-div-icon'; // Fallback class
-
-  return L.divIcon({
-    className,
-    html: `<div></div>`, // You can customize this to show more data
-    iconSize: null,
-    popupAnchor: [0, -15],
-  });
+const handleMapClickForNewCenter = (latlng) => {
+    if (centerSelectionActive.value) {
+        tempNewMapClickCoords.value = { lat: latlng.lat, lng: latlng.lng }; // For display and temp marker
+        
+        centralLocation.value.latitude = latlng.lat;
+        centralLocation.value.longitude = latlng.lng;
+        centralLocation.value.address = `${latlng.lat.toFixed(3)}, ${latlng.lng.toFixed(3)}`;
+        mapCenter.value = [latlng.lat, latlng.lng];
+        
+        if (mapDisplayRef.value) mapDisplayRef.value.destroyMapAndClear();
+        fetchData().then(() => {
+            if (mapDisplayRef.value) mapDisplayRef.value.initializeNewMapAtCenter(mapCenter.value);
+        });
+        // centerSelectionActive.value = false; // Optionally auto-disable selection mode
+    }
 };
 
-
-const clearDateSelections = () => {
-  selectedDates.value = [];
-  applyFilters();
+const handleAddressSearchUpdate = (coordinates) => {
+    centralLocation.value.latitude = coordinates.lat;
+    centralLocation.value.longitude = coordinates.lng;
+    if (coordinates.address) {
+        centralLocation.value.address = coordinates.address;
+    } else {
+        centralLocation.value.address = coordinates.lat + ', ' + coordinates.lng;
+    }
+    mapCenter.value = [coordinates.lat, coordinates.lng];
+    if (mapDisplayRef.value) mapDisplayRef.value.destroyMapAndClear();
+    fetchData().then(() => {
+        if (mapDisplayRef.value) mapDisplayRef.value.initializeNewMapAtCenter([coordinates.lat, coordinates.lng], true);
+    });
 };
 
 
-const handleImageClick = (data) => {
-  selectedDataPoint.value = data;
-  // find the marker with the classname that matches id + data.info.id and open the popup
-  markers.value.forEach((marker) => {
-    console.log('marker', marker);
-    if (marker.options.icon.options.className.includes('id'+data.info.id)) {
-      marker.openPopup();
-    } 
-  });
-
-  console.log('Selected Data Point:', data);
-};
-
-const handleListClick = (data) => {
-  selectedDataPoint.value = data;
-  // find the marker with the classname that matches id + data.info.id and open the popup
-  markers.value.forEach((marker) => {
-    console.log('marker', marker);
-    if (marker.options.icon.options.className.includes('id'+data.id)) {
-      marker.openPopup();
-      //scroll to marker using class name
-      document.querySelector('.leaflet-popup-content-wrapper').scrollIntoView({ behavior: 'smooth', block: 'center' });
-    } 
-  });
 
-  console.log('Selected Data Point:', data);
+const handleLoadLocation = (location) => {
+    centralLocation.value.latitude = location.latitude;
+    centralLocation.value.longitude = location.longitude;
+    if (location.address) {
+      centralLocation.value.address = location.address;
+    } else {
+      centralLocation.value.address = location.latitude + ', ' + location.longitude;
+    }
+    mapCenter.value = [location.latitude, location.longitude];
+    if (mapDisplayRef.value) mapDisplayRef.value.destroyMapAndClear();
+    fetchData().then(() => {
+        if (mapDisplayRef.value) mapDisplayRef.value.initializeNewMapAtCenter([location.latitude, location.longitude], true);
+    });
+    // Potentially update reportRadius if location object contains a preferred radius
+    // For example: if (location.preferred_radius) reportRadius.value = location.preferred_radius;
 };
 
-//function to get the dates included in the dataPoints to create a button for each day that can be used to filter the dataPoints
-const getDates = () => {
-  //use minDate and maxDate to create an array of dates
-  const dates = [];
-  const currentDate = new Date(minDate.value);
-  const endDate = new Date(maxDate.value);
-  while (currentDate <= endDate) {
-    dates.push(new Date(currentDate).toISOString().split('T')[0]);
-    currentDate.setDate(currentDate.getDate() + 1);
-  }
-  return dates;
+const submitNewCenter = () => { // This was tied to an empty form originally
+  fetchData();
 };
 
 const fetchData = async () => {
   try {
     mapLoading.value = true;
-    // set language_codes here to en-US for all languages except for es-MX
-    // actually we are hardcoding the language codes to en-US for now
-    //const requestLanguageCodes = language_codes.value.map((code) => (code === 'es-MX' ? code : 'en-US'));
-
-    const requestLanguageCodes = ['en-US'];
+    const requestLanguageCodes = ['en-US']; // Original behavior forced en-US for API
     const response = await axios.post('/api/map-data', {
       centralLocation: centralLocation.value,
       language_codes: requestLanguageCodes,
     }, {
-      headers: {
-        'X-CSRF-TOKEN': csrfToken,
-      },
+      headers: { 'X-CSRF-TOKEN': csrfToken },
     });
 
     allDataPoints.value = response.data.dataPoints;
+
+    // keep top level fields and merge in the correct data type subobject and delete all subobjects
+    allDataPoints.value = allDataPoints.value.map((dataPoint) => {
+      const dataType = dataPoint.alcivartech_type;
+      console.log('Data type:', dataType.toLowerCase() + '_data');
+      // Log the subobjects for debugging
+      console.log('Data point:', dataPoint);
+      
+      const subObject = dataPoint[dataType.toLowerCase().replace(/ /g, '_').replace('311','three_one_one') + '_data'];
+      console.log('Sub-object:', subObject);
+      if (subObject) {
+        // Remove the sub-object from the dataPoint
+        //delete dataPoint[dataType.toLowerCase() + '_data'];
+        // Merge top-level fields with the sub-object
+        console.log('Sub-object:', subObject);
+        return { ...dataPoint, ...subObject };
+      }
+      
+      return dataPoint; // Return as is if no sub-object
+    })
+    // Aggregate food violations after fetching
+    allDataPoints.value = aggregateFoodViolations(allDataPoints.value);
+
     updateDateRange();
-    populateFilters();
-    applyFilters();
-    // pick the most recent data point to assign to selectedDataPoint 
+    populateFilters(); // Initialize filters based on new data
+    applyFiltersAndData(); 
     if (allDataPoints.value.length > 0) {
       selectedDataPoint.value = allDataPoints.value[0];
     }
+    
+    // Ensure map resizes if its container changed, etc.
     setTimeout(() => {
-      initialMap.value.invalidateSize();
+       if (mapDisplayRef.value && mapDisplayRef.value.getMapInstance()) {
+            mapDisplayRef.value.getMapInstance().invalidateSize();
+        }
     }, 100);
     mapLoading.value = false;
 
+    // Async fetch live 311 details
+
 
   } catch (error) {
     console.error('Error fetching data:', error);
     mapLoading.value = false;
-    //if it's a 419 error reload the page
-    if (error.response.status === 419) {
-      window.location.reload();
-    }
+    if (error.response && error.response.status === 419) window.location.reload();
   } finally {
     mapLoading.value = false;
-    //get 311 data for all 311 data points
-    (async () => {
-      try {
-        if (allDataPoints.value && allDataPoints.value.length > 0) {
-          const threeOneOneCases = allDataPoints.value.filter(
-            dp => dp.alcivartech_type === '311 Case' && dp.case_enquiry_id
-          );
-
-          if (threeOneOneCases.length > 0) {
-            const caseEnquiryIds = threeOneOneCases.map(dp => dp.case_enquiry_id);
-            
+    setTimeout(() => {
+      fetchLiveData(); // Fetch live data after initial data load
+    }, 1000); // Delay to ensure initial data is set
+  }
+};
+
+const fetchLiveData = async () => {
+  if (allDataPoints.value && allDataPoints.value.length > 0) {
+      const threeOneOneCases = allDataPoints.value.filter(
+        dp => dp.alcivartech_type === '311 Case' && dp.case_enquiry_id
+      );
+      if (threeOneOneCases.length > 0) {
+        //caseEnquiryIds is an array of case_enquiry_ids as strings
+        const caseEnquiryIds = threeOneOneCases.map(dp => dp.case_enquiry_id.toString());
+        try {
+          /*
             const liveDetailsResponse = await axios.post('/api/311-case/live-multiple', {
-              case_enquiry_ids: caseEnquiryIds,
-            }, {
-              headers: {
-                'X-CSRF-TOKEN': csrfToken,
-              },
-            });
+            case_enquiry_ids: caseEnquiryIds,
+            }, { headers: { 'X-CSRF-TOKEN': csrfToken } });
+            */
+           //fetch the data, but if the response is a 429 error, wait 5 seconds and try again
+          const liveDetailsResponse = await axios.post('/api/311-case/live-multiple', {
+            case_enquiry_ids: caseEnquiryIds,
+            }, { headers: { 'X-CSRF-TOKEN': csrfToken } });
+            if (liveDetailsResponse.status === 429) {
+                console.error('Rate limit exceeded, retrying in 5 seconds...');
+                setTimeout(() => {
+                    fetchLiveData();
+                }, 5000);
+                return;
+            }
 
             const liveDataArray = liveDetailsResponse.data.data;
-
             if (liveDataArray && Array.isArray(liveDataArray)) {
-              const liveDataMap = new Map();
-              liveDataArray.forEach(liveCase => {
-                // Assuming the live case data has 'service_request_id' that matches 'case_enquiry_id'
+            const liveDataMap = new Map();
+            liveDataArray.forEach(liveCase => {
                 if (liveCase.service_request_id) {
-                  liveDataMap.set(liveCase.service_request_id.toString(), liveCase);
+                liveDataMap.set(liveCase.service_request_id.toString(), liveCase);
                 }
-              });
-
-              allDataPoints.value = allDataPoints.value.map(dp => {
+            });
+            allDataPoints.value = allDataPoints.value.map(dp => {
                 if (dp.alcivartech_type === '311 Case' && dp.case_enquiry_id) {
-                  const liveDetail = liveDataMap.get(dp.case_enquiry_id.toString());
-                  if (liveDetail) {
-                    // Add live details to the data point, e.g., under a 'live_details' property
-                    return { ...dp, live_details: liveDetail };
-                  }
+                const liveDetail = liveDataMap.get(dp.case_enquiry_id.toString());
+                if (liveDetail) return { ...dp, live_details: liveDetail };
                 }
                 return dp;
-              });
-
-              // Re-apply filters to ensure UI reflects any changes from live data
-              applyFilters();
-
-              // If the currently selected data point is a 311 case, update it too
-              if (selectedDataPoint.value &&
-                  selectedDataPoint.value.alcivartech_type === '311 Case' &&
-                  selectedDataPoint.value.case_enquiry_id) {
+            });
+            applyFiltersAndData(); // Re-apply filters with new live data
+            if (selectedDataPoint.value && selectedDataPoint.value.alcivartech_type === '311 Case' && selectedDataPoint.value.case_enquiry_id) {
                 const liveDetailForSelected = liveDataMap.get(selectedDataPoint.value.case_enquiry_id.toString());
                 if (liveDetailForSelected) {
-                  selectedDataPoint.value = { ...selectedDataPoint.value, live_details: liveDetailForSelected };
+                selectedDataPoint.value = { ...selectedDataPoint.value, live_details: liveDetailForSelected };
                 }
-              }
             }
-          }
-        }
-      } catch (liveError) {
-        console.error('Error fetching or processing live 311 case details:', liveError);
-        if (liveError.response && liveError.response.status === 419) {
-          window.location.reload(); // CSRF token expired
+            }
+        } catch (liveError) {
+            console.error('Error fetching live 311 case details:', liveError);
+            if (liveError.response && liveError.response.status === 419) window.location.reload();
         }
-        // Non-blocking error for live data, main data might still be useful.
-      } finally {
-        mapLoading.value = false; // Ensure loading is set to false after all operations
       }
-    })();
+    }
   }
-};
 
 const updateDateRange = () => {
+  if (allDataPoints.value.length === 0) {
+    minDate.value = '';
+    maxDate.value = '';
+    return;
+  }
   const dates = allDataPoints.value.map((point) => new Date(point.alcivartech_date));
   minDate.value = new Date(Math.min(...dates)).toISOString().split('T')[0];
   maxDate.value = new Date(Math.max(...dates)).toISOString().split('T')[0];
-
+  console.log('Date range updated:', minDate.value, maxDate.value);
 };
 
 const populateFilters = () => {
-  //filters.value = {};
+  const newFilters = {};
   allDataPoints.value.forEach((dataPoint) => {
-    if (filters.value[dataPoint.alcivartech_type] === undefined) {
-      filters.value[dataPoint.alcivartech_type] = true;
+    if (newFilters[dataPoint.alcivartech_type] === undefined) {
+      // If a filter type already exists in filters.value, preserve its state
+      newFilters[dataPoint.alcivartech_type] = filters.value[dataPoint.alcivartech_type] !== undefined 
+                                                ? filters.value[dataPoint.alcivartech_type] 
+                                                : true;
     }
   });
+  filters.value = newFilters; // This will be passed to MapFiltersControl
 };
 
-const toggleFilter = (type) => {
-  filters.value[type] = !filters.value[type];
-  applyFilters();
+const handleFiltersUpdated = (newFilterState) => {
+  filters.value = { ...newFilterState.activeTypes };
+  selectedDates.value = [...newFilterState.selectedDates];
+  applyFiltersAndData();
 };
 
-const toggleCenterSelection = () => {
-  centerSelectionActive.value = !centerSelectionActive.value;
-  centerSelected.value = false;
-  newCenter.value = null;
-  cancelNewMarker.value = !centerSelectionActive.value;
-};
-
-const setNewCenter = (latlng) => {
-  if (centerSelectionActive.value) {
-    newCenter.value = latlng;
-    centerSelected.value = true;
-    centralLocation.value.latitude = latlng.lat;
-    centralLocation.value.longitude = latlng.lng;
-    //set address to truncated latlng to three decimal places
-    centralLocation.value.address = `${latlng.lat.toFixed(3)}, ${latlng.lng.toFixed(3)}`;
-    mapCenter.value = [latlng.lat, latlng.lng];
-    destroyMap();
-    fetchData();
-    initializeMap();
-  }
-};
-
-const toggleDateSelection = (date) => {
-  const index = selectedDates.value.indexOf(date);
-  if (index > -1) {
-    // If the date is already selected, remove it
-    selectedDates.value.splice(index, 1);
-  } else {
-    // Otherwise, add it
-    selectedDates.value.push(date);
-  }
-  applyFilters(); // Update the filtered data
-};
-
-
-const applyFilters = () => {
-  // Check if allDataPoints is loaded
+const applyFiltersAndData = () => {
   if (allDataPoints.value.length === 0) {
+    dataPoints.value = [];
     return;
   }
-
-  // If no dates are selected, show all data points based on type filter
-  if (selectedDates.value.length === 0) {
-      dataPoints.value = allDataPoints.value.filter(point => filters.value[point.alcivartech_type]);
-  } else {
-    const filteredByDate = allDataPoints.value.filter(point => {
-      // Convert point.date to YYYY-MM-DD format
-       const pointDate = new Date(point.alcivartech_date).toISOString().split('T')[0]
-
-        //check if the current dataPoint is included in the list of selectedDates
+  let filtered = allDataPoints.value;
+  if (selectedDates.value.length > 0) {
+    filtered = filtered.filter(point => {
+      const pointDate = new Date(point.alcivartech_date).toISOString().split('T')[0];
       return selectedDates.value.includes(pointDate);
     });
-    // Filter by type in addition to the dates selected
-    dataPoints.value = filteredByDate.filter(point => filters.value[point.alcivartech_type]);
   }
-  
-    if (initialMap.value) {
-      updateMarkers(dataPoints.value);
-    }
-};
-
-const dataTypeMapByLanguageCode = {
-  'en-US': {
-    'Crime': 'Crime',
-    '311 Case': '311 Case',
-    'Building Permit': 'Building Permit',
-    'Property Violation': 'Property Violation',
-    'Construction Off Hour': 'Constr Off Hour',
-  },
-  'es-MX': {
-    'Crime': 'Crimen',
-    '311 Case': 'Caso 311',
-    'Building Permit': 'Permiso de Constr',
-    'Property Violation': 'Violación de Prop',
-    'Construction Off Hour': 'Constr Fuera'
-  },
-  'zh-CN': {
-    'Crime': '犯罪',
-    '311 Case': '311案例',
-    'Building Permit': '建筑许可',
-    'Property Violation': '财产违规',
-    'Construction Off Hour': '非工作时间施工',
-  },
-  'ht-HT': {
-    'Crime': 'Krim',
-    '311 Case': 'Ka 311',
-    'Building Permit': 'Pèmi Bati',
-    'Property Violation': 'Vyolasyon Pwopriyete',
-    'Construction Off Hour': 'Konstr Moun Ki Pa Travay',
-  },
-  'vi-VN': {
-    'Crime': 'Tội phạm',
-    '311 Case': 'Trường hợp 311',
-    'Building Permit': 'Giấy phép Xây dựng',
-    'Property Violation': 'Vi phạm Tài sản',
-    'Construction Off Hour': 'Xây dựng Ngoài giờ',
-  },
-  'pt-BR': {
-    'Crime': 'Crime',
-    '311 Case': 'Caso 311',
-    'Building Permit': 'Licença de Constr',
-    'Property Violation': 'Violação de Prop',
-    'Construction Off Hour': 'Constr Fora'
-  },
-}; 
-
-const getDataTypeTranslation = (type) => {
-  return dataTypeMapByLanguageCode[language_codes.value[0]][type];
+  dataPoints.value = filtered.filter(point => filters.value[point.alcivartech_type]);
 };
 
 
@@ -640,370 +501,74 @@ const filteredDataPoints = computed(() => {
   return dataPoints.value;
 });
 
-const reloadMap = () => {
-  destroyMap();
-  initializeMap();
+const handleMarkerClick = (dataPoint) => {
+  selectedDataPoint.value = dataPoint;
 };
 
-const destroyMap = () => {
-  if (initialMap.value) {
-    //Store the current viewport before destroying the map
-    currentMapViewport.value = {
-        center: initialMap.value.getCenter(),
-        zoom: initialMap.value.getZoom(),
-    };
-      initialMap.value.off();
-    initialMap.value.remove();
-    initialMap.value = null;
-    isMapInitialized.value = false;
+const handleImageClick = (data) => {
+  selectedDataPoint.value = data; // Assuming data is {info: dataPoint}
+  const mapInstance = mapDisplayRef.value?.getMapInstance();
+  const currentMarkers = mapDisplayRef.value?.getMarkers();
+  if (mapInstance && currentMarkers) {
+    currentMarkers.forEach((marker) => {
+      if (marker.options.icon.options.className.includes('id'+data.data_point_id)) {
+        marker.openPopup();
+      } 
+    });
   }
 };
 
-const initializeMap = ( center = null) => {
-  nextTick(() => {
-    if (initialMap.value) return;
-
-    // Initialize the map
-    if ( center == null ) {
-    initialMap.value = markRaw(L.map('map').setView(currentMapViewport.value.center || mapCenter.value || [42.3601, -71.0589], currentMapViewport.value.zoom || 16));
-    } else {
-      initialMap.value = markRaw(L.map('map').setView(center, 16));
-    }
-
-    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
-      maxZoom: 19,
-      attribution: '© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
-    }).addTo(initialMap.value);
-
-    // Ensure the map has been initialized correctly
-    if (!initialMap.value) {
-      console.error('Map initialization failed');
-      return;
-    }
-
-    // Debug: Check if the map has zoom capabilities
-    console.log('Map initialized with center:', mapCenter.value);
-    console.log('Initial zoom level:', initialMap.value.getZoom());
-
-    // Update CSS variable on zoomend
-    const updateZoomVariables = () => {
-      if (!initialMap.value) {
-        console.error('Map not defined during zoomend');
-        return;
-      }
-
-      const zoom = initialMap.value.getZoom();
-      initialMap.value.invalidateSize();
-
-      // Icon size calculation
-      const minSize = 2; // Icon size at minZoom
-      const maxSize = 50; // Icon size at maxZoom
-      const minZoom = 10;
-      const maxZoom = 19;
-
-      // Linear interpolation for icon size
-      const newSize = minSize + (maxSize - minSize) * (zoom - minZoom) / (maxZoom - minZoom);
-
-      // Debugging outputs
-      console.log('Zoom level:', zoom);
-      console.log('Calculated icon size:', newSize);
-
-      // Update CSS variable
-      document.documentElement.style.setProperty('--icon-size', `${newSize}px`);
-    };
-
-    // Attach zoomend event listener
-    initialMap.value.on('zoomend', updateZoomVariables);
-
-    // Debug: Ensure the listener is attached
-    console.log('Zoomend listener attached');
-
-    // Initialize CSS variable with the current zoom level
-    updateZoomVariables();
-
-    // Add other map-related listeners and markers
-    initialMap.value.on('click', (e) => {
-      if (centerSelectionActive.value) {
-        setNewCenter(e.latlng);
-
-        if (newMarker.value) {
-          initialMap.value.removeLayer(newMarker.value); // Remove old marker
-        }
-
-        newMarker.value = markRaw(
-          L.marker([e.latlng.lat, e.latlng.lng], {
-            icon: getCenterIcon('Center'),
-          })
-        ).addTo(initialMap.value);
-      }
+const handleListClick = (data) => {
+  selectedDataPoint.value = data;
+  const mapInstance = mapDisplayRef.value?.getMapInstance();
+  const currentMarkers = mapDisplayRef.value?.getMarkers();
+  if (mapInstance && currentMarkers) {
+    currentMarkers.forEach((marker) => {
+        if (marker.options.icon.options.className.includes('id'+data.data_point_id)) {
+            marker.openPopup();
+            // scroll to popup
+            const popupElement = marker.getPopup().getElement();
+            if (popupElement) {
+                 popupElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
+            }
+        } 
     });
-
-    markerCenter.value = markRaw(
-      L.marker(mapCenter.value, {
-        icon: getCenterIcon('Center'),
-      })
-    ).addTo(initialMap.value);
-
-    isMapInitialized.value = true;
-    if (dataPoints.value) {
-      updateMarkers(dataPoints.value);
-    }
-  });
-};
-
-
-
-// Leaflet Map Functionality
-onMounted(() => {
-  initializeMap();
-  fetchData();
-});
-
-// Update the markers for dataPoints and add the new center
-const updateMarkers = (dataPoints) => {
-  if (!initialMap.value) return;
-
-  // Clear existing markers
-  markers.value.forEach((marker) => initialMap.value.removeLayer(marker));
-  markers.value = []; // Reset the markers array
-
-  // Add new markers with DivIcons
-  dataPoints.forEach((dataPoint) => {
-    console.log('dataPoint', dataPoint);
-    if (dataPoint.latitude && dataPoint.longitude) {
-      //display date in popup like Nov 1, 2021 12:00:00 AM, and then display more details below
-      //get date from dataPoint.alcivartech_date and convert to string
-      const popupContentStart = `
-            <div><strong>${new Date(dataPoint.alcivartech_date).toLocaleString()}</strong>
-        `;
-
-      // Add more details to the popup depending on dataPoint.alcivartech_type
-      // for Crime, 311 Case, and Building Permit
-      // crime - info.offense_description
-      // case - info.case_title
-      // permit - info.worktype
-
-      const popupContent = `
-          ${popupContentStart}
-          ${dataPoint.alcivartech_type === 'Crime' ? dataPoint.offense_description : ''}
-          ${dataPoint.alcivartech_type === '311 Case' ? dataPoint.case_title : ''}
-          ${dataPoint.alcivartech_type === 'Building Permit' ? dataPoint.description : ''}
-          ${dataPoint.alcivartech_type === 'Property Violation' ? dataPoint.description : ''}
-          ${dataPoint.alcivartech_type === 'Construction Off Hour' ? dataPoint.address : ''}
-          </div>
-        `;
-
-      const marker = markRaw(
-        L.marker([dataPoint.latitude, dataPoint.longitude], {
-          icon: getDivIcon(dataPoint),
-        })
-      );
-
-      marker.on('click', () => {
-        displayDataPoint(dataPoint);
-      });
-
-      marker.bindPopup(popupContent).openPopup();
-
-      marker.addTo(initialMap.value);
-
-      // Store marker reference in array
-      markers.value.push(marker);
-    }
-  });
-};
-
-// Watch for changes in the center and update the map center and center marker
-watch(
-  () => mapCenter.value,
-  (newCenter) => {
-    if (initialMap.value) {
-      initialMap.value.setView(newCenter);
-    }
-  }
-);
-
-watch(
-  () => centralLocation.value,
-  (centralLocation) => {
-    // Remove old center marker
-    if (markerCenter.value && initialMap.value) {
-      initialMap.value.removeLayer(markerCenter.value);
-    }
-
-    // Add new center marker
-    if (initialMap.value) {
-        markerCenter.value = L.marker([centralLocation.latitude, centralLocation.longitude], {
-        icon: getCenterIcon('Center'),
-      }).addTo(initialMap.value);
-    }
-  },
-  { deep: true }
-);
-
-watch(() => cancelNewMarker.value, (cancel) => {
-  console.log('cancel', cancel);
-  if (cancel && newMarker.value && initialMap.value) {
-    initialMap.value.removeLayer(newMarker.value);
   }
-});
-
-
-const updateCenterCoordinates = (coordinates) => {
-    centralLocation.value.latitude = coordinates.lat;
-    centralLocation.value.longitude = coordinates.lng;
-    //centralLocation.value.address = coordinates.address;
-    if ( coordinates.address ) {
-      centralLocation.value.address = coordinates.address;
-    } else {
-      centralLocation.value.address = coordinates.lat + ', ' + coordinates.lng;
-    }
-    mapCenter.value = [coordinates.lat, coordinates.lng];
-    destroyMap();
-    fetchData();
-    initializeMap( [coordinates.lat, coordinates.lng] );
 };
 
-const submitNewCenter = () => {
-  fetchData();
-};
+watch(centralLocation, (newLoc) => {
+    mapCenter.value = [newLoc.latitude, newLoc.longitude];
+}, { deep: true });
 
-const displayDataPoint = (dataPoint) => {
-  selectedDataPoint.value = dataPoint;
-};
 
-const handleLoadLocation = (location) => {
-    centralLocation.value.latitude = location.latitude;
-    centralLocation.value.longitude = location.longitude;
-    //centralLocation.value.address = location.address;
-    if ( location.address ) {
-      centralLocation.value.address = location.address;
-    } else {
-      centralLocation.value.address = location.latitude + ', ' + location.longitude;
-    }
 
-    mapCenter.value = [location.latitude, location.longitude];
-    destroyMap();
-    fetchData();
-    initializeMap( [location.latitude, location.longitude] );
-  console.log('location loaded: ', location);
-};
 
-const localizationLabelsByLanguageCode = {
-  'en-US': {
-    allDatesButton: 'All Dates',
-    chooseNewCenter: 'Choose New Center',
-    cancelText: 'Cancel',
-  },
-  'es-MX': {
-    allDatesButton: 'Todas las fechas',
-    chooseNewCenter: 'Elegir nuevo centro',
-    cancelText: 'Cancelar',
-  },
-  'zh-CN': {
-    allDatesButton: '所有日期',
-    chooseNewCenter: '选择新中心',
-    cancelText: '取消',
-  },
-  'ht-HT': {
-    allDatesButton: 'Tout dat',
-    chooseNewCenter: 'Chwazi Nouvo Sant',
-    cancelText: 'Anile',
-  },
-  'vi-VN': {
-    allDatesButton: 'Tất cả các ngày',
-    chooseNewCenter: 'Chọn Trung tâm Mới',
-    cancelText: 'Hủy',
-  },
-  'pt-BR': {
-    allDatesButton: 'Todas as datas',
-    chooseNewCenter: 'Escolher Novo Centro',
-    cancelText: 'Cancelar',
-  },
-};
+onMounted(() => {
+  fetchData(); 
+});
 
 </script>
 
 <style scoped>
-#map {
-  height: 100%;
-}
-
-.boston-map {
-  height: auto; /* Let the container grow with its content */
-  overflow: hidden;
-}
-
-.map-loading {
-  filter: blur(2px);
+/* Styles from original Home.vue that are page-specific */
+.page-div {
+  display: flex;
+  flex-wrap: wrap;
+  justify-content: space-between;
 }
-
-.filter-button-text {
-  width:100%;
-  height: 100%;
-  font-weight: 800;
-  font-size: 1.5rem;
-  align-content: center;
-  border-radius: 50%;
-}
-
-/* on screens bigger than 768 px, make the map 600px wide, and flow everything else to the right */
-@media (min-width: 768px) {
-  #map {
-  height: 100%;
-}
-
-.boston-map {
-  height: auto; /* Let the container grow with its content */
-  overflow: hidden;
-}
-
-  .boston-map {
-    width: 50%;
-  }
-  .page-div {
+  .map-controls-container { /* New container for MapFiltersControl and ImageCarousel */
+    width: 100%;
     display: flex;
-    flex-wrap: wrap;
-    justify-content: space-between;
+    flex-direction:row;
   }
-
-  .filter-container div {
-    /* put text to right of icon */
-    background-position: center;
-    text-align: center;
-    padding: 0.5rem;
-    
-  }
-  
-  .date-filter-container {
-    width:auto;
-  }
-
-  .date-filter-container button {
-    width: 33%;
-    font-size: 0.8rem;
-  }
-
-  .map-controls {
-    width: 50%;
-  }
-
-  .show-all-dates {
-    width:auto;
-  }
-
   .case-details {
-    width: 50%;
+    width: 100%;  /* Assuming this was the intended layout alongside map controls */
   }
-}
-
-@media (max-width: 768px) {
-  #map {
-  height: 100%;
+  .boston-map { /* This class is now inside MapDisplay.vue, ensure it is styled from there or globally if needed */
+    width: 80%; 
+    height: 70vh
   }
 
-  .boston-map {
-    height: 70vh;
-  }
-}
+/* Ensure MapDisplay's root element takes up appropriate space if these styles were critical */
+/* .boston-map in MapDisplay.vue has its own media queries for height */
 </style>
\ No newline at end of file
diff --git a/resources/js/Pages/Reports/Index.vue b/resources/js/Pages/Reports/Index.vue
new file mode 100644
index 0000000..bf37a9a
--- /dev/null
+++ b/resources/js/Pages/Reports/Index.vue
@@ -0,0 +1,117 @@
+<template>
+  <PageTemplate>
+    <Head title="Report History" />
+
+    <div class="container mx-auto px-4 py-8">
+      <h1 class="text-3xl font-bold text-center text-gray-800 mb-10">
+        {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.reportHistoryTitle || 'Your Report History' }}
+      </h1>
+
+      <div v-if="reports.data && reports.data.length > 0" class="bg-white shadow-md rounded-lg overflow-hidden">
+        <table class="min-w-full leading-normal">
+          <thead>
+            <tr>
+              <th class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.reportTitleHeader || 'Report Title' }}
+              </th>
+              <th class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.locationHeader || 'Location' }}
+              </th>
+              <th class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.generatedAtHeader || 'Generated At' }}
+              </th>
+              <th class="px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.actionsHeader || 'Actions' }}
+              </th>
+            </tr>
+          </thead>
+          <tbody>
+            <tr v-for="report in reports.data" :key="report.id" class="hover:bg-gray-50">
+              <td class="px-5 py-4 border-b border-gray-200 bg-white text-sm">
+                <p class="text-gray-900 whitespace-no-wrap">{{ report.title }}</p>
+              </td>
+              <td class="px-5 py-4 border-b border-gray-200 bg-white text-sm">
+                <p class="text-gray-900 whitespace-no-wrap">{{ report.location_name }}</p>
+              </td>
+              <td class="px-5 py-4 border-b border-gray-200 bg-white text-sm">
+                <p class="text-gray-900 whitespace-no-wrap">{{ report.generated_at }}</p>
+              </td>
+              <td class="px-5 py-4 border-b border-gray-200 bg-white text-sm">
+                <Link :href="report.view_url" class="text-indigo-600 hover:text-indigo-900 mr-3">
+                  {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.viewAction || 'View' }}
+                </Link>
+                <a :href="report.download_url" target="_blank" class="text-green-600 hover:text-green-900">
+                  {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.downloadAction || 'Download' }}
+                </a>
+              </td>
+            </tr>
+          </tbody>
+        </table>
+         <!-- Pagination -->
+        <div v-if="reports.links && reports.data.length > 0" class="px-5 py-5 bg-white border-t flex flex-col xs:flex-row items-center xs:justify-between">
+            <div class="flex items-center">
+                <template v-for="(link, key) in reports.links" :key="key">
+                    <div v-if="link.url === null" class="mr-1 mb-1 px-4 py-3 text-sm leading-4 text-gray-400 border rounded" v-html="link.label" />
+                    <Link v-else
+                          class="mr-1 mb-1 px-4 py-3 text-sm leading-4 border rounded hover:bg-blue-500 hover:text-white focus:border-indigo-500 focus:text-indigo-500"
+                          :class="{ 'bg-blue-500 text-white': link.active }"
+                          :href="link.url"
+                          v-html="link.label"
+                          preserve-scroll />
+                </template>
+            </div>
+             <div class="text-sm text-gray-500 mt-2 xs:mt-0">
+                Showing {{ reports.from }} to {{ reports.to }} of {{ reports.total }} results
+            </div>
+        </div>
+      </div>
+      <div v-else class="text-center py-10">
+        <p class="text-gray-600 text-lg">
+          {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.noReportsFound || 'No reports found. Reports will appear here once they are generated for your saved locations.' }}
+        </p>
+      </div>
+    </div>
+  </PageTemplate>
+</template>
+
+<script setup>
+import PageTemplate from '@/Components/PageTemplate.vue';
+import { Head, Link } from '@inertiajs/vue3';
+import { computed, inject, ref } from 'vue';
+
+const props = defineProps({
+  reports: Object, // Paginated reports
+});
+
+const translations = inject('translations');
+const language_codes = ref(['en-US']); // Assuming default
+
+const getSingleLanguageCode = computed(() => {
+  return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode[language_codes.value[0]]) ? language_codes.value[0] : 'en-US';
+});
+
+// Add translations for this page
+translations.LabelsByLanguageCode['en-US'] = {
+  ...translations.LabelsByLanguageCode['en-US'],
+  reportHistoryTitle: 'Your Report History',
+  reportTitleHeader: 'Report Title',
+  locationHeader: 'Location',
+  generatedAtHeader: 'Generated At',
+  actionsHeader: 'Actions',
+  viewAction: 'View',
+  downloadAction: 'Download',
+  noReportsFound: 'No reports found. Reports will appear here once they are generated for your saved locations.',
+};
+translations.LabelsByLanguageCode['es-MX'] = {
+  ...translations.LabelsByLanguageCode['es-MX'],
+  reportHistoryTitle: 'Historial de Reportes',
+  reportTitleHeader: 'Título del Reporte',
+  locationHeader: 'Ubicación',
+  generatedAtHeader: 'Generado el',
+  actionsHeader: 'Acciones',
+  viewAction: 'Ver',
+  downloadAction: 'Descargar',
+  noReportsFound: 'No se encontraron reportes. Los reportes aparecerán aquí una vez que se generen para sus ubicaciones guardadas.',
+};
+
+</script>
diff --git a/resources/js/Pages/Reports/Show.vue b/resources/js/Pages/Reports/Show.vue
new file mode 100644
index 0000000..eabf2d0
--- /dev/null
+++ b/resources/js/Pages/Reports/Show.vue
@@ -0,0 +1,117 @@
+<template>
+  <PageTemplate>
+    <Head :title="report.title || 'View Report'" />
+
+    <div class="container mx-auto px-4 py-8">
+      <div class="bg-white shadow-xl rounded-lg p-6 md:p-8">
+        <div class="flex justify-between items-start mb-6">
+          <div>
+            <h1 class="text-2xl md:text-3xl font-bold text-gray-800">
+              {{ report.title }}
+            </h1>
+            <p class="text-sm text-gray-500 mt-1">
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.locationLabel || 'Location' }}: {{ report.location_name }}
+            </p>
+            <p class="text-sm text-gray-500">
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.generatedAtLabel || 'Generated' }}: {{ report.generated_at }}
+            </p>
+          </div>
+          <a :href="report.download_url"
+             target="_blank"
+             class="inline-flex items-center px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-green-500 active:bg-green-700 focus:outline-none focus:border-green-700 focus:ring focus:ring-green-200 disabled:opacity-25 transition">
+            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
+            </svg>
+            {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.downloadReportButton || 'Download Report' }}
+          </a>
+        </div>
+
+        <div class="prose prose-sm sm:prose lg:prose-lg xl:prose-xl max-w-none report-content p-4 border border-gray-200 rounded-md bg-gray-50">
+          <!-- Using v-html for markdown. -->
+          <div v-html="renderedMarkdownContent"></div>
+        </div>
+
+        <div class="mt-8 text-center">
+          <Link :href="route('reports.index')" class="text-indigo-600 hover:text-indigo-800 font-medium">
+            &larr; {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.backToReportHistoryLink || 'Back to Report History' }}
+          </Link>
+        </div>
+      </div>
+    </div>
+  </PageTemplate>
+</template>
+
+<script setup>
+import PageTemplate from '@/Components/PageTemplate.vue';
+import { Head, Link } from '@inertiajs/vue3';
+import { computed, inject, ref } from 'vue';
+import markdownit from 'markdown-it';
+import markdownItLinkAttributes from 'markdown-it-link-attributes';
+
+const props = defineProps({
+  report: Object,
+});
+
+const md = markdownit({
+  html: true,
+  linkify: true,
+  typographer: true,
+  breaks: true,
+});
+
+md.use(markdownItLinkAttributes, {
+  attrs: {
+    target: "_blank",
+    rel: "noopener",
+  },
+});
+
+const translations = inject('translations');
+const language_codes = ref(['en-US']);
+
+const getSingleLanguageCode = computed(() => {
+  return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode[language_codes.value[0]]) ? language_codes.value[0] : 'en-US';
+});
+
+const renderedMarkdownContent = computed(() => {
+  if (props.report && props.report.content) {
+    return md.render(props.report.content);
+  }
+  return '';
+});
+
+// Add translations for this page
+translations.LabelsByLanguageCode['en-US'] = {
+  ...translations.LabelsByLanguageCode['en-US'],
+  locationLabel: 'Location',
+  generatedAtLabel: 'Generated',
+  downloadReportButton: 'Download Report',
+  backToReportHistoryLink: 'Back to Report History',
+};
+translations.LabelsByLanguageCode['es-MX'] = {
+  ...translations.LabelsByLanguageCode['es-MX'],
+  locationLabel: 'Ubicación',
+  generatedAtLabel: 'Generado',
+  downloadReportButton: 'Descargar Reporte',
+  backToReportHistoryLink: 'Volver al Historial de Reportes',
+};
+
+</script>
+
+<style scoped>
+.report-content :deep(pre) { /* Apply to pre tags within the v-html rendered content */
+  font-family: inherit;
+  font-size: 0.9rem;
+  line-height: 1.6;
+  background-color: #f9fafb; /* bg-gray-50 */
+  padding: 1rem;
+  border-radius: 0.375rem; /* rounded-md */
+  overflow-x: auto;
+  white-space: pre-wrap; /* Ensure pre content wraps */
+  word-wrap: break-word; /* Ensure long words break */
+}
+/* Tailwind's prose classes should handle most other styling for p, h1-h6, ul, ol, etc. */
+/* If you install @tailwindcss/typography, its 'prose' classes are very helpful here.
+   The .report-content div already has prose classes.
+*/
+</style>
diff --git a/resources/js/Pages/Subscription.vue b/resources/js/Pages/Subscription.vue
index bf56edc..3337798 100644
--- a/resources/js/Pages/Subscription.vue
+++ b/resources/js/Pages/Subscription.vue
@@ -36,6 +36,35 @@
           </Link>
         </div>
   
+        <!-- Registered User / Free Tier Information -->
+        <div class="mb-10 p-6 bg-gray-100 border border-gray-300 rounded-lg shadow-md">
+          <h2 class="text-2xl font-semibold text-gray-700 mb-3">
+            {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.freeTierTitle || 'Registered User Features (Free)' }}
+          </h2>
+          <p class="text-gray-600 mb-4">
+            {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.freeTierDescription || 'By creating a free account, you get access to valuable local insights.' }}
+          </p>
+          <ul class="space-y-2 text-gray-600 mb-6">
+            <li v-for="feature in freeFeatures" :key="feature.id" class="flex items-center">
+              <svg class="w-5 h-5 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
+              {{ feature.text }}
+            </li>
+          </ul>
+          <div v-if="!isAuthenticated" class="flex flex-col sm:flex-row sm:space-x-4 space-y-2 sm:space-y-0 items-center">
+            <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + route('map.index')"
+               class="flex items-center justify-center w-full sm:w-auto px-6 py-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
+               <img class="h-5 w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+               {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerWithGoogleButton || 'Register with Google' }}
+            </a>
+            <Link :href="route('register') + '?redirect_to=' + route('map.index')" class="w-full sm:w-auto px-6 py-3 text-white bg-blue-500 rounded-md shadow-lg hover:bg-blue-600 transition-colors text-center">
+               {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerManuallyButton || 'Register Manually' }}
+            </Link>
+          </div>
+           <div v-else-if="isAuthenticated && !currentPlan" class="w-full px-6 py-3 text-center text-gray-700 font-semibold bg-gray-200 rounded-md">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.yourCurrentAccessInfo || 'These are your current features.' }}
+           </div>
+        </div>
+
         <div class="grid md:grid-cols-2 gap-8">
           <!-- Basic Plan -->
           <div class="border p-6 rounded-lg shadow-lg flex flex-col bg-white" :class="{'ring-2 ring-blue-500': currentPlan === 'basic'}">
@@ -44,7 +73,7 @@
             </h2>
             <p class="text-3xl font-bold my-4 text-blue-600">$5 <span class="text-sm font-normal text-gray-500">/month</span></p>
             <p class="text-gray-600 mb-6">
-              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.basicPlanDescription || 'Stay informed about what\'s happening in your neighborhood.' }}
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.basicPlanDescription || 'Enhanced access for deeper local insights, including extended data history.' }}
             </p>
             <ul class="space-y-2 text-gray-600 mb-6 flex-grow">
               <li v-for="feature in basicFeatures" :key="feature.id" class="flex items-center">
@@ -52,15 +81,26 @@
                 {{ feature.text }}
               </li>
             </ul>
-            <button
-              v-if="currentPlan !== 'basic'"
-              @click="goToRoute(route('subscribe.checkout', { plan: 'basic' }))"
-              :disabled="!isAuthenticated"
-              class="w-full mt-auto px-6 py-3 text-white bg-blue-500 rounded-md shadow-lg hover:bg-blue-600 transition-colors disabled:bg-gray-400">
-              {{ isAuthenticated ? (translations.LabelsByLanguageCode[getSingleLanguageCode]?.subscribeButton || 'Subscribe') : (translations.LabelsByLanguageCode[getSingleLanguageCode]?.loginToSubscribeButton || 'Login to Subscribe') }}
-            </button>
-            <div v-else class="w-full mt-auto px-6 py-3 text-center text-blue-600 font-semibold bg-blue-100 rounded-md">
-              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.currentPlanButton || 'Current Plan' }}
+            <div class="mt-auto">
+              <button
+                v-if="isAuthenticated && currentPlan !== 'basic'"
+                @click="goToRoute(route('subscribe.checkout', { plan: 'basic' }))"
+                class="w-full px-6 py-3 text-white bg-blue-500 rounded-md shadow-lg hover:bg-blue-600 transition-colors">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.subscribeButton || 'Subscribe' }}
+              </button>
+              <div v-else-if="!isAuthenticated" class="flex flex-col space-y-2 items-center">
+                 <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + route('subscribe.checkout', { plan: 'basic' })"
+                   class="flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
+                   <img class="h-5 w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+                   {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerWithGoogleToSubscribeButton || 'Login with Google to Subscribe' }}
+                 </a>
+                 <Link :href="route('register') + '?redirect_to=' + route('subscribe.checkout', { plan: 'basic' })" class="text-sm text-blue-600 hover:underline">
+                   {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerManuallyToSubscribeLink || 'Or register manually to subscribe' }}
+                 </Link>
+              </div>
+              <div v-else-if="currentPlan === 'basic'" class="w-full px-6 py-3 text-center text-blue-600 font-semibold bg-blue-100 rounded-md">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.currentPlanButton || 'Current Plan' }}
+              </div>
             </div>
           </div>
   
@@ -74,7 +114,7 @@
             </h2>
             <p class="text-3xl font-bold my-4 text-purple-600">$15 <span class="text-sm font-normal text-gray-500">/month</span></p>
             <p class="text-gray-600 mb-6">
-              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.proPlanDescription || 'Unlock deeper insights and advanced tools for power users.' }}
+              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.proPlanDescription || 'Comprehensive data access and advanced tools for power users and professionals.' }}
             </p>
             <ul class="space-y-2 text-gray-600 mb-6 flex-grow">
                <li v-for="feature in proFeatures" :key="feature.id" class="flex items-center">
@@ -82,20 +122,31 @@
                 {{ feature.text }}
               </li>
             </ul>
-             <button
-              v-if="currentPlan !== 'pro'"
-              @click="goToRoute(route('subscribe.checkout', { plan: 'pro' }))"
-              :disabled="!isAuthenticated"
-              class="w-full mt-auto px-6 py-3 text-white bg-purple-500 rounded-md shadow-lg hover:bg-purple-600 transition-colors disabled:bg-gray-400">
-              {{ isAuthenticated ? (translations.LabelsByLanguageCode[getSingleLanguageCode]?.subscribeButton || 'Subscribe') : (translations.LabelsByLanguageCode[getSingleLanguageCode]?.loginToSubscribeButton || 'Login to Subscribe') }}
-            </button>
-             <div v-else class="w-full mt-auto px-6 py-3 text-center text-purple-600 font-semibold bg-purple-100 rounded-md">
-              {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.currentPlanButton || 'Current Plan' }}
+            <div class="mt-auto">
+              <button
+                v-if="isAuthenticated && currentPlan !== 'pro'"
+                @click="goToRoute(route('subscribe.checkout', { plan: 'pro' }))"
+                class="w-full px-6 py-3 text-white bg-purple-500 rounded-md shadow-lg hover:bg-purple-600 transition-colors">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.subscribeButton || 'Subscribe' }}
+              </button>
+              <div v-else-if="!isAuthenticated" class="flex flex-col space-y-2 items-center">
+                 <a :href="route('socialite.redirect', 'google') + '?redirect_to=' + route('subscribe.checkout', { plan: 'pro' })"
+                   class="flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
+                   <img class="h-5 w-5 mr-2" src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
+                   {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerWithGoogleToSubscribeButton || 'Login with Google to Subscribe' }}
+                 </a>
+                 <Link :href="route('register') + '?redirect_to=' + route('subscribe.checkout', { plan: 'pro' })" class="text-sm text-purple-600 hover:underline">
+                   {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerManuallyToSubscribeLink || 'Or register manually to subscribe' }}
+                 </Link>
+              </div>
+              <div v-else-if="currentPlan === 'pro'" class="w-full px-6 py-3 text-center text-purple-600 font-semibold bg-purple-100 rounded-md">
+                {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.currentPlanButton || 'Current Plan' }}
+              </div>
             </div>
           </div>
         </div>
   
-        <div class="text-center mt-12" v-if="isAuthenticated && currentPlan">
+        <div class="text-center mt-12" v-if="isAuthenticated">
           <p class="text-gray-600 mb-2">
             {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.manageSubscriptionPrompt || 'Need to manage your subscription or payment details?' }}
           </p>
@@ -103,16 +154,6 @@
             {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.goToBillingPortalButton || 'Go to Billing Portal' }}
           </button>
         </div>
-        <div v-if="!isAuthenticated" class="text-center mt-12 p-4 bg-yellow-100 border border-yellow-400 text-yellow-700 rounded-md">
-          <p>{{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.loginToSubscribeMessage || 'Please log in or register to subscribe to a plan.' }}</p>
-          <Link :href="route('login')" class="text-blue-600 hover:underline font-semibold">
-            {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.loginButton || 'Login' }}
-          </Link>
-          |
-          <Link :href="route('register')" class="text-blue-600 hover:underline font-semibold">
-            {{ translations.LabelsByLanguageCode[getSingleLanguageCode]?.registerButton || 'Register' }}
-          </Link>
-        </div>
       </div>
     </PageTemplate>
   </template>
@@ -135,36 +176,42 @@
   const getSingleLanguageCode = computed(() => {
     // This is a simplified version. In a real app, you'd likely get this from a store or user preferences.
     // For now, if translations exist for en-US, use it. Otherwise, fallback.
-    return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode['en-US']) ? language_codes.value[0] : 'en-US';
+    return (translations.LabelsByLanguageCode && translations.LabelsByLanguageCode[language_codes.value[0]]) ? language_codes.value[0] : 'en-US';
   });
   
   const goToRoute = (targetRoute) => {
-    if (props.isAuthenticated) {
-      window.location.href = targetRoute;
-    } else {
-      // Optionally, redirect to login or show a message
-      // For now, the button is disabled, but this could be a fallback
-      console.warn("User not authenticated. Subscription attempt blocked.");
-      // Or use Inertia to visit login page:
-      // Inertia.visit(route('login'));
-    }
+    // No need to check isAuthenticated here anymore for the primary button click,
+    // as the template logic now separates authenticated and unauthenticated actions.
+    // However, if called from other places, the check might still be relevant.
+    // For direct checkout, it's assumed user is authenticated by this point.
+    // Inertia.visit might be preferable if you want to stay within SPA navigation
+    // For Stripe checkout, window.location.href is often necessary.
+    window.location.href = targetRoute;
   };
   
   // Define features for each plan - these should be translatable
-  const basicFeatures = computed(() => [
-    { id:1, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.radialMapAccess || 'Radial Map Access' },
-    { id:2, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.saveOneLocation || 'Save 1 Favorite Location' },
-    { id:3, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.dailyWeeklyReportsOne || 'Daily/Weekly Reports (1 Location)' },
+  const freeFeatures = computed(() => [
+    { id:1, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.foodInspectionResults || 'Food Inspection Results Access' },
+    { id:2, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.fullMapTwoWeeksData || 'Full Map Access (Last 2 Weeks Data)' }, // For authenticated free users
+    { id:3, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.saveOneLocation || 'Save 1 Favorite Location' },
     { id:4, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.basicAIAssistant || 'Basic AI Assistant' },
   ]);
+
+  const basicFeatures = computed(() => [
+    { id:1, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.allFreeFeatures || 'All Registered User Features' },
+    { id:2, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.fullMapSixMonthsData || 'Full Map Access (Last 6 Months Data)' },
+    { id:3, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.dailyAIReport || 'Daily AI Report' },
+    { id:4, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.radialMapAccess || 'Radial Map Access' },
+    { id:5, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.saveThreeLocations || 'Save 3 Favorite Locations' },
+  ]);
   
   const proFeatures = computed(() => [
     { id:1, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.allBasicFeatures || 'All Basic Plan Features' },
-    { id:2, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.crime311Maps || 'Interactive Crime & 311 Maps' },
-    { id:3, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.saveFiveLocations || 'Save 5 Favorite Locations' },
-    { id:4, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.reportsAllLocations || 'Reports for All Saved Locations' },
+    { id:2, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.fullMapAllTimeData || 'Full Map Access (All Time Data)' },
+    { id:4, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.saveTenLocations || 'Save 10 Favorite Locations' },
     { id:5, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.advancedAIAssistant || 'Advanced AI Assistant' },
     { id:6, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.csvExport || 'CSV Data Export' },
+    { id:7, text: translations.FeatureTranslations[getSingleLanguageCode.value]?.prioritySupport || 'Priority Support' },
   ]);
   
   // Example: Add these to your main translations provider (e.g., app.js or a dedicated translations file)
@@ -178,37 +225,75 @@
     goToDashboard: 'Go to Dashboard',
     subscriptionCancelledTitle: 'Subscription Canceled',
     subscriptionCancelledMessage: 'Your subscription process was canceled. You can choose a plan below or return to the dashboard.',
+    
+    freeTierTitle: 'Registered User Features (Free)',
+    freeTierDescription: 'By creating a free account, you get access to valuable local insights.',
+    registerWithGoogleButton: 'Register with Google',
+    registerManuallyButton: 'Register Manually',
+    yourCurrentAccessInfo: 'These are your current features.',
+
     basicPlanTitle: 'Resident Awareness',
-    basicPlanDescription: 'Stay informed about what\'s happening in your neighborhood.',
+    basicPlanDescription: 'Enhanced access for deeper local insights, including extended data history.',
     proPlanTitle: 'Pro Insights',
-    proPlanDescription: 'Unlock deeper insights and advanced tools for power users.',
+    proPlanDescription: 'Comprehensive data access and advanced tools for power users and professionals.',
     bestValueBadge: 'Best Value',
     subscribeButton: 'Subscribe',
-    loginToSubscribeButton: 'Login to Subscribe',
     currentPlanButton: 'Current Plan',
     manageSubscriptionPrompt: 'Need to manage your subscription or payment details?',
     goToBillingPortalButton: 'Go to Billing Portal',
-    loginToSubscribeMessage: 'Please log in or register to subscribe to a plan.',
-    loginButton: 'Login',
-    registerButton: 'Register',
+    registerWithGoogleToSubscribeButton: 'Login with Google to Subscribe',
+    registerManuallyToSubscribeLink: 'Or register manually to subscribe',
   };
   
   translations.FeatureTranslations = {
     'en-US': {
-      radialMapAccess: 'Radial Map Access',
+      // Free Tier (Authenticated)
+      foodInspectionResults: 'Food Inspection Results Access',
+      fullMapTwoWeeksData: 'Full Map Access (Last 2 Weeks Data)', // Authenticated Free User
       saveOneLocation: 'Save 1 Favorite Location',
-      dailyWeeklyReportsOne: 'Daily/Weekly Reports (1 Location)',
       basicAIAssistant: 'Basic AI Assistant',
+      
+      // Basic Tier (includes free + more)
+      allFreeFeatures: 'All Registered User Features',
+      fullMapSixMonthsData: 'Full Map Access (Last 6 Months Data)',
+      dailyAIReport: 'Daily AI Report',
+      saveThreeLocations: 'Save 3 Favorite Locations',
+      radialMapAccess: 'Radial Map Access',
+
+      // Pro Tier (includes basic + more)
       allBasicFeatures: 'All Basic Plan Features',
-      crime311Maps: 'Interactive Crime & 311 Maps',
-      saveFiveLocations: 'Save 5 Favorite Locations',
-      reportsAllLocations: 'Reports for All Saved Locations',
+      fullMapAllTimeData: 'Full Map Access (All Time Data)',
+      saveTenLocations: 'Save 10 Favorite Locations',
       advancedAIAssistant: 'Advanced AI Assistant',
       csvExport: 'CSV Data Export',
+      prioritySupport: 'Priority Support',
+
+      // Potentially unused or to be reviewed if still needed:
+      crime311Maps: 'Interactive Crime & 311 Maps', 
     },
     'es-MX': { // Example for Spanish
+      // Free Tier (Authenticated)
+      foodInspectionResults: 'Acceso a Resultados de Inspección de Alimentos',
+      fullMapTwoWeeksData: 'Acceso al Mapa Completo (Datos de las Últimas 2 Semanas)',
+      saveOneLocation: 'Guardar 1 Ubicación Favorita',
+      basicAIAssistant: 'Asistente de IA Básico',
+
+      // Basic Tier
+      allFreeFeatures: 'Todas las Funciones de Usuario Registrado',
+      fullMapSixMonthsData: 'Acceso al Mapa Completo (Datos de los Últimos 6 Meses)',
+      dailyAIReport: 'Reporte Diario de IA',
+      saveThreeLocations: 'Guardar 3 Ubicaciones Favoritas',
       radialMapAccess: 'Acceso al Mapa Radial',
-      // ... other features
+
+      // Pro Tier
+      allBasicFeatures: 'Todas las Funciones del Plan Básico',
+      fullMapAllTimeData: 'Acceso al Mapa Completo (Todos los Datos Históricos)',
+      saveTenLocations: 'Guardar 10 Ubicaciones Favoritas',
+      advancedAIAssistant: 'Asistente de IA Avanzado',
+      csvExport: 'Exportación de Datos CSV',
+      prioritySupport: 'Soporte Prioritario',
+      
+      crime311Maps: 'Mapas Interactivos de Crimen y 311',
     }
   };
   
diff --git a/resources/js/app.js b/resources/js/app.js
index b10ee0b..0fed884 100644
--- a/resources/js/app.js
+++ b/resources/js/app.js
@@ -7,7 +7,7 @@ import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
 import { ZiggyVue } from '../../vendor/tightenco/ziggy/dist/vue.m';
 import { translations } from './translations';
 
-const appName = 'Boston City Services'
+const appName = 'BostonScope'
 
 createInertiaApp({
     title: (title) => `${title} - ${appName}`,
diff --git a/resources/js/translations.js b/resources/js/translations.js
index 05d5a29..83cd0ba 100644
--- a/resources/js/translations.js
+++ b/resources/js/translations.js
@@ -7,13 +7,15 @@ const dataTypeMapByLanguageCode = {
       'Building Permit': 'Building Permit',
       'Property Violation': 'Property Violation',
       'Construction Off Hour': 'Constr Off Hour',
+      'Food Establishment Violation': 'Food Inspection',
     },
     'es-MX': {
       'Crime': 'Crimen',
       '311 Case': 'Caso 311',
       'Building Permit': 'Permiso de Constr',
       'Property Violation': 'Violación de Prop',
-      'Construction Off Hour': 'Constr Fuera'
+      'Construction Off Hour': 'Constr Fuera',
+      'Food Establishment Violation': 'Inspección de Alimentos',
     },
     'zh-CN': {
       'Crime': '犯罪',
@@ -21,6 +23,7 @@ const dataTypeMapByLanguageCode = {
       'Building Permit': '建筑许可',
       'Property Violation': '财产违规',
       'Construction Off Hour': '非工作时间施工',
+      'Food Establishment Violation': '食品检查',
     },
     'ht-HT': {
       'Crime': 'Krim',
@@ -28,6 +31,7 @@ const dataTypeMapByLanguageCode = {
       'Building Permit': 'Pèmi Bati',
       'Property Violation': 'Vyolasyon Pwopriyete',
       'Construction Off Hour': 'Konstr Moun Ki Pa Travay',
+      'Food Establishment Violation': 'Enspeksyon Manje',
     },
     'vi-VN': {
       'Crime': 'Tội phạm',
@@ -35,13 +39,15 @@ const dataTypeMapByLanguageCode = {
       'Building Permit': 'Giấy phép Xây dựng',
       'Property Violation': 'Vi phạm Tài sản',
       'Construction Off Hour': 'Xây dựng Ngoài giờ',
+      'Food Establishment Violation': 'Kiểm tra Thực phẩm',
     },
     'pt-BR': {
       'Crime': 'Crime',
       '311 Case': 'Caso 311',
       'Building Permit': 'Licença de Constr',
       'Property Violation': 'Violação de Prop',
-      'Construction Off Hour': 'Constr Fora'
+      'Construction Off Hour': 'Constr Fora',
+      'Food Establishment Violation': 'Inspeção de Alimentos',
     },
   };
 
@@ -99,6 +105,240 @@ const dataTypeMapByLanguageCode = {
     },
   };
 
+  const LocationLabelsByLanguageCode = {
+    'en-US': {
+      currentLocation: 'Current Location',
+      saveLocation: 'Save Location',
+      locationSaved: 'Location Saved',
+      saving: 'Saving...',
+      delete: 'Delete',
+      load: 'Load',
+      noSavedLocations: "You haven’t saved any locations yet. Save your current location to get started.",
+      savedLocation: 'Saved Location',
+      selectName: 'Select Name',
+      home: 'Home',
+      work: 'Work',
+      other: 'Other',
+      report: 'Report Frequency',
+      language: 'Language',
+      off: 'Off',
+      daily: 'Daily',
+      weekly: 'Weekly',
+      address: 'Address',
+      update: 'Update',
+      sendReport: 'Send Report',
+      reportSent: 'Report Sent',
+      maxLocationsReached: 'You have reached the maximum number of saved locations.',
+    },
+    'es-MX': {
+      currentLocation: 'Ubicación Actual',
+      saveLocation: 'Guardar Ubicación',
+      locationSaved: 'Ubicación Guardada',
+      saving: 'Guardando...',
+      delete: 'Eliminar',
+      load: 'Cargar',
+      noSavedLocations: 'Aún no has guardado ubicaciones. Guarda tu ubicación actual para comenzar.',
+      savedLocation: 'Ubicación Guardada',
+      selectName: 'Seleccionar Nombre',
+      home: 'Casa',
+      work: 'Trabajo',
+      other: 'Otro',
+      report: 'Frecuencia de Reporte',
+      language: 'Idioma',
+      off: 'Apagado',
+      daily: 'Diario',
+      weekly: 'Semanal',
+      address: 'Dirección',
+      update: 'Actualizar',
+      sendReport: 'Enviar Reporte',
+      reportSent: 'Reporte Enviado',
+      maxLocationsReached: 'Has alcanzado el número máximo de ubicaciones guardadas.',
+    },
+    'zh-CN': {
+      currentLocation: '当前位置',
+      saveLocation: '保存位置',
+      locationSaved: '位置已保存',
+      saving: '保存中...',
+      delete: '删除',
+      load: '加载',
+      noSavedLocations: '您还没有保存任何位置。保存您当前的位置以开始。',
+      savedLocation: '已保存的位置',
+      selectName: '选择名称',
+      home: '家',
+      work: '工作',
+      other: '其他',
+      report: '报告频率',
+      language: '语言',
+      off: '关闭',
+      daily: '每日',
+      weekly: '每周',
+      address: '地址',
+      update: '更新',
+      sendReport: '发送报告',
+      reportSent: '报告已发送',
+      maxLocationsReached: '您已达到保存位置的最大数量。',
+    },
+    'ht-HT': {
+      currentLocation: 'Kote Kounye a',
+      saveLocation: 'Sove Kote a',
+      locationSaved: 'Kote Sove',
+      saving: 'Ap sove...',
+      delete: 'Efase',
+      load: 'Chaje',
+      noSavedLocations: 'Ou poko sove okenn kote. Sove kote w ye kounye a pou kòmanse.',
+      savedLocation: 'Kote Sove',
+      selectName: 'Chwazi Non',
+      home: 'Kay',
+      work: 'Travay',
+      other: 'Lòt',
+      report: 'Frekans Rapò',
+      language: 'Lang',
+      off: 'Fèmen',
+      daily: 'Chak jou',
+      weekly: 'Chak semèn',
+      address: 'Adrès',
+      update: 'Mizajou',
+      sendReport: 'Voye Rapò',
+      reportSent: 'Rapò voye',
+      maxLocationsReached: 'Ou rive nan kantite maksimòm kote sove yo.',
+    },
+    'vi-VN': {
+      currentLocation: 'Vị Trí Hiện Tại',
+      saveLocation: 'Lưu Vị Trí',
+      locationSaved: 'Đã Lưu Vị Trí',
+      saving: 'Đang lưu...',
+      delete: 'Xóa',
+      load: 'Tải',
+      noSavedLocations: 'Bạn chưa lưu bất kỳ vị trí nào. Lưu vị trí hiện tại của bạn để bắt đầu.',
+      savedLocation: 'Vị Trí Đã Lưu',
+      selectName: 'Chọn Tên',
+      home: 'Nhà',
+      work: 'Công việc',
+      other: 'Khác',
+      report: 'Tần Suất Báo Cáo',
+      language: 'Ngôn Ngữ',
+      off: 'Tắt',
+      daily: 'Hàng ngày',
+      weekly: 'Hàng tuần',
+      address: 'Địa chỉ',
+      update: 'Cập nhật',
+      sendReport: 'Gửi Báo Cáo',
+      reportSent: 'Báo cáo đã gửi',
+      maxLocationsReached: 'Bạn đã đạt số lượng tối đa của vị trí đã lưu.',  
+    },
+    'pt-BR': {
+      currentLocation: 'Localização Atual',
+      saveLocation: 'Salvar Localização',
+      locationSaved: 'Localização Salva',
+      saving: 'Salvando...',
+      delete: 'Excluir',
+      load: 'Carregar',
+      noSavedLocations: 'Você ainda não salvou nenhuma localização. Salve sua localização atual para começar.',
+      savedLocation: 'Localização Salva',
+      selectName: 'Selecionar Nome',
+      home: 'Casa',
+      work: 'Trabalho',
+      other: 'Outro',
+      report: 'Frequência do Relatório',
+      language: 'Idioma',
+      off: 'Desligado',
+      daily: 'Diário',
+      weekly: 'Semanal',
+      address: 'Endereço',
+      update: 'Atualizar',
+      sendReport: 'Enviar Relatório',
+      reportSent: 'Relatório Enviado',
+      maxLocationsReached: 'Você atingiu o número máximo de localizações salvas.',
+    },
+  };
+
+  const CaseLabelsByLanguageCode = {
+    'en-US': {
+      caseTitle: '311 Case',
+      dateLabel: 'Date',
+      caseId: 'Case ID',
+      status: 'Status',
+      title: 'Title',
+      reason: 'Reason',
+      subject: 'Subject',
+      location: 'Location',
+      neighborhood: 'Neighborhood',
+      source: 'Source',
+      department: 'Department',
+      closureDate: 'Closure Date',
+    },
+    'es-MX': {
+      caseTitle: 'Caso 311',
+      dateLabel: 'Fecha',
+      caseId: 'ID de Caso',
+      status: 'Estado',
+      title: 'Título',
+      reason: 'Razón',
+      subject: 'Asunto',
+      location: 'Ubicación',
+      neighborhood: 'Vecindario',
+      source: 'Fuente',
+      department: 'Departamento',
+      closureDate: 'Fecha de Cierre',
+    },
+    'zh-CN': {
+      caseTitle: '311案例',
+      dateLabel: '日期',
+      caseId: '案例编号',
+      status: '状态',
+      title: '标题',
+      reason: '原因',
+      subject: '主题',
+      location: '位置',
+      neighborhood: '社区',
+      source: '来源',
+      department: '部门',
+      closureDate: '关闭日期',
+    },
+    'ht-HT': {
+      caseTitle: 'Kaz 311',
+      dateLabel: 'Dat',
+      caseId: 'ID Kaz',
+      status: 'Estati',
+      title: 'Tit',
+      reason: 'Rezon',
+      subject: 'Sijè',
+      location: 'Kote',
+      neighborhood: 'Katye',
+      source: 'Sous',
+      department: 'Depatman',
+      closureDate: 'Dat Fèmen',
+    },
+    'vi-VN': {
+      caseTitle: 'Trường hợp 311',
+      dateLabel: 'Ngày',
+      caseId: 'ID Trường hợp',
+      status: 'Trạng thái',
+      title: 'Tiêu đề',
+      reason: 'Lý do',
+      subject: 'Chủ đề',
+      location: 'Vị trí',
+      neighborhood: 'Hàng xóm',
+      source: 'Nguồn',
+      department: 'Bộ phận',
+      closureDate: 'Ngày đóng cửa',
+    },
+    'pt-BR': { 
+      caseTitle: 'Caso 311',
+      dateLabel: 'Data',
+      caseId: 'ID do Caso',
+      status: 'Estado',
+      title: 'Título',
+      reason: 'Razão',
+      subject: 'Assunto',
+      location: 'Localização',
+      neighborhood: 'Vizinhança',
+      source: 'Fonte',
+      department: 'Departamento',
+      closureDate: 'Data de Encerramento',
+    },   
+  };
+
 
   const CrimeLabelsByLanguageCode = {
     'en-US': {
@@ -167,4 +407,7 @@ export const translations = {
     dataTypeMapByLanguageCode,
     localizationLabelsByLanguageCode,
     LabelsByLanguageCode,
+    LocationLabelsByLanguageCode,
+    CrimeLabelsByLanguageCode,
+    CaseLabelsByLanguageCode,
   };
\ No newline at end of file
diff --git a/routes/web.php b/routes/web.php
index 598c24e..aa6ddaf 100644
--- a/routes/web.php
+++ b/routes/web.php
@@ -4,6 +4,8 @@
 use App\Http\Controllers\ThreeOneOneCaseController;
 use App\Http\Controllers\CrimeReportsController;
 use App\Http\Controllers\CrimeMapController;
+use App\Http\Controllers\DataMapController; // Added
+use App\Http\Controllers\MetricsController; // Added
 
 use Illuminate\Foundation\Application;
 use Illuminate\Support\Facades\Route;
@@ -20,6 +22,7 @@
 use App\Http\Controllers\SubscriptionController;
 use App\Http\Controllers\Auth\SocialLoginController;
 use App\Http\Controllers\EmailController;
+use App\Http\Controllers\ReportController; // Added
 
 
 Route::middleware(['auth'])->group(function () {
@@ -43,6 +46,8 @@
 
 
 Route::post('/api/ai-chat', [AiAssistantController::class, 'handleRequest'])->name('ai.assistant');
+// New API endpoint for streaming location-based reports
+Route::post('/api/stream-location-report', [AiAssistantController::class, 'streamLocationReport'])->name('ai.stream-location-report');
 
 
 
@@ -53,6 +58,11 @@
 
     //Route::put('/profile', [RoleController::class, 'update'])->name('role.update');
 
+    // Report History Routes
+    Route::get('/reports', [ReportController::class, 'index'])->name('reports.index');
+    Route::get('/reports/{report}', [ReportController::class, 'show'])->name('reports.show');
+    Route::get('/reports/{report}/download', [ReportController::class, 'download'])->name('reports.download');
+
 });
 
 
@@ -73,8 +83,8 @@
 Route::get('/crime-map', [CrimeMapController::class, 'index'])->name('crime-map');
 Route::post('/api/natural-language-query', [CrimeMapController::class, 'naturalLanguageQuery'])->name('crime-map.natural-language-query');
 
-Route::get('/api/311-case/live/{case_enquiry_id}', [ThreeOneOneCaseController::class, 'getLiveCaseDetails'])->name('311case.live');
-Route::post('api/311-case/live-multiple', [ThreeOneOneCaseController::class, 'getMultipleLiveCaseDetails']);
+Route::get('/api/311-case/live/{case_enquiry_id}', [ThreeOneOneCaseController::class, 'getLiveCaseDetails'])->name('311case.live')->middleware('throttle:boston_311_live_global');
+Route::post('api/311-case/live-multiple', [ThreeOneOneCaseController::class, 'getMultipleLiveCaseDetails'])->middleware('throttle:boston_311_live_global');
 
 Route::middleware(['auth'])->group(function () {
     // ... other auth routes ...
@@ -96,6 +106,7 @@
                 // Pass status to the subscription index page
                 'success_url' => route('subscription.index', ['status' => 'success', 'session_id' => '{CHECKOUT_SESSION_ID}']),
                 'cancel_url' => route('subscription.index', ['status' => 'cancel']),
+                'allow_promotion_codes' => true,
             ]);
     })->name('subscribe.checkout'); // Name changed slightly to be more generic, plan is a param
 
@@ -132,3 +143,25 @@
 
 Route::post('/feedback', [EmailController::class, 'store'])
     ->name('feedback.store');
+
+// Data Metrics Page Route (Public)
+Route::get('/data-metrics', [MetricsController::class, 'index'])->name('data.metrics'); // Added
+
+// Generalized Data Map Routes (New)
+Route::get('/map/{dataType}', [DataMapController::class, 'index'])
+    ->middleware(['auth', 'verified']) // Assuming auth is needed
+    ->name('data-map.index');
+
+// New Combined Data Map Route
+Route::get('/combined-map', [DataMapController::class, 'combinedIndex'])
+    ->middleware(['auth', 'verified']) // Assuming auth is needed
+    ->name('data-map.combined');
+
+// API routes for data fetching (can be grouped under api.php if preferred, but kept here for simplicity with web auth)
+Route::post('/api/data/{dataType}', [DataMapController::class, 'getData'])
+    ->middleware(['auth', 'verified']) // Assuming auth is needed
+    ->name('data.get');
+
+Route::post('/api/natural-language-query/{dataType}', [DataMapController::class, 'naturalLanguageQuery'])
+    ->middleware(['auth', 'verified']) // Assuming auth is needed
+    ->name('data.natural-language-query');
